
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030c4  080030c4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080030c4  080030c4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030c4  080030c4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c4  080030c4  000130c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080030cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000001c  080030e8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080030e8  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009750  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7a  00000000  00000000  00029795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016932  00000000  00000000  0002c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c06b  00000000  00000000  000430fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084511  00000000  00000000  0004f165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  000d36c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800308c 	.word	0x0800308c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800308c 	.word	0x0800308c

0800014c <initButton>:
static uint8_t flagForButtonPress[N0_OF_BUTTONS];
static uint8_t flagForButtonLongPress[N0_OF_BUTTONS];
// we define counter for automatically decreasing.
static uint16_t counterForButtonLongPress[N0_OF_BUTTONS];

void initButton(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e026      	b.n	80001a6 <initButton+0x5a>
        buttonBuffer0[i] = BUTTON_IS_RELEASED;
 8000158:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <initButton+0x6c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = BUTTON_IS_RELEASED;
 8000162:	4a16      	ldr	r2, [pc, #88]	; (80001bc <initButton+0x70>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2201      	movs	r2, #1
 800016a:	701a      	strb	r2, [r3, #0]
        buttonBuffer2[i] = BUTTON_IS_RELEASED;
 800016c:	4a14      	ldr	r2, [pc, #80]	; (80001c0 <initButton+0x74>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
        buttonBuffer3[i] = BUTTON_IS_RELEASED;
 8000176:	4a13      	ldr	r2, [pc, #76]	; (80001c4 <initButton+0x78>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4413      	add	r3, r2
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]

        flagForButtonLongPress[i] = 0;
 8000180:	4a11      	ldr	r2, [pc, #68]	; (80001c8 <initButton+0x7c>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2200      	movs	r2, #0
 8000188:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 800018a:	4a10      	ldr	r2, [pc, #64]	; (80001cc <initButton+0x80>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
        counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000194:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <initButton+0x84>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800019c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3301      	adds	r3, #1
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b03      	cmp	r3, #3
 80001aa:	ddd5      	ble.n	8000158 <initButton+0xc>
    }
}
 80001ac:	bf00      	nop
 80001ae:	bf00      	nop
 80001b0:	370c      	adds	r7, #12
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	20000038 	.word	0x20000038
 80001bc:	2000003c 	.word	0x2000003c
 80001c0:	20000040 	.word	0x20000040
 80001c4:	20000044 	.word	0x20000044
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	20000048 	.word	0x20000048
 80001d0:	20000050 	.word	0x20000050

080001d4 <button_reading>:

void button_reading(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e0a6      	b.n	800032e <button_reading+0x15a>
        buttonBuffer2[i] = buttonBuffer1[i];
 80001e0:	4a57      	ldr	r2, [pc, #348]	; (8000340 <button_reading+0x16c>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4413      	add	r3, r2
 80001e6:	7819      	ldrb	r1, [r3, #0]
 80001e8:	4a56      	ldr	r2, [pc, #344]	; (8000344 <button_reading+0x170>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4413      	add	r3, r2
 80001ee:	460a      	mov	r2, r1
 80001f0:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = buttonBuffer0[i];
 80001f2:	4a55      	ldr	r2, [pc, #340]	; (8000348 <button_reading+0x174>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	7819      	ldrb	r1, [r3, #0]
 80001fa:	4a51      	ldr	r2, [pc, #324]	; (8000340 <button_reading+0x16c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	460a      	mov	r2, r1
 8000202:	701a      	strb	r2, [r3, #0]
        switch (i) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b03      	cmp	r3, #3
 8000208:	d83a      	bhi.n	8000280 <button_reading+0xac>
 800020a:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <button_reading+0x3c>)
 800020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000210:	08000221 	.word	0x08000221
 8000214:	08000239 	.word	0x08000239
 8000218:	08000251 	.word	0x08000251
 800021c:	08000269 	.word	0x08000269
            case 0:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 8000220:	2101      	movs	r1, #1
 8000222:	484a      	ldr	r0, [pc, #296]	; (800034c <button_reading+0x178>)
 8000224:	f001 fb78 	bl	8001918 <HAL_GPIO_ReadPin>
 8000228:	4603      	mov	r3, r0
 800022a:	4619      	mov	r1, r3
 800022c:	4a46      	ldr	r2, [pc, #280]	; (8000348 <button_reading+0x174>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	460a      	mov	r2, r1
 8000234:	701a      	strb	r2, [r3, #0]
                break;
 8000236:	e023      	b.n	8000280 <button_reading+0xac>
            case 1:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000238:	2102      	movs	r1, #2
 800023a:	4844      	ldr	r0, [pc, #272]	; (800034c <button_reading+0x178>)
 800023c:	f001 fb6c 	bl	8001918 <HAL_GPIO_ReadPin>
 8000240:	4603      	mov	r3, r0
 8000242:	4619      	mov	r1, r3
 8000244:	4a40      	ldr	r2, [pc, #256]	; (8000348 <button_reading+0x174>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4413      	add	r3, r2
 800024a:	460a      	mov	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
                break;
 800024e:	e017      	b.n	8000280 <button_reading+0xac>
            case 2:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000250:	2110      	movs	r1, #16
 8000252:	483e      	ldr	r0, [pc, #248]	; (800034c <button_reading+0x178>)
 8000254:	f001 fb60 	bl	8001918 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	4619      	mov	r1, r3
 800025c:	4a3a      	ldr	r2, [pc, #232]	; (8000348 <button_reading+0x174>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4413      	add	r3, r2
 8000262:	460a      	mov	r2, r1
 8000264:	701a      	strb	r2, [r3, #0]
                break;
 8000266:	e00b      	b.n	8000280 <button_reading+0xac>
            case 3:
				buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000268:	2101      	movs	r1, #1
 800026a:	4839      	ldr	r0, [pc, #228]	; (8000350 <button_reading+0x17c>)
 800026c:	f001 fb54 	bl	8001918 <HAL_GPIO_ReadPin>
 8000270:	4603      	mov	r3, r0
 8000272:	4619      	mov	r1, r3
 8000274:	4a34      	ldr	r2, [pc, #208]	; (8000348 <button_reading+0x174>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4413      	add	r3, r2
 800027a:	460a      	mov	r2, r1
 800027c:	701a      	strb	r2, [r3, #0]
				break;
 800027e:	bf00      	nop
        }
        if ((buttonBuffer1[i] == buttonBuffer0[i]) && (buttonBuffer1[i] == buttonBuffer2[i])) {
 8000280:	4a2f      	ldr	r2, [pc, #188]	; (8000340 <button_reading+0x16c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	781a      	ldrb	r2, [r3, #0]
 8000288:	492f      	ldr	r1, [pc, #188]	; (8000348 <button_reading+0x174>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	440b      	add	r3, r1
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	429a      	cmp	r2, r3
 8000292:	d149      	bne.n	8000328 <button_reading+0x154>
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <button_reading+0x16c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4413      	add	r3, r2
 800029a:	781a      	ldrb	r2, [r3, #0]
 800029c:	4929      	ldr	r1, [pc, #164]	; (8000344 <button_reading+0x170>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	440b      	add	r3, r1
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d13f      	bne.n	8000328 <button_reading+0x154>
            if (buttonBuffer2[i] != buttonBuffer3[i]) {
 80002a8:	4a26      	ldr	r2, [pc, #152]	; (8000344 <button_reading+0x170>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	781a      	ldrb	r2, [r3, #0]
 80002b0:	4928      	ldr	r1, [pc, #160]	; (8000354 <button_reading+0x180>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	440b      	add	r3, r1
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d01a      	beq.n	80002f2 <button_reading+0x11e>
                buttonBuffer3[i] = buttonBuffer2[i];
 80002bc:	4a21      	ldr	r2, [pc, #132]	; (8000344 <button_reading+0x170>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4413      	add	r3, r2
 80002c2:	7819      	ldrb	r1, [r3, #0]
 80002c4:	4a23      	ldr	r2, [pc, #140]	; (8000354 <button_reading+0x180>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
                if (buttonBuffer3[i] == BUTTON_IS_PRESSED) {
 80002ce:	4a21      	ldr	r2, [pc, #132]	; (8000354 <button_reading+0x180>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d126      	bne.n	8000328 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 80002da:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <button_reading+0x184>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80002e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 1;
 80002e6:	4a1d      	ldr	r2, [pc, #116]	; (800035c <button_reading+0x188>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4413      	add	r3, r2
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e01a      	b.n	8000328 <button_reading+0x154>
                }
            } else {
                counterForButtonLongPress[i]--;
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <button_reading+0x184>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	b299      	uxth	r1, r3
 80002fe:	4a16      	ldr	r2, [pc, #88]	; (8000358 <button_reading+0x184>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (counterForButtonLongPress[i] == 0) {
 8000306:	4a14      	ldr	r2, [pc, #80]	; (8000358 <button_reading+0x184>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d10a      	bne.n	8000328 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000312:	4a11      	ldr	r2, [pc, #68]	; (8000358 <button_reading+0x184>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800031a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonLongPress[i] = 1;
 800031e:	4a10      	ldr	r2, [pc, #64]	; (8000360 <button_reading+0x18c>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3301      	adds	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b03      	cmp	r3, #3
 8000332:	f77f af55 	ble.w	80001e0 <button_reading+0xc>
                }
            }
        }
    }
}
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	2000003c 	.word	0x2000003c
 8000344:	20000040 	.word	0x20000040
 8000348:	20000038 	.word	0x20000038
 800034c:	40010800 	.word	0x40010800
 8000350:	40010c00 	.word	0x40010c00
 8000354:	20000044 	.word	0x20000044
 8000358:	20000050 	.word	0x20000050
 800035c:	20000048 	.word	0x20000048
 8000360:	2000004c 	.word	0x2000004c

08000364 <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d901      	bls.n	8000378 <is_button_pressed+0x14>
 8000374:	2300      	movs	r3, #0
 8000376:	e00b      	b.n	8000390 <is_button_pressed+0x2c>
    if(flagForButtonPress[index] == 1){
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4a08      	ldr	r2, [pc, #32]	; (800039c <is_button_pressed+0x38>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d105      	bne.n	800038e <is_button_pressed+0x2a>
    	flagForButtonPress[index] = 0;
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <is_button_pressed+0x38>)
 8000386:	2100      	movs	r1, #0
 8000388:	54d1      	strb	r1, [r2, r3]
    	return 1;
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <is_button_pressed+0x2c>
    }
    return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	20000048 	.word	0x20000048

080003a0 <fsm_function>:


int total = 0;


void fsm_function(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	switch(status){
 80003a4:	4bab      	ldr	r3, [pc, #684]	; (8000654 <fsm_function+0x2b4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	2b2a      	cmp	r3, #42	; 0x2a
 80003ac:	f200 8285 	bhi.w	80008ba <fsm_function+0x51a>
 80003b0:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <fsm_function+0x18>)
 80003b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b6:	bf00      	nop
 80003b8:	08000465 	.word	0x08000465
 80003bc:	080004b3 	.word	0x080004b3
 80003c0:	08000539 	.word	0x08000539
 80003c4:	080005c7 	.word	0x080005c7
 80003c8:	08000675 	.word	0x08000675
 80003cc:	080008bb 	.word	0x080008bb
 80003d0:	080008bb 	.word	0x080008bb
 80003d4:	080008bb 	.word	0x080008bb
 80003d8:	080008bb 	.word	0x080008bb
 80003dc:	080008bb 	.word	0x080008bb
 80003e0:	080008bb 	.word	0x080008bb
 80003e4:	080008bb 	.word	0x080008bb
 80003e8:	080008bb 	.word	0x080008bb
 80003ec:	080008bb 	.word	0x080008bb
 80003f0:	080008bb 	.word	0x080008bb
 80003f4:	080008bb 	.word	0x080008bb
 80003f8:	080008bb 	.word	0x080008bb
 80003fc:	080008bb 	.word	0x080008bb
 8000400:	080008bb 	.word	0x080008bb
 8000404:	080008bb 	.word	0x080008bb
 8000408:	080008bb 	.word	0x080008bb
 800040c:	080008bb 	.word	0x080008bb
 8000410:	080008bb 	.word	0x080008bb
 8000414:	080008bb 	.word	0x080008bb
 8000418:	080008bb 	.word	0x080008bb
 800041c:	080008bb 	.word	0x080008bb
 8000420:	080008bb 	.word	0x080008bb
 8000424:	080008bb 	.word	0x080008bb
 8000428:	080008bb 	.word	0x080008bb
 800042c:	080008bb 	.word	0x080008bb
 8000430:	080008bb 	.word	0x080008bb
 8000434:	080008bb 	.word	0x080008bb
 8000438:	080008bb 	.word	0x080008bb
 800043c:	080008bb 	.word	0x080008bb
 8000440:	080008bb 	.word	0x080008bb
 8000444:	080008bb 	.word	0x080008bb
 8000448:	080008bb 	.word	0x080008bb
 800044c:	080008bb 	.word	0x080008bb
 8000450:	080008bb 	.word	0x080008bb
 8000454:	080008bb 	.word	0x080008bb
 8000458:	08000703 	.word	0x08000703
 800045c:	08000783 	.word	0x08000783
 8000460:	08000801 	.word	0x08000801
		case INIT:
			status = RED1_GREEN2;
 8000464:	4b7b      	ldr	r3, [pc, #492]	; (8000654 <fsm_function+0x2b4>)
 8000466:	2202      	movs	r2, #2
 8000468:	601a      	str	r2, [r3, #0]
			//INITIALIZE
			setTimer(green_timer_init*1000,TIMER_FSM_STATE);
 800046a:	4b7b      	ldr	r3, [pc, #492]	; (8000658 <fsm_function+0x2b8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000472:	fb02 f303 	mul.w	r3, r2, r3
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fddd 	bl	8001038 <setTimer>
			setTimer(1000,2);
 800047e:	2102      	movs	r1, #2
 8000480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000484:	f000 fdd8 	bl	8001038 <setTimer>
			counter = red_timer_init;
 8000488:	4b74      	ldr	r3, [pc, #464]	; (800065c <fsm_function+0x2bc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a74      	ldr	r2, [pc, #464]	; (8000660 <fsm_function+0x2c0>)
 800048e:	6013      	str	r3, [r2, #0]
			trafficDisplay1(OFF);
 8000490:	2000      	movs	r0, #0
 8000492:	f000 fa7b 	bl	800098c <trafficDisplay1>
			trafficDisplay2(OFF);
 8000496:	2000      	movs	r0, #0
 8000498:	f000 fac6 	bl	8000a28 <trafficDisplay2>
			total = red_timer_init + green_timer_init + yellow_timer_init;
 800049c:	4b6f      	ldr	r3, [pc, #444]	; (800065c <fsm_function+0x2bc>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b6d      	ldr	r3, [pc, #436]	; (8000658 <fsm_function+0x2b8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	441a      	add	r2, r3
 80004a6:	4b6f      	ldr	r3, [pc, #444]	; (8000664 <fsm_function+0x2c4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4413      	add	r3, r2
 80004ac:	4a6e      	ldr	r2, [pc, #440]	; (8000668 <fsm_function+0x2c8>)
 80004ae:	6013      	str	r3, [r2, #0]
			break;
 80004b0:	e212      	b.n	80008d8 <fsm_function+0x538>
		case RED1_GREEN2:
			trafficDisplay1(RED);
 80004b2:	2001      	movs	r0, #1
 80004b4:	f000 fa6a 	bl	800098c <trafficDisplay1>
			trafficDisplay2(GREEN);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 fab5 	bl	8000a28 <trafficDisplay2>
			//DECREMENT EACH SECOND
			if(timer_flag[2] == 1){
 80004be:	4b6b      	ldr	r3, [pc, #428]	; (800066c <fsm_function+0x2cc>)
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d109      	bne.n	80004da <fsm_function+0x13a>
				counter--;
 80004c6:	4b66      	ldr	r3, [pc, #408]	; (8000660 <fsm_function+0x2c0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	4a64      	ldr	r2, [pc, #400]	; (8000660 <fsm_function+0x2c0>)
 80004ce:	6013      	str	r3, [r2, #0]
				setTimer(1000,2);
 80004d0:	2102      	movs	r1, #2
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f000 fdaf 	bl	8001038 <setTimer>
			}
			//NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 80004da:	4b64      	ldr	r3, [pc, #400]	; (800066c <fsm_function+0x2cc>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d10c      	bne.n	80004fc <fsm_function+0x15c>
				setTimer(yellow_timer_init*1000,TIMER_FSM_STATE);
 80004e2:	4b60      	ldr	r3, [pc, #384]	; (8000664 <fsm_function+0x2c4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ea:	fb02 f303 	mul.w	r3, r2, r3
 80004ee:	2101      	movs	r1, #1
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fda1 	bl	8001038 <setTimer>
				status = RED1_YELLOW2;
 80004f6:	4b57      	ldr	r3, [pc, #348]	; (8000654 <fsm_function+0x2b4>)
 80004f8:	2203      	movs	r2, #3
 80004fa:	601a      	str	r2, [r3, #0]
			}
			//BUTTON 0 PROCESSING
			if(is_button_pressed(0) == 1){
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ff31 	bl	8000364 <is_button_pressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	d102      	bne.n	800050e <fsm_function+0x16e>
				status = MODE_2;
 8000508:	4b52      	ldr	r3, [pc, #328]	; (8000654 <fsm_function+0x2b4>)
 800050a:	2229      	movs	r2, #41	; 0x29
 800050c:	601a      	str	r2, [r3, #0]
			}
			//BUTTON 3 PROCESSING
			if(is_button_pressed(3) == 1){
 800050e:	2003      	movs	r0, #3
 8000510:	f7ff ff28 	bl	8000364 <is_button_pressed>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	f040 81d1 	bne.w	80008be <fsm_function+0x51e>
				setTimer(2000*total, TIMER_PEDESTRIAN_PERIOD);
 800051c:	4b52      	ldr	r3, [pc, #328]	; (8000668 <fsm_function+0x2c8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	2103      	movs	r1, #3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fd84 	bl	8001038 <setTimer>
				pes_flag = 1;
 8000530:	4b4f      	ldr	r3, [pc, #316]	; (8000670 <fsm_function+0x2d0>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
			}
			break;
 8000536:	e1c2      	b.n	80008be <fsm_function+0x51e>
		case RED1_YELLOW2:
			trafficDisplay1(RED);
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fa27 	bl	800098c <trafficDisplay1>
			trafficDisplay2(YELLOW);
 800053e:	2002      	movs	r0, #2
 8000540:	f000 fa72 	bl	8000a28 <trafficDisplay2>
			//DECREMENT EACH SECOND
			if(timer_flag[2] == 1){
 8000544:	4b49      	ldr	r3, [pc, #292]	; (800066c <fsm_function+0x2cc>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d109      	bne.n	8000560 <fsm_function+0x1c0>
				counter--;
 800054c:	4b44      	ldr	r3, [pc, #272]	; (8000660 <fsm_function+0x2c0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3b01      	subs	r3, #1
 8000552:	4a43      	ldr	r2, [pc, #268]	; (8000660 <fsm_function+0x2c0>)
 8000554:	6013      	str	r3, [r2, #0]
				setTimer(1000,2);
 8000556:	2102      	movs	r1, #2
 8000558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055c:	f000 fd6c 	bl	8001038 <setTimer>
			}
			//NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 8000560:	4b42      	ldr	r3, [pc, #264]	; (800066c <fsm_function+0x2cc>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d110      	bne.n	800058a <fsm_function+0x1ea>
				setTimer(green_timer_init*1000,TIMER_FSM_STATE);
 8000568:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <fsm_function+0x2b8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000570:	fb02 f303 	mul.w	r3, r2, r3
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fd5e 	bl	8001038 <setTimer>
				status = GREEN1_RED2;
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <fsm_function+0x2b4>)
 800057e:	2204      	movs	r2, #4
 8000580:	601a      	str	r2, [r3, #0]
				counter = green_timer_init;
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <fsm_function+0x2b8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a36      	ldr	r2, [pc, #216]	; (8000660 <fsm_function+0x2c0>)
 8000588:	6013      	str	r3, [r2, #0]
			}
			//BUTTON 0 PROCESSING
			if(is_button_pressed(0) == 1){
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff feea 	bl	8000364 <is_button_pressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b01      	cmp	r3, #1
 8000594:	d102      	bne.n	800059c <fsm_function+0x1fc>
				status = MODE_2;
 8000596:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <fsm_function+0x2b4>)
 8000598:	2229      	movs	r2, #41	; 0x29
 800059a:	601a      	str	r2, [r3, #0]
			}
			//BUTTON 3 PROCESSING
			if(is_button_pressed(3) == 1){
 800059c:	2003      	movs	r0, #3
 800059e:	f7ff fee1 	bl	8000364 <is_button_pressed>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	f040 818c 	bne.w	80008c2 <fsm_function+0x522>
				setTimer(2000*total, TIMER_PEDESTRIAN_PERIOD);
 80005aa:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <fsm_function+0x2c8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005b2:	fb02 f303 	mul.w	r3, r2, r3
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fd3d 	bl	8001038 <setTimer>
				pes_flag = 1;
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <fsm_function+0x2d0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	601a      	str	r2, [r3, #0]
			}
			break;
 80005c4:	e17d      	b.n	80008c2 <fsm_function+0x522>
		case GREEN1_RED2:
			trafficDisplay1(GREEN);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 f9e0 	bl	800098c <trafficDisplay1>
			trafficDisplay2(RED);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fa2b 	bl	8000a28 <trafficDisplay2>
			//DECREMENT EACH SECOND
			if(timer_flag[2] == 1){
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <fsm_function+0x2cc>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d109      	bne.n	80005ee <fsm_function+0x24e>
				counter--;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <fsm_function+0x2c0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <fsm_function+0x2c0>)
 80005e2:	6013      	str	r3, [r2, #0]
				setTimer(1000,2);
 80005e4:	2102      	movs	r1, #2
 80005e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ea:	f000 fd25 	bl	8001038 <setTimer>
			}
			//NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <fsm_function+0x2cc>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d110      	bne.n	8000618 <fsm_function+0x278>
				setTimer(yellow_timer_init*1000,TIMER_FSM_STATE);
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <fsm_function+0x2c4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	2101      	movs	r1, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fd17 	bl	8001038 <setTimer>
				status = YELLOW1_RED2;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <fsm_function+0x2b4>)
 800060c:	2205      	movs	r2, #5
 800060e:	601a      	str	r2, [r3, #0]
				counter = yellow_timer_init;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <fsm_function+0x2c4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <fsm_function+0x2c0>)
 8000616:	6013      	str	r3, [r2, #0]
			}
			//BUTTON 0 PROCESSING
			if(is_button_pressed(0) == 1){
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fea3 	bl	8000364 <is_button_pressed>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d102      	bne.n	800062a <fsm_function+0x28a>
				status = MODE_2;
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <fsm_function+0x2b4>)
 8000626:	2229      	movs	r2, #41	; 0x29
 8000628:	601a      	str	r2, [r3, #0]
			}
			//BUTTON 3 PROCESSING
			if(is_button_pressed(3) == 1){
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff fe9a 	bl	8000364 <is_button_pressed>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	f040 8147 	bne.w	80008c6 <fsm_function+0x526>
				setTimer(2000*total, TIMER_PEDESTRIAN_PERIOD);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <fsm_function+0x2c8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000640:	fb02 f303 	mul.w	r3, r2, r3
 8000644:	2103      	movs	r1, #3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fcf6 	bl	8001038 <setTimer>
				pes_flag = 1;
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <fsm_function+0x2d0>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
			}
			break;
 8000652:	e138      	b.n	80008c6 <fsm_function+0x526>
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	2000000c 	.word	0x2000000c
 8000660:	2000005c 	.word	0x2000005c
 8000664:	20000004 	.word	0x20000004
 8000668:	2000006c 	.word	0x2000006c
 800066c:	20000118 	.word	0x20000118
 8000670:	20000058 	.word	0x20000058
		case YELLOW1_RED2:
			trafficDisplay1(YELLOW);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f989 	bl	800098c <trafficDisplay1>
			trafficDisplay2(RED);
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f9d4 	bl	8000a28 <trafficDisplay2>
			//DECREMENT EACH SECOND
			if(timer_flag[2] == 1){
 8000680:	4b96      	ldr	r3, [pc, #600]	; (80008dc <fsm_function+0x53c>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d109      	bne.n	800069c <fsm_function+0x2fc>
				counter--;
 8000688:	4b95      	ldr	r3, [pc, #596]	; (80008e0 <fsm_function+0x540>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a94      	ldr	r2, [pc, #592]	; (80008e0 <fsm_function+0x540>)
 8000690:	6013      	str	r3, [r2, #0]
				setTimer(1000,2);
 8000692:	2102      	movs	r1, #2
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fcce 	bl	8001038 <setTimer>
			}
			//NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800069c:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <fsm_function+0x53c>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d110      	bne.n	80006c6 <fsm_function+0x326>
				setTimer(green_timer_init*1000,TIMER_FSM_STATE);
 80006a4:	4b8f      	ldr	r3, [pc, #572]	; (80008e4 <fsm_function+0x544>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	2101      	movs	r1, #1
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fcc0 	bl	8001038 <setTimer>
				status = RED1_GREEN2;
 80006b8:	4b8b      	ldr	r3, [pc, #556]	; (80008e8 <fsm_function+0x548>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	601a      	str	r2, [r3, #0]
				counter = red_timer_init;
 80006be:	4b8b      	ldr	r3, [pc, #556]	; (80008ec <fsm_function+0x54c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a87      	ldr	r2, [pc, #540]	; (80008e0 <fsm_function+0x540>)
 80006c4:	6013      	str	r3, [r2, #0]
			}
			//BUTTON 0 PROCESSING
			if(is_button_pressed(0) == 1){
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fe4c 	bl	8000364 <is_button_pressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d102      	bne.n	80006d8 <fsm_function+0x338>
				status = MODE_2;
 80006d2:	4b85      	ldr	r3, [pc, #532]	; (80008e8 <fsm_function+0x548>)
 80006d4:	2229      	movs	r2, #41	; 0x29
 80006d6:	601a      	str	r2, [r3, #0]
			}
			//BUTTON 3 PROCESSING
			if(is_button_pressed(3) == 1){
 80006d8:	2003      	movs	r0, #3
 80006da:	f7ff fe43 	bl	8000364 <is_button_pressed>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	f040 80f2 	bne.w	80008ca <fsm_function+0x52a>
				setTimer(2000*total, TIMER_PEDESTRIAN_PERIOD);
 80006e6:	4b82      	ldr	r3, [pc, #520]	; (80008f0 <fsm_function+0x550>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ee:	fb02 f303 	mul.w	r3, r2, r3
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc9f 	bl	8001038 <setTimer>
				pes_flag = 1;
 80006fa:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <fsm_function+0x554>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
			}
			break;
 8000700:	e0e3      	b.n	80008ca <fsm_function+0x52a>
		case MODE_2:
			//TOGGLE RED
			trafficToggle(RED);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 f9d8 	bl	8000ab8 <trafficToggle>
			//BUTTON0 PRESSED
			if(is_button_pressed(0) == 1){
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fe2b 	bl	8000364 <is_button_pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d102      	bne.n	800071a <fsm_function+0x37a>
				status = MODE_3;
 8000714:	4b74      	ldr	r3, [pc, #464]	; (80008e8 <fsm_function+0x548>)
 8000716:	222a      	movs	r2, #42	; 0x2a
 8000718:	601a      	str	r2, [r3, #0]
			}
			//BUTTON1 PRESSED
			if(is_button_pressed(1) == 1){
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fe22 	bl	8000364 <is_button_pressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d110      	bne.n	8000748 <fsm_function+0x3a8>
				red_temp = red_timer_init;
 8000726:	4b71      	ldr	r3, [pc, #452]	; (80008ec <fsm_function+0x54c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a73      	ldr	r2, [pc, #460]	; (80008f8 <fsm_function+0x558>)
 800072c:	6013      	str	r3, [r2, #0]
				//ADD UP RED
				if(red_temp >= 99){
 800072e:	4b72      	ldr	r3, [pc, #456]	; (80008f8 <fsm_function+0x558>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b62      	cmp	r3, #98	; 0x62
 8000734:	dd03      	ble.n	800073e <fsm_function+0x39e>
					red_temp =0;
 8000736:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <fsm_function+0x558>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e004      	b.n	8000748 <fsm_function+0x3a8>
				}
				else{
					red_temp++;
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <fsm_function+0x558>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <fsm_function+0x558>)
 8000746:	6013      	str	r3, [r2, #0]
				}
			}
			//BUTTON2 PRESSED
			if(is_button_pressed(2) == 1){
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff fe0b 	bl	8000364 <is_button_pressed>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	f040 80bc 	bne.w	80008ce <fsm_function+0x52e>
				//SAVE
				red_timer_init = red_temp;
 8000756:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <fsm_function+0x558>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a64      	ldr	r2, [pc, #400]	; (80008ec <fsm_function+0x54c>)
 800075c:	6013      	str	r3, [r2, #0]
				//RESET CONDITION
				yellow_timer_init = red_timer_init - green_timer_init;
 800075e:	4b63      	ldr	r3, [pc, #396]	; (80008ec <fsm_function+0x54c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <fsm_function+0x544>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	4a64      	ldr	r2, [pc, #400]	; (80008fc <fsm_function+0x55c>)
 800076a:	6013      	str	r3, [r2, #0]
				green_timer_init = red_timer_init - yellow_timer_init;
 800076c:	4b5f      	ldr	r3, [pc, #380]	; (80008ec <fsm_function+0x54c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <fsm_function+0x55c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	4a5b      	ldr	r2, [pc, #364]	; (80008e4 <fsm_function+0x544>)
 8000778:	6013      	str	r3, [r2, #0]

				status = MODE_3;
 800077a:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <fsm_function+0x548>)
 800077c:	222a      	movs	r2, #42	; 0x2a
 800077e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000780:	e0a5      	b.n	80008ce <fsm_function+0x52e>
		case MODE_3:
			//TOGGLE RED
			trafficToggle(YELLOW);
 8000782:	2002      	movs	r0, #2
 8000784:	f000 f998 	bl	8000ab8 <trafficToggle>
			//BUTTON0 PRESSED
			if(is_button_pressed(0) == 1){
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fdeb 	bl	8000364 <is_button_pressed>
 800078e:	4603      	mov	r3, r0
 8000790:	2b01      	cmp	r3, #1
 8000792:	d102      	bne.n	800079a <fsm_function+0x3fa>
				status = MODE_4;
 8000794:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <fsm_function+0x548>)
 8000796:	222b      	movs	r2, #43	; 0x2b
 8000798:	601a      	str	r2, [r3, #0]
			}
			//BUTTON1 PRESSED
			if(is_button_pressed(1) == 1){
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fde2 	bl	8000364 <is_button_pressed>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d110      	bne.n	80007c8 <fsm_function+0x428>
				yellow_temp = yellow_timer_init;
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <fsm_function+0x55c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a55      	ldr	r2, [pc, #340]	; (8000900 <fsm_function+0x560>)
 80007ac:	6013      	str	r3, [r2, #0]
				//ADD UP YELLOW
				if(yellow_temp >= 99){
 80007ae:	4b54      	ldr	r3, [pc, #336]	; (8000900 <fsm_function+0x560>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b62      	cmp	r3, #98	; 0x62
 80007b4:	dd03      	ble.n	80007be <fsm_function+0x41e>
					yellow_temp = 0;
 80007b6:	4b52      	ldr	r3, [pc, #328]	; (8000900 <fsm_function+0x560>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e004      	b.n	80007c8 <fsm_function+0x428>
				}
				else{
					yellow_temp++;
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <fsm_function+0x560>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a4e      	ldr	r2, [pc, #312]	; (8000900 <fsm_function+0x560>)
 80007c6:	6013      	str	r3, [r2, #0]
				}
			}
			//BUTTON2 PRESSED
			if(is_button_pressed(2) == 1){
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff fdcb 	bl	8000364 <is_button_pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d17e      	bne.n	80008d2 <fsm_function+0x532>
				//SAVE
				yellow_timer_init = yellow_temp;
 80007d4:	4b4a      	ldr	r3, [pc, #296]	; (8000900 <fsm_function+0x560>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a48      	ldr	r2, [pc, #288]	; (80008fc <fsm_function+0x55c>)
 80007da:	6013      	str	r3, [r2, #0]
				//RESET CONDITION
				green_timer_init = red_timer_init - yellow_timer_init;
 80007dc:	4b43      	ldr	r3, [pc, #268]	; (80008ec <fsm_function+0x54c>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b46      	ldr	r3, [pc, #280]	; (80008fc <fsm_function+0x55c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <fsm_function+0x544>)
 80007e8:	6013      	str	r3, [r2, #0]
				red_timer_init = yellow_timer_init + green_timer_init;
 80007ea:	4b44      	ldr	r3, [pc, #272]	; (80008fc <fsm_function+0x55c>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b3d      	ldr	r3, [pc, #244]	; (80008e4 <fsm_function+0x544>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a3d      	ldr	r2, [pc, #244]	; (80008ec <fsm_function+0x54c>)
 80007f6:	6013      	str	r3, [r2, #0]

				status = MODE_4;
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <fsm_function+0x548>)
 80007fa:	222b      	movs	r2, #43	; 0x2b
 80007fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80007fe:	e068      	b.n	80008d2 <fsm_function+0x532>
		case MODE_4:
			//TOGGLE RED
			trafficToggle(GREEN);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f959 	bl	8000ab8 <trafficToggle>
			//BUTTON0 PRESSED
			if(is_button_pressed(0) == 1){
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fdac 	bl	8000364 <is_button_pressed>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d10c      	bne.n	800082c <fsm_function+0x48c>
				status = RED1_GREEN2 ;
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <fsm_function+0x548>)
 8000814:	2202      	movs	r2, #2
 8000816:	601a      	str	r2, [r3, #0]
				setTimer(green_timer_init*1000,TIMER_FSM_STATE);
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <fsm_function+0x544>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000820:	fb02 f303 	mul.w	r3, r2, r3
 8000824:	2101      	movs	r1, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fc06 	bl	8001038 <setTimer>
			}
			//BUTTON1 PRESSED
			if(is_button_pressed(1) == 1){
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fd99 	bl	8000364 <is_button_pressed>
 8000832:	4603      	mov	r3, r0
 8000834:	2b01      	cmp	r3, #1
 8000836:	d110      	bne.n	800085a <fsm_function+0x4ba>
				green_temp = green_timer_init;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <fsm_function+0x544>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a31      	ldr	r2, [pc, #196]	; (8000904 <fsm_function+0x564>)
 800083e:	6013      	str	r3, [r2, #0]
				//ADD UP GREEN
				if(green_temp >= 99){
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <fsm_function+0x564>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b62      	cmp	r3, #98	; 0x62
 8000846:	dd03      	ble.n	8000850 <fsm_function+0x4b0>
					green_temp =0;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <fsm_function+0x564>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e004      	b.n	800085a <fsm_function+0x4ba>
				}
				else{
					green_temp++;
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <fsm_function+0x564>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a2b      	ldr	r2, [pc, #172]	; (8000904 <fsm_function+0x564>)
 8000858:	6013      	str	r3, [r2, #0]
				}
			}
			//BUTTON2 PRESSED
			if(is_button_pressed(2) == 1){
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff fd82 	bl	8000364 <is_button_pressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d137      	bne.n	80008d6 <fsm_function+0x536>
				//SAVE
				green_timer_init = green_temp;;
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <fsm_function+0x564>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <fsm_function+0x544>)
 800086c:	6013      	str	r3, [r2, #0]
				//RESET CONDITION
				yellow_timer_init = red_timer_init - green_timer_init;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <fsm_function+0x54c>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <fsm_function+0x544>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	4a20      	ldr	r2, [pc, #128]	; (80008fc <fsm_function+0x55c>)
 800087a:	6013      	str	r3, [r2, #0]
				red_timer_init = yellow_timer_init + green_timer_init;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <fsm_function+0x55c>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <fsm_function+0x544>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4413      	add	r3, r2
 8000886:	4a19      	ldr	r2, [pc, #100]	; (80008ec <fsm_function+0x54c>)
 8000888:	6013      	str	r3, [r2, #0]

				setTimer(green_timer_init*1000,TIMER_FSM_STATE);
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <fsm_function+0x544>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f000 fbcd 	bl	8001038 <setTimer>
				total = red_timer_init + green_timer_init + yellow_timer_init;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <fsm_function+0x54c>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <fsm_function+0x544>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	441a      	add	r2, r3
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <fsm_function+0x55c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4413      	add	r3, r2
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <fsm_function+0x550>)
 80008b0:	6013      	str	r3, [r2, #0]
				status = RED1_GREEN2;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <fsm_function+0x548>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
			}
			break;
 80008b8:	e00d      	b.n	80008d6 <fsm_function+0x536>
		default:
			break;
 80008ba:	bf00      	nop
 80008bc:	e00c      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008be:	bf00      	nop
 80008c0:	e00a      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008c2:	bf00      	nop
 80008c4:	e008      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008c6:	bf00      	nop
 80008c8:	e006      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008ca:	bf00      	nop
 80008cc:	e004      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008ce:	bf00      	nop
 80008d0:	e002      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008d2:	bf00      	nop
 80008d4:	e000      	b.n	80008d8 <fsm_function+0x538>
			break;
 80008d6:	bf00      	nop
	}
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000118 	.word	0x20000118
 80008e0:	2000005c 	.word	0x2000005c
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000000 	.word	0x20000000
 80008ec:	2000000c 	.word	0x2000000c
 80008f0:	2000006c 	.word	0x2000006c
 80008f4:	20000058 	.word	0x20000058
 80008f8:	20000060 	.word	0x20000060
 80008fc:	20000004 	.word	0x20000004
 8000900:	20000064 	.word	0x20000064
 8000904:	20000068 	.word	0x20000068

08000908 <fsm_pedestrian>:
 *      Author: tango
 */

#include "global.h"

void fsm_pedestrian(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	if(pes_flag){
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <fsm_pedestrian+0x78>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d023      	beq.n	800095c <fsm_pedestrian+0x54>
		switch(status){
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <fsm_pedestrian+0x7c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b02      	subs	r3, #2
 800091a:	2b03      	cmp	r3, #3
 800091c:	d820      	bhi.n	8000960 <fsm_pedestrian+0x58>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <fsm_pedestrian+0x1c>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	08000935 	.word	0x08000935
 8000928:	0800093d 	.word	0x0800093d
 800092c:	08000949 	.word	0x08000949
 8000930:	08000955 	.word	0x08000955
			case RED1_GREEN2:
				pedestrianDispay(GREEN);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f907 	bl	8000b48 <pedestrianDispay>
				break;
 800093a:	e012      	b.n	8000962 <fsm_pedestrian+0x5a>
			case RED1_YELLOW2:

				// time to walk running out
				pedestrianToggle(GREEN);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f955 	bl	8000bec <pedestrianToggle>
				BuzzerOn();
 8000942:	f000 f98f 	bl	8000c64 <BuzzerOn>
				break;
 8000946:	e00c      	b.n	8000962 <fsm_pedestrian+0x5a>
			case GREEN1_RED2:
				pedestrianDispay(RED);
 8000948:	2001      	movs	r0, #1
 800094a:	f000 f8fd 	bl	8000b48 <pedestrianDispay>
				// BUZZER OFF
				BuzzerOff();
 800094e:	f000 f997 	bl	8000c80 <BuzzerOff>
				break;
 8000952:	e006      	b.n	8000962 <fsm_pedestrian+0x5a>
			case YELLOW1_RED2:
				pedestrianToggle(RED);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 f949 	bl	8000bec <pedestrianToggle>
				break;
 800095a:	e002      	b.n	8000962 <fsm_pedestrian+0x5a>
			default:
				break;
		}
	}
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <fsm_pedestrian+0x5a>
				break;
 8000960:	bf00      	nop
	if(timer_flag[TIMER_PEDESTRIAN_PERIOD]){
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <fsm_pedestrian+0x80>)
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d008      	beq.n	800097c <fsm_pedestrian+0x74>
		timer_flag[TIMER_PEDESTRIAN_PERIOD] = 0;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <fsm_pedestrian+0x80>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
		pedestrianDispay(OFF);
 8000970:	2000      	movs	r0, #0
 8000972:	f000 f8e9 	bl	8000b48 <pedestrianDispay>
		pes_flag = 0;
 8000976:	4b02      	ldr	r3, [pc, #8]	; (8000980 <fsm_pedestrian+0x78>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
	}
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000058 	.word	0x20000058
 8000984:	20000000 	.word	0x20000000
 8000988:	20000118 	.word	0x20000118

0800098c <trafficDisplay1>:



#include <hardware.h>

void trafficDisplay1(uint8_t input){
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d83b      	bhi.n	8000a14 <trafficDisplay1+0x88>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <trafficDisplay1+0x18>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	080009cd 	.word	0x080009cd
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	080009e5 	.word	0x080009e5
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ba:	4819      	ldr	r0, [pc, #100]	; (8000a20 <trafficDisplay1+0x94>)
 80009bc:	f000 ffc3 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2108      	movs	r1, #8
 80009c4:	4817      	ldr	r0, [pc, #92]	; (8000a24 <trafficDisplay1+0x98>)
 80009c6:	f000 ffbe 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 80009ca:	e024      	b.n	8000a16 <trafficDisplay1+0x8a>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <trafficDisplay1+0x94>)
 80009d4:	f000 ffb7 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2108      	movs	r1, #8
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <trafficDisplay1+0x98>)
 80009de:	f000 ffb2 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 80009e2:	e018      	b.n	8000a16 <trafficDisplay1+0x8a>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <trafficDisplay1+0x94>)
 80009ec:	f000 ffab 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2108      	movs	r1, #8
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <trafficDisplay1+0x98>)
 80009f6:	f000 ffa6 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 80009fa:	e00c      	b.n	8000a16 <trafficDisplay1+0x8a>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <trafficDisplay1+0x94>)
 8000a04:	f000 ff9f 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <trafficDisplay1+0x98>)
 8000a0e:	f000 ff9a 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000a12:	e000      	b.n	8000a16 <trafficDisplay1+0x8a>
		default:
			break;
 8000a14:	bf00      	nop
	}
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40010800 	.word	0x40010800
 8000a24:	40010c00 	.word	0x40010c00

08000a28 <trafficDisplay2>:

void trafficDisplay2(uint8_t input){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	d837      	bhi.n	8000aa8 <trafficDisplay2+0x80>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <trafficDisplay2+0x18>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a51 	.word	0x08000a51
 8000a44:	08000a67 	.word	0x08000a67
 8000a48:	08000a93 	.word	0x08000a93
 8000a4c:	08000a7d 	.word	0x08000a7d
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a56:	f000 ff76 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a60:	f000 ff71 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000a64:	e021      	b.n	8000aaa <trafficDisplay2+0x82>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a6c:	f000 ff6b 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2110      	movs	r1, #16
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a76:	f000 ff66 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000a7a:	e016      	b.n	8000aaa <trafficDisplay2+0x82>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2120      	movs	r1, #32
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a82:	f000 ff60 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2110      	movs	r1, #16
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a8c:	f000 ff5b 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000a90:	e00b      	b.n	8000aaa <trafficDisplay2+0x82>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2120      	movs	r1, #32
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000a98:	f000 ff55 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <trafficDisplay2+0x8c>)
 8000aa2:	f000 ff50 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000aa6:	e000      	b.n	8000aaa <trafficDisplay2+0x82>
		default:
			break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010c00 	.word	0x40010c00

08000ab8 <trafficToggle>:

uint8_t toggle_state = 0;
void trafficToggle(uint8_t input){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[4]){
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <trafficToggle+0x88>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <trafficToggle+0x2a>
		setTimer(1000, 4);
 8000aca:	2104      	movs	r1, #4
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f000 fab2 	bl	8001038 <setTimer>
		toggle_state = 1 - toggle_state;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <trafficToggle+0x8c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	f1c3 0301 	rsb	r3, r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <trafficToggle+0x8c>)
 8000ae0:	701a      	strb	r2, [r3, #0]
	}
	if(toggle_state){
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <trafficToggle+0x8c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d01e      	beq.n	8000b28 <trafficToggle+0x70>
		switch(input){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d014      	beq.n	8000b1a <trafficToggle+0x62>
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	dc20      	bgt.n	8000b36 <trafficToggle+0x7e>
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d002      	beq.n	8000afe <trafficToggle+0x46>
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d007      	beq.n	8000b0c <trafficToggle+0x54>
	}
	else {
		trafficDisplay1(OFF);
		trafficDisplay2(OFF);
	}
}
 8000afc:	e01b      	b.n	8000b36 <trafficToggle+0x7e>
				trafficDisplay1(RED);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff ff44 	bl	800098c <trafficDisplay1>
				trafficDisplay2(RED);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff ff8f 	bl	8000a28 <trafficDisplay2>
				break;
 8000b0a:	e014      	b.n	8000b36 <trafficToggle+0x7e>
				trafficDisplay1(YELLOW);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff ff3d 	bl	800098c <trafficDisplay1>
				trafficDisplay2(YELLOW);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff ff88 	bl	8000a28 <trafficDisplay2>
				break;
 8000b18:	e00d      	b.n	8000b36 <trafficToggle+0x7e>
				trafficDisplay1(GREEN);
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	f7ff ff36 	bl	800098c <trafficDisplay1>
				trafficDisplay2(GREEN);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff ff81 	bl	8000a28 <trafficDisplay2>
				break;
 8000b26:	e006      	b.n	8000b36 <trafficToggle+0x7e>
		trafficDisplay1(OFF);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ff2f 	bl	800098c <trafficDisplay1>
		trafficDisplay2(OFF);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff7a 	bl	8000a28 <trafficDisplay2>
}
 8000b34:	e7ff      	b.n	8000b36 <trafficToggle+0x7e>
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000118 	.word	0x20000118
 8000b44:	20000070 	.word	0x20000070

08000b48 <pedestrianDispay>:


void pedestrianDispay(uint8_t input){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d83f      	bhi.n	8000bd8 <pedestrianDispay+0x90>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <pedestrianDispay+0x18>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b71 	.word	0x08000b71
 8000b64:	08000b8b 	.word	0x08000b8b
 8000b68:	08000bbf 	.word	0x08000bbf
 8000b6c:	08000ba5 	.word	0x08000ba5
		case OFF:
		  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	481b      	ldr	r0, [pc, #108]	; (8000be4 <pedestrianDispay+0x9c>)
 8000b78:	f000 fee5 	bl	8001946 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4819      	ldr	r0, [pc, #100]	; (8000be8 <pedestrianDispay+0xa0>)
 8000b84:	f000 fedf 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000b88:	e027      	b.n	8000bda <pedestrianDispay+0x92>
		case RED:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <pedestrianDispay+0x9c>)
 8000b92:	f000 fed8 	bl	8001946 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <pedestrianDispay+0xa0>)
 8000b9e:	f000 fed2 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000ba2:	e01a      	b.n	8000bda <pedestrianDispay+0x92>
		case GREEN:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	480e      	ldr	r0, [pc, #56]	; (8000be4 <pedestrianDispay+0x9c>)
 8000bac:	f000 fecb 	bl	8001946 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <pedestrianDispay+0xa0>)
 8000bb8:	f000 fec5 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000bbc:	e00d      	b.n	8000bda <pedestrianDispay+0x92>
		case YELLOW:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <pedestrianDispay+0x9c>)
 8000bc6:	f000 febe 	bl	8001946 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <pedestrianDispay+0xa0>)
 8000bd2:	f000 feb8 	bl	8001946 <HAL_GPIO_WritePin>
		  break;
 8000bd6:	e000      	b.n	8000bda <pedestrianDispay+0x92>
		default:
			break;
 8000bd8:	bf00      	nop
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40010800 	.word	0x40010800

08000bec <pedestrianToggle>:

uint8_t togglePedState = 0;
void pedestrianToggle(uint8_t input){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[4]){
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <pedestrianToggle+0x70>)
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d00b      	beq.n	8000c16 <pedestrianToggle+0x2a>
		setTimer(1000, 4);
 8000bfe:	2104      	movs	r1, #4
 8000c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c04:	f000 fa18 	bl	8001038 <setTimer>
		togglePedState = 1 - togglePedState;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <pedestrianToggle+0x74>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f1c3 0301 	rsb	r3, r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <pedestrianToggle+0x74>)
 8000c14:	701a      	strb	r2, [r3, #0]
	}
	if(togglePedState){
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <pedestrianToggle+0x74>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d015      	beq.n	8000c4a <pedestrianToggle+0x5e>
		switch(input){
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d00e      	beq.n	8000c42 <pedestrianToggle+0x56>
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	dc14      	bgt.n	8000c52 <pedestrianToggle+0x66>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d002      	beq.n	8000c32 <pedestrianToggle+0x46>
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d004      	beq.n	8000c3a <pedestrianToggle+0x4e>
		}
	}
	else {
		pedestrianDispay(OFF);
	}
}
 8000c30:	e00f      	b.n	8000c52 <pedestrianToggle+0x66>
				pedestrianDispay(RED);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff ff88 	bl	8000b48 <pedestrianDispay>
				break;
 8000c38:	e00b      	b.n	8000c52 <pedestrianToggle+0x66>
				pedestrianDispay(YELLOW);
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff ff84 	bl	8000b48 <pedestrianDispay>
				break;
 8000c40:	e007      	b.n	8000c52 <pedestrianToggle+0x66>
				pedestrianDispay(GREEN);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f7ff ff80 	bl	8000b48 <pedestrianDispay>
				break;
 8000c48:	e003      	b.n	8000c52 <pedestrianToggle+0x66>
		pedestrianDispay(OFF);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ff7c 	bl	8000b48 <pedestrianDispay>
}
 8000c50:	e7ff      	b.n	8000c52 <pedestrianToggle+0x66>
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000118 	.word	0x20000118
 8000c60:	20000071 	.word	0x20000071

08000c64 <BuzzerOn>:

void BuzzerOn(){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,1000);
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <BuzzerOn+0x18>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000bc 	.word	0x200000bc

08000c80 <BuzzerOff>:


void BuzzerOff(){
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <BuzzerOff+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200000bc 	.word	0x200000bc

08000c98 <runAutoDebug>:

void runAutoDebug() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	if(timer_flag[0]){
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <runAutoDebug+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <runAutoDebug+0x1e>
		setTimer(1000,0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000caa:	f000 f9c5 	bl	8001038 <setTimer>
		HAL_GPIO_TogglePin(DEBUG_LED1_GPIO_Port, DEBUG_LED1_Pin);
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <runAutoDebug+0x28>)
 8000cb2:	f000 fe60 	bl	8001976 <HAL_GPIO_TogglePin>
        if(is_button_pressed(0)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(1)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(2)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(3)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
#endif //__TEST_BUTTON
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000118 	.word	0x20000118
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc8:	f000 fb32 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ccc:	f000 f81e 	bl	8000d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd0:	f000 f91a 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cd4:	f000 f856 	bl	8000d84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cd8:	f000 f8a0 	bl	8000e1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <main+0x40>)
 8000cde:	f001 fa9b 	bl	8002218 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <main+0x44>)
 8000ce6:	f001 fb41 	bl	800236c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initButton();
 8000cea:	f7ff fa2f 	bl	800014c <initButton>
  initTimer(1000);
 8000cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cf2:	f000 f9e9 	bl	80010c8 <initTimer>
  while (1)
  {
	  runAutoDebug();
 8000cf6:	f7ff ffcf 	bl	8000c98 <runAutoDebug>
	  fsm_function();
 8000cfa:	f7ff fb51 	bl	80003a0 <fsm_function>
	  fsm_pedestrian();
 8000cfe:	f7ff fe03 	bl	8000908 <fsm_pedestrian>
  {
 8000d02:	e7f8      	b.n	8000cf6 <main+0x32>
 8000d04:	20000074 	.word	0x20000074
 8000d08:	200000bc 	.word	0x200000bc

08000d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	; 0x40
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	2228      	movs	r2, #40	; 0x28
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 f9ae 	bl	800307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d32:	2301      	movs	r3, #1
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d36:	2310      	movs	r3, #16
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 fe30 	bl	80019a8 <HAL_RCC_OscConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d4e:	f000 f96d 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d52:	230f      	movs	r3, #15
 8000d54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f89d 	bl	8001eac <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000d78:	f000 f958 	bl	800102c <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3740      	adds	r7, #64	; 0x40
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000daa:	f240 321f 	movw	r2, #799	; 0x31f
 8000dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db8:	2209      	movs	r2, #9
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dca:	f001 f9d5 	bl	8002178 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f92a 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000de6:	f001 fd29 	bl	800283c <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f91c 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000e02:	f002 f8a7 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f90e 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000074 	.word	0x20000074

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08e      	sub	sp, #56	; 0x38
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e4e:	4a2d      	ldr	r2, [pc, #180]	; (8000f04 <MX_TIM3_Init+0xe8>)
 8000e50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e74:	f001 f980 	bl	8002178 <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e7e:	f000 f8d5 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000e90:	f001 fcd4 	bl	800283c <HAL_TIM_ConfigClockSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e9a:	f000 f8c7 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ea0:	f001 fa0c 	bl	80022bc <HAL_TIM_PWM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eaa:	f000 f8bf 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ebe:	f002 f849 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000ec8:	f000 f8b0 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ee4:	f001 fbec 	bl	80026c0 <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eee:	f000 f89d 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef2:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM3_Init+0xe4>)
 8000ef4:	f000 f970 	bl	80011d8 <HAL_TIM_MspPostInit>

}
 8000ef8:	bf00      	nop
 8000efa:	3738      	adds	r7, #56	; 0x38
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000bc 	.word	0x200000bc
 8000f04:	40000400 	.word	0x40000400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	; (800101c <MX_GPIO_Init+0x114>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a3e      	ldr	r2, [pc, #248]	; (800101c <MX_GPIO_Init+0x114>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b3c      	ldr	r3, [pc, #240]	; (800101c <MX_GPIO_Init+0x114>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <MX_GPIO_Init+0x114>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a38      	ldr	r2, [pc, #224]	; (800101c <MX_GPIO_Init+0x114>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_GPIO_Init+0x114>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4c:	4b33      	ldr	r3, [pc, #204]	; (800101c <MX_GPIO_Init+0x114>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a32      	ldr	r2, [pc, #200]	; (800101c <MX_GPIO_Init+0x114>)
 8000f52:	f043 0310 	orr.w	r3, r3, #16
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_GPIO_Init+0x114>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000f6a:	482d      	ldr	r0, [pc, #180]	; (8001020 <MX_GPIO_Init+0x118>)
 8000f6c:	f000 fceb 	bl	8001946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f76:	482b      	ldr	r0, [pc, #172]	; (8001024 <MX_GPIO_Init+0x11c>)
 8000f78:	f000 fce5 	bl	8001946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <MX_GPIO_Init+0x120>)
 8000f84:	f000 fcdf 	bl	8001946 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000f88:	2313      	movs	r3, #19
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4821      	ldr	r0, [pc, #132]	; (8001020 <MX_GPIO_Init+0x118>)
 8000f9c:	f000 fb38 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED1_Pin PEDLED_BIT2_Pin TRAFFIC1_BIT1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin;
 8000fa0:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <MX_GPIO_Init+0x118>)
 8000fba:	f000 fb29 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_GPIO_Init+0x11c>)
 8000fd2:	f000 fb1d 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDLED_BIT1_Pin TRAFFIC1_BIT2_Pin TRAFFIC2_BIT2_Pin TRAFFIC2_BIT1_Pin */
  GPIO_InitStruct.Pin = PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin;
 8000fd6:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_GPIO_Init+0x11c>)
 8000ff0:	f000 fb0e 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED2_Pin;
 8000ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED2_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_GPIO_Init+0x120>)
 800100e:	f000 faff 	bl	8001610 <HAL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 8001042:	4907      	ldr	r1, [pc, #28]	; (8001060 <setTimer+0x28>)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <setTimer+0x2c>)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2100      	movs	r1, #0
 8001052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	20000104 	.word	0x20000104
 8001064:	20000118 	.word	0x20000118

08001068 <timerRun>:

void timerRun(){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e01c      	b.n	80010ae <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <timerRun+0x58>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	2b00      	cmp	r3, #0
 800107e:	dd13      	ble.n	80010a8 <timerRun+0x40>
			timer_counter[i]--;
 8001080:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <timerRun+0x58>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	1e5a      	subs	r2, r3, #1
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <timerRun+0x58>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <timerRun+0x58>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	2b00      	cmp	r3, #0
 800109c:	dc04      	bgt.n	80010a8 <timerRun+0x40>
				timer_flag[i] = 1;
 800109e:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <timerRun+0x5c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2101      	movs	r1, #1
 80010a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	dddf      	ble.n	8001074 <timerRun+0xc>
			}
		}
	}
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000104 	.word	0x20000104
 80010c4:	20000118 	.word	0x20000118

080010c8 <initTimer>:

void initTimer(int delay){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<NO_OF_TIMER; i++){
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	e006      	b.n	80010e4 <initTimer+0x1c>
		setTimer(delay, i);
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffad 	bl	8001038 <setTimer>
	for(int i = 0; i<NO_OF_TIMER; i++){
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	ddf5      	ble.n	80010d6 <initTimer+0xe>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_MspInit+0x5c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_MspInit+0x5c>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <HAL_MspInit+0x5c>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_MspInit+0x5c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_MspInit+0x60>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_MspInit+0x60>)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001168:	d114      	bne.n	8001194 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	201c      	movs	r0, #28
 8001188:	f000 fa0b 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800118c:	201c      	movs	r0, #28
 800118e:	f000 fa24 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001192:	e018      	b.n	80011c6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_TIM_Base_MspInit+0x7c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d113      	bne.n	80011c6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_TIM_Base_MspInit+0x78>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	201d      	movs	r0, #29
 80011bc:	f000 f9f1 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011c0:	201d      	movs	r0, #29
 80011c2:	f000 fa0a 	bl	80015da <HAL_NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40000400 	.word	0x40000400

080011d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_TIM_MspPostInit+0x58>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d117      	bne.n	8001228 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_TIM_MspPostInit+0x5c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_TIM_MspPostInit+0x5c>)
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_TIM_MspPostInit+0x5c>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2302      	movs	r3, #2
 800121a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_TIM_MspPostInit+0x60>)
 8001224:	f000 f9f4 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40000400 	.word	0x40000400
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f89b 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM2_IRQHandler+0x10>)
 8001292:	f001 f90d 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000074 	.word	0x20000074

080012a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM3_IRQHandler+0x10>)
 80012a6:	f001 f903 	bl	80024b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000bc 	.word	0x200000bc

080012b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_TIM_PeriodElapsedCallback>:
 */

# include "global.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d103      	bne.n	80012da <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 80012d2:	f7fe ff7f 	bl	80001d4 <button_reading>
		timerRun();
 80012d6:	f7ff fec7 	bl	8001068 <timerRun>
	}

}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800130a:	f7ff ffd3 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fe91 	bl	8003034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fcd7 	bl	8000cc4 <main>
  bx lr
 8001316:	4770      	bx	lr
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001320:	080030cc 	.word	0x080030cc
  ldr r2, =_sbss
 8001324:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001328:	20000130 	.word	0x20000130

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f923 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fed2 	bl	80010f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f93b 	bl	80015f6 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f903 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000018 	.word	0x20000018
 80013b8:	20000014 	.word	0x20000014

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000018 	.word	0x20000018
 80013dc:	2000012c 	.word	0x2000012c

080013e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	2000012c 	.word	0x2000012c

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	e169      	b.n	80018f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001624:	2201      	movs	r2, #1
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 8158 	bne.w	80018f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a9a      	ldr	r2, [pc, #616]	; (80018b0 <HAL_GPIO_Init+0x2a0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d05e      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800164c:	4a98      	ldr	r2, [pc, #608]	; (80018b0 <HAL_GPIO_Init+0x2a0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d875      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001652:	4a98      	ldr	r2, [pc, #608]	; (80018b4 <HAL_GPIO_Init+0x2a4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d058      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001658:	4a96      	ldr	r2, [pc, #600]	; (80018b4 <HAL_GPIO_Init+0x2a4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d86f      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800165e:	4a96      	ldr	r2, [pc, #600]	; (80018b8 <HAL_GPIO_Init+0x2a8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d052      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001664:	4a94      	ldr	r2, [pc, #592]	; (80018b8 <HAL_GPIO_Init+0x2a8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d869      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800166a:	4a94      	ldr	r2, [pc, #592]	; (80018bc <HAL_GPIO_Init+0x2ac>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d04c      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 8001670:	4a92      	ldr	r2, [pc, #584]	; (80018bc <HAL_GPIO_Init+0x2ac>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d863      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001676:	4a92      	ldr	r2, [pc, #584]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d046      	beq.n	800170a <HAL_GPIO_Init+0xfa>
 800167c:	4a90      	ldr	r2, [pc, #576]	; (80018c0 <HAL_GPIO_Init+0x2b0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d85d      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d82a      	bhi.n	80016dc <HAL_GPIO_Init+0xcc>
 8001686:	2b12      	cmp	r3, #18
 8001688:	d859      	bhi.n	800173e <HAL_GPIO_Init+0x12e>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_GPIO_Init+0x80>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800170b 	.word	0x0800170b
 8001694:	080016e5 	.word	0x080016e5
 8001698:	080016f7 	.word	0x080016f7
 800169c:	08001739 	.word	0x08001739
 80016a0:	0800173f 	.word	0x0800173f
 80016a4:	0800173f 	.word	0x0800173f
 80016a8:	0800173f 	.word	0x0800173f
 80016ac:	0800173f 	.word	0x0800173f
 80016b0:	0800173f 	.word	0x0800173f
 80016b4:	0800173f 	.word	0x0800173f
 80016b8:	0800173f 	.word	0x0800173f
 80016bc:	0800173f 	.word	0x0800173f
 80016c0:	0800173f 	.word	0x0800173f
 80016c4:	0800173f 	.word	0x0800173f
 80016c8:	0800173f 	.word	0x0800173f
 80016cc:	0800173f 	.word	0x0800173f
 80016d0:	0800173f 	.word	0x0800173f
 80016d4:	080016ed 	.word	0x080016ed
 80016d8:	08001701 	.word	0x08001701
 80016dc:	4a79      	ldr	r2, [pc, #484]	; (80018c4 <HAL_GPIO_Init+0x2b4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016e2:	e02c      	b.n	800173e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	623b      	str	r3, [r7, #32]
          break;
 80016ea:	e029      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e024      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	3308      	adds	r3, #8
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e01f      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	330c      	adds	r3, #12
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e01a      	b.n	8001740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001712:	2304      	movs	r3, #4
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e013      	b.n	8001740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001720:	2308      	movs	r3, #8
 8001722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	611a      	str	r2, [r3, #16]
          break;
 800172a:	e009      	b.n	8001740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800172c:	2308      	movs	r3, #8
 800172e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	615a      	str	r2, [r3, #20]
          break;
 8001736:	e003      	b.n	8001740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
          break;
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x130>
          break;
 800173e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d801      	bhi.n	800174a <HAL_GPIO_Init+0x13a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	e001      	b.n	800174e <HAL_GPIO_Init+0x13e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d802      	bhi.n	800175c <HAL_GPIO_Init+0x14c>
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	e002      	b.n	8001762 <HAL_GPIO_Init+0x152>
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3b08      	subs	r3, #8
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	210f      	movs	r1, #15
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	6a39      	ldr	r1, [r7, #32]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	431a      	orrs	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80b1 	beq.w	80018f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_GPIO_Init+0x2b8>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a8:	4a48      	ldr	r2, [pc, #288]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <HAL_GPIO_Init+0x2c0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d013      	beq.n	80017fc <HAL_GPIO_Init+0x1ec>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3f      	ldr	r2, [pc, #252]	; (80018d4 <HAL_GPIO_Init+0x2c4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00d      	beq.n	80017f8 <HAL_GPIO_Init+0x1e8>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3e      	ldr	r2, [pc, #248]	; (80018d8 <HAL_GPIO_Init+0x2c8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d007      	beq.n	80017f4 <HAL_GPIO_Init+0x1e4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3d      	ldr	r2, [pc, #244]	; (80018dc <HAL_GPIO_Init+0x2cc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_GPIO_Init+0x1e0>
 80017ec:	2303      	movs	r3, #3
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e004      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e002      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_GPIO_Init+0x1ee>
 80017fc:	2300      	movs	r3, #0
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	f002 0203 	and.w	r2, r2, #3
 8001804:	0092      	lsls	r2, r2, #2
 8001806:	4093      	lsls	r3, r2
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180e:	492f      	ldr	r1, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x2bc>)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	492c      	ldr	r1, [pc, #176]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	43db      	mvns	r3, r3
 800183e:	4928      	ldr	r1, [pc, #160]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001840:	4013      	ands	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4922      	ldr	r1, [pc, #136]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	491e      	ldr	r1, [pc, #120]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	4918      	ldr	r1, [pc, #96]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	4914      	ldr	r1, [pc, #80]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d021      	beq.n	80018e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e021      	b.n	80018f2 <HAL_GPIO_Init+0x2e2>
 80018ae:	bf00      	nop
 80018b0:	10320000 	.word	0x10320000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10220000 	.word	0x10220000
 80018bc:	10210000 	.word	0x10210000
 80018c0:	10120000 	.word	0x10120000
 80018c4:	10110000 	.word	0x10110000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	40011000 	.word	0x40011000
 80018dc:	40011400 	.word	0x40011400
 80018e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4909      	ldr	r1, [pc, #36]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3301      	adds	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f ae8e 	bne.w	8001624 <HAL_GPIO_Init+0x14>
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	372c      	adds	r7, #44	; 0x2c
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001956:	787b      	ldrb	r3, [r7, #1]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195c:	887a      	ldrh	r2, [r7, #2]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001962:	e003      	b.n	800196c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	611a      	str	r2, [r3, #16]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	041a      	lsls	r2, r3, #16
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43d9      	mvns	r1, r3
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	400b      	ands	r3, r1
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e272      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d00c      	beq.n	80019ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d4:	4b8f      	ldr	r3, [pc, #572]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d112      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
 80019e0:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ec:	d10b      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ee:	4b89      	ldr	r3, [pc, #548]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d168      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e24c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d106      	bne.n	8001a1e <HAL_RCC_OscConfig+0x76>
 8001a10:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7f      	ldr	r2, [pc, #508]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e02e      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b7b      	ldr	r3, [pc, #492]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7a      	ldr	r2, [pc, #488]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b78      	ldr	r3, [pc, #480]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbc>
 8001a4a:	4b72      	ldr	r3, [pc, #456]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd4>
 8001a64:	4b6b      	ldr	r3, [pc, #428]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6a      	ldr	r2, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a67      	ldr	r2, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fcac 	bl	80013e0 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fca8 	bl	80013e0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e200      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe4>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc98 	bl	80013e0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc94 	bl	80013e0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1ec      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x10c>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4939      	ldr	r1, [pc, #228]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff fc4d 	bl	80013e0 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff fc49 	bl	80013e0 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4927      	ldr	r1, [pc, #156]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x270>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc2c 	bl	80013e0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc28 	bl	80013e0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e180      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d03a      	beq.n	8001c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fc0c 	bl	80013e0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fc08 	bl	80013e0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e160      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 faa6 	bl	800213c <RCC_Delay>
 8001bf0:	e01c      	b.n	8001c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_RCC_OscConfig+0x274>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fbf2 	bl	80013e0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fbee 	bl	80013e0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d908      	bls.n	8001c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e146      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	42420000 	.word	0x42420000
 8001c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1e9      	bne.n	8001c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80a6 	beq.w	8001d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c62:	2301      	movs	r3, #1
 8001c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7e      	ldr	r2, [pc, #504]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fbaf 	bl	80013e0 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff fbab 	bl	80013e0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e103      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	4b75      	ldr	r3, [pc, #468]	; (8001e70 <HAL_RCC_OscConfig+0x4c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x312>
 8001cac:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a6e      	ldr	r2, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e02d      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e01c      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x356>
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a60      	ldr	r2, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e00b      	b.n	8001d16 <HAL_RCC_OscConfig+0x36e>
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fb5f 	bl	80013e0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	e00a      	b.n	8001d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7ff fb5b 	bl	80013e0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0b1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ee      	beq.n	8001d26 <HAL_RCC_OscConfig+0x37e>
 8001d48:	e014      	b.n	8001d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fb49 	bl	80013e0 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff fb45 	bl	80013e0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e09b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ee      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a3b      	ldr	r2, [pc, #236]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8087 	beq.w	8001e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d061      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d146      	bne.n	8001e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb19 	bl	80013e0 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fb15 	bl	80013e0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e06d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d108      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	4921      	ldr	r1, [pc, #132]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a19      	ldr	r1, [r3, #32]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fae9 	bl	80013e0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fae5 	bl	80013e0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46a>
 8001e30:	e035      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x4cc>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fad2 	bl	80013e0 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff face 	bl	80013e0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e026      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x498>
 8001e5e:	e01e      	b.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e019      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x500>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0d0      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b67      	ldr	r3, [pc, #412]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4965      	ldr	r1, [pc, #404]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b63      	ldr	r3, [pc, #396]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0b8      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a58      	ldr	r2, [pc, #352]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a52      	ldr	r2, [pc, #328]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d040      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d115      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07f      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e073      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4936      	ldr	r1, [pc, #216]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7ff fa20 	bl	80013e0 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7ff fa1c 	bl	80013e0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e053      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d210      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4922      	ldr	r1, [pc, #136]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e032      	b.n	8002062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4916      	ldr	r1, [pc, #88]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	490e      	ldr	r1, [pc, #56]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203a:	f000 f821 	bl	8002080 <HAL_RCC_GetSysClockFreq>
 800203e:	4602      	mov	r2, r0
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	490a      	ldr	r1, [pc, #40]	; (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 800204c:	5ccb      	ldrb	r3, [r1, r3]
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1cc>)
 8002054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1d0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f97e 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	080030b4 	.word	0x080030b4
 8002078:	20000010 	.word	0x20000010
 800207c:	20000014 	.word	0x20000014

08002080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002080:	b490      	push	{r4, r7}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002086:	4b29      	ldr	r3, [pc, #164]	; (800212c <HAL_RCC_GetSysClockFreq+0xac>)
 8002088:	1d3c      	adds	r4, r7, #4
 800208a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002090:	f240 2301 	movw	r3, #513	; 0x201
 8002094:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d002      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	e02b      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020c2:	623b      	str	r3, [r7, #32]
      break;
 80020c4:	e02b      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	0c9b      	lsrs	r3, r3, #18
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3328      	adds	r3, #40	; 0x28
 80020d0:	443b      	add	r3, r7
 80020d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0c5b      	lsrs	r3, r3, #17
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	3328      	adds	r3, #40	; 0x28
 80020ee:	443b      	add	r3, r7
 80020f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020fa:	fb03 f202 	mul.w	r2, r3, r2
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
 8002106:	e004      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	623b      	str	r3, [r7, #32]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	6a3b      	ldr	r3, [r7, #32]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	080030a4 	.word	0x080030a4
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	003d0900 	.word	0x003d0900

0800213c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <RCC_Delay+0x34>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <RCC_Delay+0x38>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a5b      	lsrs	r3, r3, #9
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	fb02 f303 	mul.w	r3, r2, r3
 8002156:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002158:	bf00      	nop
  }
  while (Delay --);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e5a      	subs	r2, r3, #1
 800215e:	60fa      	str	r2, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <RCC_Delay+0x1c>
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000010 	.word	0x20000010
 8002174:	10624dd3 	.word	0x10624dd3

08002178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e041      	b.n	800220e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe ffda 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 fc28 	bl	8002a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e03a      	b.n	80022a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <HAL_TIM_Base_Start_IT+0x98>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00e      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x58>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	d009      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x58>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x58>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d111      	bne.n	8002294 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b06      	cmp	r3, #6
 8002280:	d010      	beq.n	80022a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002292:	e007      	b.n	80022a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40012c00 	.word	0x40012c00
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40000800 	.word	0x40000800

080022bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e041      	b.n	8002352 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f839 	bl	800235a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 fb86 	bl	8002a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_TIM_PWM_Start+0x24>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e022      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d109      	bne.n	80023aa <HAL_TIM_PWM_Start+0x3e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	e015      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d109      	bne.n	80023c4 <HAL_TIM_PWM_Start+0x58>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e008      	b.n	80023d6 <HAL_TIM_PWM_Start+0x6a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e05e      	b.n	800249c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_TIM_PWM_Start+0x82>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ec:	e013      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_PWM_Start+0x92>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fc:	e00b      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0xa2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240c:	e003      	b.n	8002416 <HAL_TIM_PWM_Start+0xaa>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fd74 	bl	8002f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <HAL_TIM_PWM_Start+0x138>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d107      	bne.n	800243e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_TIM_PWM_Start+0x138>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d00e      	beq.n	8002466 <HAL_TIM_PWM_Start+0xfa>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d009      	beq.n	8002466 <HAL_TIM_PWM_Start+0xfa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_TIM_PWM_Start+0x13c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_TIM_PWM_Start+0xfa>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_PWM_Start+0x140>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d111      	bne.n	800248a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b06      	cmp	r3, #6
 8002476:	d010      	beq.n	800249a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	e007      	b.n	800249a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000800 	.word	0x40000800

080024b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa6f 	bl	80029d6 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa62 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fa71 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b04      	cmp	r3, #4
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0204 	mvn.w	r2, #4
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa45 	bl	80029d6 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa38 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fa47 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b08      	cmp	r3, #8
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b08      	cmp	r3, #8
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0208 	mvn.w	r2, #8
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2204      	movs	r2, #4
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa1b 	bl	80029d6 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa0e 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fa1d 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0210 	mvn.w	r2, #16
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2208      	movs	r2, #8
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9f1 	bl	80029d6 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f9e4 	bl	80029c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f9f3 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0201 	mvn.w	r2, #1
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fe46 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fce1 	bl	8003022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f9b7 	bl	80029fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b20      	cmp	r3, #32
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0220 	mvn.w	r2, #32
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fcac 	bl	8003010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0ac      	b.n	8002834 <HAL_TIM_PWM_ConfigChannel+0x174>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	f200 809f 	bhi.w	8002828 <HAL_TIM_PWM_ConfigChannel+0x168>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002725 	.word	0x08002725
 80026f4:	08002829 	.word	0x08002829
 80026f8:	08002829 	.word	0x08002829
 80026fc:	08002829 	.word	0x08002829
 8002700:	08002765 	.word	0x08002765
 8002704:	08002829 	.word	0x08002829
 8002708:	08002829 	.word	0x08002829
 800270c:	08002829 	.word	0x08002829
 8002710:	080027a7 	.word	0x080027a7
 8002714:	08002829 	.word	0x08002829
 8002718:	08002829 	.word	0x08002829
 800271c:	08002829 	.word	0x08002829
 8002720:	080027e7 	.word	0x080027e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f9d0 	bl	8002ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0204 	bic.w	r2, r2, #4
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	619a      	str	r2, [r3, #24]
      break;
 8002762:	e062      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fa16 	bl	8002b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      break;
 80027a4:	e041      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa5f 	bl	8002c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0208 	orr.w	r2, r2, #8
 80027c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	61da      	str	r2, [r3, #28]
      break;
 80027e4:	e021      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 faa9 	bl	8002d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	021a      	lsls	r2, r3, #8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	61da      	str	r2, [r3, #28]
      break;
 8002826:	e000      	b.n	800282a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIM_ConfigClockSource+0x18>
 8002850:	2302      	movs	r3, #2
 8002852:	e0b3      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x180>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288c:	d03e      	beq.n	800290c <HAL_TIM_ConfigClockSource+0xd0>
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	f200 8087 	bhi.w	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 8002896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289a:	f000 8085 	beq.w	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a2:	d87f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	d01a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xa2>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d87b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	d050      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x116>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d877      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028b4:	2b50      	cmp	r3, #80	; 0x50
 80028b6:	d03c      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0xf6>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d873      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d058      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x136>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d86f      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028c4:	2b30      	cmp	r3, #48	; 0x30
 80028c6:	d064      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x156>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d86b      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d060      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x156>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d867      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d05c      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x156>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d05a      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028dc:	e062      	b.n	80029a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f000 faee 	bl	8002ece <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002900:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	609a      	str	r2, [r3, #8]
      break;
 800290a:	e04e      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f000 fad7 	bl	8002ece <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800292e:	609a      	str	r2, [r3, #8]
      break;
 8002930:	e03b      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 fa4e 	bl	8002de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2150      	movs	r1, #80	; 0x50
 800294a:	4618      	mov	r0, r3
 800294c:	f000 faa5 	bl	8002e9a <TIM_ITRx_SetConfig>
      break;
 8002950:	e02b      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 fa6c 	bl	8002e3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2160      	movs	r1, #96	; 0x60
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa95 	bl	8002e9a <TIM_ITRx_SetConfig>
      break;
 8002970:	e01b      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	461a      	mov	r2, r3
 8002980:	f000 fa2e 	bl	8002de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fa85 	bl	8002e9a <TIM_ITRx_SetConfig>
      break;
 8002990:	e00b      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f000 fa7c 	bl	8002e9a <TIM_ITRx_SetConfig>
        break;
 80029a2:	e002      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029a4:	bf00      	nop
 80029a6:	e000      	b.n	80029aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a29      	ldr	r2, [pc, #164]	; (8002ac4 <TIM_Base_SetConfig+0xb8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00b      	beq.n	8002a3c <TIM_Base_SetConfig+0x30>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2a:	d007      	beq.n	8002a3c <TIM_Base_SetConfig+0x30>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <TIM_Base_SetConfig+0xbc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d003      	beq.n	8002a3c <TIM_Base_SetConfig+0x30>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a25      	ldr	r2, [pc, #148]	; (8002acc <TIM_Base_SetConfig+0xc0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d108      	bne.n	8002a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <TIM_Base_SetConfig+0xb8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0x62>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <TIM_Base_SetConfig+0xbc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0x62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a18      	ldr	r2, [pc, #96]	; (8002acc <TIM_Base_SetConfig+0xc0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <TIM_Base_SetConfig+0xb8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400
 8002acc:	40000800 	.word	0x40000800

08002ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f023 0302 	bic.w	r3, r3, #2
 8002b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <TIM_OC1_SetConfig+0xc8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10c      	bne.n	8002b46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0308 	bic.w	r3, r3, #8
 8002b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <TIM_OC1_SetConfig+0xc8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d111      	bne.n	8002b72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	621a      	str	r2, [r3, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00

08002b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0210 	bic.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0320 	bic.w	r3, r3, #32
 8002be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <TIM_OC2_SetConfig+0xd0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10d      	bne.n	8002c18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <TIM_OC2_SetConfig+0xd0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d113      	bne.n	8002c48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40012c00 	.word	0x40012c00

08002c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0303 	bic.w	r3, r3, #3
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <TIM_OC3_SetConfig+0xd0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10d      	bne.n	8002cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <TIM_OC3_SetConfig+0xd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d113      	bne.n	8002d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	621a      	str	r2, [r3, #32]
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40012c00 	.word	0x40012c00

08002d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	031b      	lsls	r3, r3, #12
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <TIM_OC4_SetConfig+0x98>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d109      	bne.n	8002db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00

08002de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 030a 	bic.w	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 0210 	bic.w	r2, r3, #16
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	031b      	lsls	r3, r3, #12
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	621a      	str	r2, [r3, #32]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f043 0307 	orr.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b087      	sub	sp, #28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	609a      	str	r2, [r3, #8]
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2201      	movs	r2, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	401a      	ands	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e046      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d009      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800

08003010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <__libc_init_array>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	2600      	movs	r6, #0
 8003038:	4d0c      	ldr	r5, [pc, #48]	; (800306c <__libc_init_array+0x38>)
 800303a:	4c0d      	ldr	r4, [pc, #52]	; (8003070 <__libc_init_array+0x3c>)
 800303c:	1b64      	subs	r4, r4, r5
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	42a6      	cmp	r6, r4
 8003042:	d109      	bne.n	8003058 <__libc_init_array+0x24>
 8003044:	f000 f822 	bl	800308c <_init>
 8003048:	2600      	movs	r6, #0
 800304a:	4d0a      	ldr	r5, [pc, #40]	; (8003074 <__libc_init_array+0x40>)
 800304c:	4c0a      	ldr	r4, [pc, #40]	; (8003078 <__libc_init_array+0x44>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	42a6      	cmp	r6, r4
 8003054:	d105      	bne.n	8003062 <__libc_init_array+0x2e>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	f855 3b04 	ldr.w	r3, [r5], #4
 800305c:	4798      	blx	r3
 800305e:	3601      	adds	r6, #1
 8003060:	e7ee      	b.n	8003040 <__libc_init_array+0xc>
 8003062:	f855 3b04 	ldr.w	r3, [r5], #4
 8003066:	4798      	blx	r3
 8003068:	3601      	adds	r6, #1
 800306a:	e7f2      	b.n	8003052 <__libc_init_array+0x1e>
 800306c:	080030c4 	.word	0x080030c4
 8003070:	080030c4 	.word	0x080030c4
 8003074:	080030c4 	.word	0x080030c4
 8003078:	080030c8 	.word	0x080030c8

0800307c <memset>:
 800307c:	4603      	mov	r3, r0
 800307e:	4402      	add	r2, r0
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <memset+0xa>
 8003084:	4770      	bx	lr
 8003086:	f803 1b01 	strb.w	r1, [r3], #1
 800308a:	e7f9      	b.n	8003080 <memset+0x4>

0800308c <_init>:
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308e:	bf00      	nop
 8003090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003092:	bc08      	pop	{r3}
 8003094:	469e      	mov	lr, r3
 8003096:	4770      	bx	lr

08003098 <_fini>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	bf00      	nop
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr
