
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000472c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004838  08004838  00014838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000084  0800492c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800492c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c524  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002237  00000000  00000000  0002c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  0002f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019678  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038e  00000000  00000000  000497e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aebb  00000000  00000000  00059b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4a31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  000e4a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004820 	.word	0x08004820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004820 	.word	0x08004820

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
 */

# include "global.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d103      	bne.n	8000176 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 800016e:	f000 f87f 	bl	8000270 <button_reading>
		timerRun();
 8000172:	f001 f829 	bl	80011c8 <timerRun>
	}
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <HAL_UART_RxCpltCallback>:
#define MAX_UART_BUFFER_SIZE 30
uint8_t UART_VALUE = 0;
uint8_t uart_buffer[MAX_UART_BUFFER_SIZE];
uint8_t uart_index_buffer = 0;
uint8_t uart_buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a10      	ldr	r2, [pc, #64]	; (80001d0 <HAL_UART_RxCpltCallback+0x50>)
 800018e:	4293      	cmp	r3, r2
 8000190:	d119      	bne.n	80001c6 <HAL_UART_RxCpltCallback+0x46>
//    	HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
        uart_buffer[uart_index_buffer++] = UART_VALUE;
 8000192:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	b2d1      	uxtb	r1, r2
 800019a:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 800019c:	7011      	strb	r1, [r2, #0]
 800019e:	461a      	mov	r2, r3
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <HAL_UART_RxCpltCallback+0x58>)
 80001a2:	7819      	ldrb	r1, [r3, #0]
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <HAL_UART_RxCpltCallback+0x5c>)
 80001a6:	5499      	strb	r1, [r3, r2]
        if (uart_index_buffer == MAX_UART_BUFFER_SIZE) {
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b1e      	cmp	r3, #30
 80001ae:	d102      	bne.n	80001b6 <HAL_UART_RxCpltCallback+0x36>
            uart_index_buffer = 0;
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
        }
        uart_buffer_flag = 1;
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <HAL_UART_RxCpltCallback+0x60>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	4906      	ldr	r1, [pc, #24]	; (80001d8 <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	4808      	ldr	r0, [pc, #32]	; (80001e4 <HAL_UART_RxCpltCallback+0x64>)
 80001c2:	f003 fa28 	bl	8003616 <HAL_UART_Receive_IT>
    }
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40004400 	.word	0x40004400
 80001d4:	200000c2 	.word	0x200000c2
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	200000c3 	.word	0x200000c3
 80001e4:	200001b0 	.word	0x200001b0

080001e8 <initButton>:
static uint8_t flagForButtonPress[N0_OF_BUTTONS];
static uint8_t flagForButtonLongPress[N0_OF_BUTTONS];
// we define counter for automatically decreasing.
static uint16_t counterForButtonLongPress[N0_OF_BUTTONS];

void initButton(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e026      	b.n	8000242 <initButton+0x5a>
        buttonBuffer0[i] = BUTTON_IS_RELEASED;
 80001f4:	4a17      	ldr	r2, [pc, #92]	; (8000254 <initButton+0x6c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = BUTTON_IS_RELEASED;
 80001fe:	4a16      	ldr	r2, [pc, #88]	; (8000258 <initButton+0x70>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	2201      	movs	r2, #1
 8000206:	701a      	strb	r2, [r3, #0]
        buttonBuffer2[i] = BUTTON_IS_RELEASED;
 8000208:	4a14      	ldr	r2, [pc, #80]	; (800025c <initButton+0x74>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
        buttonBuffer3[i] = BUTTON_IS_RELEASED;
 8000212:	4a13      	ldr	r2, [pc, #76]	; (8000260 <initButton+0x78>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]

        flagForButtonLongPress[i] = 0;
 800021c:	4a11      	ldr	r2, [pc, #68]	; (8000264 <initButton+0x7c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4413      	add	r3, r2
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <initButton+0x80>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
        counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <initButton+0x84>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000238:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	ddd5      	ble.n	80001f4 <initButton+0xc>
    }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	200000c4 	.word	0x200000c4
 8000258:	200000c8 	.word	0x200000c8
 800025c:	200000cc 	.word	0x200000cc
 8000260:	200000d0 	.word	0x200000d0
 8000264:	200000d8 	.word	0x200000d8
 8000268:	200000d4 	.word	0x200000d4
 800026c:	200000dc 	.word	0x200000dc

08000270 <button_reading>:

void button_reading(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e0a6      	b.n	80003ca <button_reading+0x15a>
        buttonBuffer2[i] = buttonBuffer1[i];
 800027c:	4a57      	ldr	r2, [pc, #348]	; (80003dc <button_reading+0x16c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	7819      	ldrb	r1, [r3, #0]
 8000284:	4a56      	ldr	r2, [pc, #344]	; (80003e0 <button_reading+0x170>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	460a      	mov	r2, r1
 800028c:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = buttonBuffer0[i];
 800028e:	4a55      	ldr	r2, [pc, #340]	; (80003e4 <button_reading+0x174>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	7819      	ldrb	r1, [r3, #0]
 8000296:	4a51      	ldr	r2, [pc, #324]	; (80003dc <button_reading+0x16c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	460a      	mov	r2, r1
 800029e:	701a      	strb	r2, [r3, #0]
        switch (i) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d83a      	bhi.n	800031c <button_reading+0xac>
 80002a6:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <button_reading+0x3c>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	080002d5 	.word	0x080002d5
 80002b4:	080002ed 	.word	0x080002ed
 80002b8:	08000305 	.word	0x08000305
            case 0:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80002bc:	2101      	movs	r1, #1
 80002be:	484a      	ldr	r0, [pc, #296]	; (80003e8 <button_reading+0x178>)
 80002c0:	f001 fd0a 	bl	8001cd8 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4619      	mov	r1, r3
 80002c8:	4a46      	ldr	r2, [pc, #280]	; (80003e4 <button_reading+0x174>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	460a      	mov	r2, r1
 80002d0:	701a      	strb	r2, [r3, #0]
                break;
 80002d2:	e023      	b.n	800031c <button_reading+0xac>
            case 1:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	4844      	ldr	r0, [pc, #272]	; (80003e8 <button_reading+0x178>)
 80002d8:	f001 fcfe 	bl	8001cd8 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	4619      	mov	r1, r3
 80002e0:	4a40      	ldr	r2, [pc, #256]	; (80003e4 <button_reading+0x174>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4413      	add	r3, r2
 80002e6:	460a      	mov	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
                break;
 80002ea:	e017      	b.n	800031c <button_reading+0xac>
            case 2:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80002ec:	2110      	movs	r1, #16
 80002ee:	483e      	ldr	r0, [pc, #248]	; (80003e8 <button_reading+0x178>)
 80002f0:	f001 fcf2 	bl	8001cd8 <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	4619      	mov	r1, r3
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <button_reading+0x174>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	460a      	mov	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
                break;
 8000302:	e00b      	b.n	800031c <button_reading+0xac>
            case 3:
				buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000304:	2101      	movs	r1, #1
 8000306:	4839      	ldr	r0, [pc, #228]	; (80003ec <button_reading+0x17c>)
 8000308:	f001 fce6 	bl	8001cd8 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	4619      	mov	r1, r3
 8000310:	4a34      	ldr	r2, [pc, #208]	; (80003e4 <button_reading+0x174>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	460a      	mov	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]
				break;
 800031a:	bf00      	nop
        }
        if ((buttonBuffer1[i] == buttonBuffer0[i]) && (buttonBuffer1[i] == buttonBuffer2[i])) {
 800031c:	4a2f      	ldr	r2, [pc, #188]	; (80003dc <button_reading+0x16c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	492f      	ldr	r1, [pc, #188]	; (80003e4 <button_reading+0x174>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	440b      	add	r3, r1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	429a      	cmp	r2, r3
 800032e:	d149      	bne.n	80003c4 <button_reading+0x154>
 8000330:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <button_reading+0x16c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4929      	ldr	r1, [pc, #164]	; (80003e0 <button_reading+0x170>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	440b      	add	r3, r1
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d13f      	bne.n	80003c4 <button_reading+0x154>
            if (buttonBuffer2[i] != buttonBuffer3[i]) {
 8000344:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <button_reading+0x170>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4928      	ldr	r1, [pc, #160]	; (80003f0 <button_reading+0x180>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	440b      	add	r3, r1
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d01a      	beq.n	800038e <button_reading+0x11e>
                buttonBuffer3[i] = buttonBuffer2[i];
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <button_reading+0x170>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	7819      	ldrb	r1, [r3, #0]
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <button_reading+0x180>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	460a      	mov	r2, r1
 8000368:	701a      	strb	r2, [r3, #0]
                if (buttonBuffer3[i] == BUTTON_IS_PRESSED) {
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <button_reading+0x180>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d126      	bne.n	80003c4 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <button_reading+0x184>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800037e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 1;
 8000382:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <button_reading+0x188>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4413      	add	r3, r2
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e01a      	b.n	80003c4 <button_reading+0x154>
                }
            } else {
                counterForButtonLongPress[i]--;
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <button_reading+0x184>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000396:	3b01      	subs	r3, #1
 8000398:	b299      	uxth	r1, r3
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <button_reading+0x184>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (counterForButtonLongPress[i] == 0) {
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <button_reading+0x184>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d10a      	bne.n	80003c4 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 80003ae:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <button_reading+0x184>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80003b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonLongPress[i] = 1;
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <button_reading+0x18c>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	f77f af55 	ble.w	800027c <button_reading+0xc>
                }
            }
        }
    }
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	200000cc 	.word	0x200000cc
 80003e4:	200000c4 	.word	0x200000c4
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	200000d0 	.word	0x200000d0
 80003f4:	200000dc 	.word	0x200000dc
 80003f8:	200000d4 	.word	0x200000d4
 80003fc:	200000d8 	.word	0x200000d8

08000400 <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d901      	bls.n	8000414 <is_button_pressed+0x14>
 8000410:	2300      	movs	r3, #0
 8000412:	e00b      	b.n	800042c <is_button_pressed+0x2c>
    if(flagForButtonPress[index] == 1){
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <is_button_pressed+0x38>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d105      	bne.n	800042a <is_button_pressed+0x2a>
    	flagForButtonPress[index] = 0;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <is_button_pressed+0x38>)
 8000422:	2100      	movs	r1, #0
 8000424:	54d1      	strb	r1, [r2, r3]
    	return 1;
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <is_button_pressed+0x2c>
    }
    return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	200000d4 	.word	0x200000d4

0800043c <resetPedestrianFlag>:
 *      Author: tango
 */

#include "fsm_for_pedestrian.h"

void resetPedestrianFlag(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	BuzzerOff();								// Turn off the buzzer
 8000440:	f000 fc6e 	bl	8000d20 <BuzzerOff>
	timer_flag[TIMER_PEDESTRIAN_PERIOD] = 0;	// Reset the timer flag for pedestrian cycle
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <resetPedestrianFlag+0x20>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
	pedestrianDisplay(OFF);						// Turn off the pedestrian light
 800044a:	2000      	movs	r0, #0
 800044c:	f000 fbdc 	bl	8000c08 <pedestrianDisplay>
	flag_pedestrian = 0;						// Reset the pedestrian flag to prevent pedestrian crossing
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <resetPedestrianFlag+0x24>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000020c 	.word	0x2000020c
 8000460:	200000e4 	.word	0x200000e4

08000464 <fsm_pedestrian>:

void fsm_pedestrian(){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	// If pedestrian flag = 1, begin the pedestrian fsm
	if(flag_pedestrian){
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <fsm_pedestrian+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d026      	beq.n	80004be <fsm_pedestrian+0x5a>
		switch(TRAFFIC_STATUS){
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <fsm_pedestrian+0x70>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3b02      	subs	r3, #2
 8000476:	2b03      	cmp	r3, #3
 8000478:	d81e      	bhi.n	80004b8 <fsm_pedestrian+0x54>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <fsm_pedestrian+0x1c>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	08000491 	.word	0x08000491
 8000484:	08000499 	.word	0x08000499
 8000488:	080004a5 	.word	0x080004a5
 800048c:	080004b1 	.word	0x080004b1
			case RED1_GREEN2:
				pedestrianDisplay(GREEN);			// Display green light for pedestrians
 8000490:	2003      	movs	r0, #3
 8000492:	f000 fbb9 	bl	8000c08 <pedestrianDisplay>
				break;
 8000496:	e013      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case RED1_YELLOW2:
				/* Remaining time for pedestrians to cross the road is running out
				 *Turn on the buzzer for alert
				 */
				pedestrianDisplay(GREEN);
 8000498:	2003      	movs	r0, #3
 800049a:	f000 fbb5 	bl	8000c08 <pedestrianDisplay>
				BuzzerOn();
 800049e:	f000 fc05 	bl	8000cac <BuzzerOn>
				break;
 80004a2:	e00d      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case GREEN1_RED2:
				pedestrianDisplay(RED);				// Display red light for pedestrians
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fbaf 	bl	8000c08 <pedestrianDisplay>
				BuzzerOff();						// Turn off the buzzer
 80004aa:	f000 fc39 	bl	8000d20 <BuzzerOff>
				break;
 80004ae:	e007      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case YELLOW1_RED2:
				pedestrianDisplay(RED);				// Display red light for pedestrians
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 fba9 	bl	8000c08 <pedestrianDisplay>
				break;
 80004b6:	e003      	b.n	80004c0 <fsm_pedestrian+0x5c>
			default:
				resetPedestrianFlag();				// By default reset the pedestrian flag
 80004b8:	f7ff ffc0 	bl	800043c <resetPedestrianFlag>
				break;
 80004bc:	e000      	b.n	80004c0 <fsm_pedestrian+0x5c>
		}
	}
 80004be:	bf00      	nop

	// After 2 period running reset the pedestrian flag
	if(timer_flag[TIMER_PEDESTRIAN_PERIOD]){
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <fsm_pedestrian+0x74>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <fsm_pedestrian+0x68>
		resetPedestrianFlag();
 80004c8:	f7ff ffb8 	bl	800043c <resetPedestrianFlag>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000e4 	.word	0x200000e4
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000020c 	.word	0x2000020c

080004dc <fsm_function>:
int GREEN_TIME_TEMP = 0;            // Temporary storage for green light duration

int TRAFFIC_ONE_PERIOD = 0;             // Total duration of one complete traffic light cycle in seconds

// Function to handle the traffic light state machine
void fsm_function(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	switch(TRAFFIC_STATUS){
 80004e0:	4bac      	ldr	r3, [pc, #688]	; (8000794 <fsm_function+0x2b8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	2b2a      	cmp	r3, #42	; 0x2a
 80004e8:	f200 8289 	bhi.w	80009fe <fsm_function+0x522>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <fsm_function+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	080005a1 	.word	0x080005a1
 80004f8:	080005e5 	.word	0x080005e5
 80004fc:	0800066f 	.word	0x0800066f
 8000500:	08000701 	.word	0x08000701
 8000504:	080007b5 	.word	0x080007b5
 8000508:	080009ff 	.word	0x080009ff
 800050c:	080009ff 	.word	0x080009ff
 8000510:	080009ff 	.word	0x080009ff
 8000514:	080009ff 	.word	0x080009ff
 8000518:	080009ff 	.word	0x080009ff
 800051c:	080009ff 	.word	0x080009ff
 8000520:	080009ff 	.word	0x080009ff
 8000524:	080009ff 	.word	0x080009ff
 8000528:	080009ff 	.word	0x080009ff
 800052c:	080009ff 	.word	0x080009ff
 8000530:	080009ff 	.word	0x080009ff
 8000534:	080009ff 	.word	0x080009ff
 8000538:	080009ff 	.word	0x080009ff
 800053c:	080009ff 	.word	0x080009ff
 8000540:	080009ff 	.word	0x080009ff
 8000544:	080009ff 	.word	0x080009ff
 8000548:	080009ff 	.word	0x080009ff
 800054c:	080009ff 	.word	0x080009ff
 8000550:	080009ff 	.word	0x080009ff
 8000554:	080009ff 	.word	0x080009ff
 8000558:	080009ff 	.word	0x080009ff
 800055c:	080009ff 	.word	0x080009ff
 8000560:	080009ff 	.word	0x080009ff
 8000564:	080009ff 	.word	0x080009ff
 8000568:	080009ff 	.word	0x080009ff
 800056c:	080009ff 	.word	0x080009ff
 8000570:	080009ff 	.word	0x080009ff
 8000574:	080009ff 	.word	0x080009ff
 8000578:	080009ff 	.word	0x080009ff
 800057c:	080009ff 	.word	0x080009ff
 8000580:	080009ff 	.word	0x080009ff
 8000584:	080009ff 	.word	0x080009ff
 8000588:	080009ff 	.word	0x080009ff
 800058c:	080009ff 	.word	0x080009ff
 8000590:	080009ff 	.word	0x080009ff
 8000594:	08000847 	.word	0x08000847
 8000598:	080008c7 	.word	0x080008c7
 800059c:	08000945 	.word	0x08000945
		// CASE INIT
		case INIT:
			TRAFFIC_STATUS = RED1_GREEN2;
 80005a0:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <fsm_function+0x2b8>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	601a      	str	r2, [r3, #0]
			// INITIALIZE
			setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80005a6:	4b7c      	ldr	r3, [pc, #496]	; (8000798 <fsm_function+0x2bc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fdef 	bl	8001198 <setTimer>
			TRAFFIC_COUNTER = RED_TIME;
 80005ba:	4b78      	ldr	r3, [pc, #480]	; (800079c <fsm_function+0x2c0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a78      	ldr	r2, [pc, #480]	; (80007a0 <fsm_function+0x2c4>)
 80005c0:	6013      	str	r3, [r2, #0]
			trafficDisplay1(OFF);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa42 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(OFF);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fa8d 	bl	8000ae8 <trafficDisplay2>
			TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 80005ce:	4b73      	ldr	r3, [pc, #460]	; (800079c <fsm_function+0x2c0>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b71      	ldr	r3, [pc, #452]	; (8000798 <fsm_function+0x2bc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	441a      	add	r2, r3
 80005d8:	4b72      	ldr	r3, [pc, #456]	; (80007a4 <fsm_function+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	4a72      	ldr	r2, [pc, #456]	; (80007a8 <fsm_function+0x2cc>)
 80005e0:	6013      	str	r3, [r2, #0]
			break;
 80005e2:	e21b      	b.n	8000a1c <fsm_function+0x540>

		// CASE RED - GREEN
		case RED1_GREEN2:
			trafficDisplay1(RED);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fa31 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(GREEN);
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 fa7c 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 80005f0:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <fsm_function+0x2d0>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d10b      	bne.n	8000610 <fsm_function+0x134>
				TRAFFIC_COUNTER--;
 80005f8:	4b69      	ldr	r3, [pc, #420]	; (80007a0 <fsm_function+0x2c4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a68      	ldr	r2, [pc, #416]	; (80007a0 <fsm_function+0x2c4>)
 8000600:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 8000602:	2102      	movs	r1, #2
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fdc6 	bl	8001198 <setTimer>
				UART_transmit_counter();
 800060c:	f000 fba0 	bl	8000d50 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 8000610:	4b66      	ldr	r3, [pc, #408]	; (80007ac <fsm_function+0x2d0>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10c      	bne.n	8000632 <fsm_function+0x156>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000618:	4b62      	ldr	r3, [pc, #392]	; (80007a4 <fsm_function+0x2c8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fdb6 	bl	8001198 <setTimer>
				TRAFFIC_STATUS = RED1_YELLOW2;
 800062c:	4b59      	ldr	r3, [pc, #356]	; (8000794 <fsm_function+0x2b8>)
 800062e:	2203      	movs	r2, #3
 8000630:	601a      	str	r2, [r3, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fee4 	bl	8000400 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d102      	bne.n	8000644 <fsm_function+0x168>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 800063e:	4b55      	ldr	r3, [pc, #340]	; (8000794 <fsm_function+0x2b8>)
 8000640:	2229      	movs	r2, #41	; 0x29
 8000642:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff fedb 	bl	8000400 <is_button_pressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	f040 81d8 	bne.w	8000a02 <fsm_function+0x526>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000652:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <fsm_function+0x2cc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fd99 	bl	8001198 <setTimer>
				flag_pedestrian = 1;
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <fsm_function+0x2d4>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
			}
			break;
 800066c:	e1c9      	b.n	8000a02 <fsm_function+0x526>

		// CASE RED - YELLOW
		case RED1_YELLOW2:
			trafficDisplay1(RED);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f9ec 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(YELLOW);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fa37 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800067a:	4b4c      	ldr	r3, [pc, #304]	; (80007ac <fsm_function+0x2d0>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10b      	bne.n	800069a <fsm_function+0x1be>
				TRAFFIC_COUNTER--;
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <fsm_function+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3b01      	subs	r3, #1
 8000688:	4a45      	ldr	r2, [pc, #276]	; (80007a0 <fsm_function+0x2c4>)
 800068a:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800068c:	2102      	movs	r1, #2
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fd81 	bl	8001198 <setTimer>
				UART_transmit_counter();
 8000696:	f000 fb5b 	bl	8000d50 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800069a:	4b44      	ldr	r3, [pc, #272]	; (80007ac <fsm_function+0x2d0>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d110      	bne.n	80006c4 <fsm_function+0x1e8>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <fsm_function+0x2bc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fd71 	bl	8001198 <setTimer>
				TRAFFIC_STATUS = GREEN1_RED2;
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <fsm_function+0x2b8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = GREEN_TIME;
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <fsm_function+0x2bc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <fsm_function+0x2c4>)
 80006c2:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe9b 	bl	8000400 <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d102      	bne.n	80006d6 <fsm_function+0x1fa>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <fsm_function+0x2b8>)
 80006d2:	2229      	movs	r2, #41	; 0x29
 80006d4:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 80006d6:	2003      	movs	r0, #3
 80006d8:	f7ff fe92 	bl	8000400 <is_button_pressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	f040 8191 	bne.w	8000a06 <fsm_function+0x52a>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 80006e4:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <fsm_function+0x2cc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fd50 	bl	8001198 <setTimer>
				flag_pedestrian = 1;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <fsm_function+0x2d4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80006fe:	e182      	b.n	8000a06 <fsm_function+0x52a>

		// CASE GREEN - RED
		case GREEN1_RED2:
			trafficDisplay1(GREEN);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f9a3 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(RED);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 f9ee 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <fsm_function+0x2d0>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10b      	bne.n	800072c <fsm_function+0x250>
				TRAFFIC_COUNTER--;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <fsm_function+0x2c4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <fsm_function+0x2c4>)
 800071c:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800071e:	2102      	movs	r1, #2
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f000 fd38 	bl	8001198 <setTimer>
				UART_transmit_counter();
 8000728:	f000 fb12 	bl	8000d50 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <fsm_function+0x2d0>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d110      	bne.n	8000756 <fsm_function+0x27a>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <fsm_function+0x2c8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fd28 	bl	8001198 <setTimer>
				TRAFFIC_STATUS = YELLOW1_RED2;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <fsm_function+0x2b8>)
 800074a:	2205      	movs	r2, #5
 800074c:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = YELLOW_TIME;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <fsm_function+0x2c8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <fsm_function+0x2c4>)
 8000754:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fe52 	bl	8000400 <is_button_pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d102      	bne.n	8000768 <fsm_function+0x28c>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <fsm_function+0x2b8>)
 8000764:	2229      	movs	r2, #41	; 0x29
 8000766:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000768:	2003      	movs	r0, #3
 800076a:	f7ff fe49 	bl	8000400 <is_button_pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	f040 814a 	bne.w	8000a0a <fsm_function+0x52e>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <fsm_function+0x2cc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	2103      	movs	r1, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd07 	bl	8001198 <setTimer>
				flag_pedestrian = 1;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <fsm_function+0x2d4>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000790:	e13b      	b.n	8000a0a <fsm_function+0x52e>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	20000004 	.word	0x20000004
 80007a8:	200000f8 	.word	0x200000f8
 80007ac:	2000020c 	.word	0x2000020c
 80007b0:	200000e4 	.word	0x200000e4

		// CASE YELLOW - RED
		case YELLOW1_RED2:
			trafficDisplay1(YELLOW);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 f949 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(RED);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f994 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 80007c0:	4b97      	ldr	r3, [pc, #604]	; (8000a20 <fsm_function+0x544>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10b      	bne.n	80007e0 <fsm_function+0x304>
				TRAFFIC_COUNTER--;
 80007c8:	4b96      	ldr	r3, [pc, #600]	; (8000a24 <fsm_function+0x548>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a95      	ldr	r2, [pc, #596]	; (8000a24 <fsm_function+0x548>)
 80007d0:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 80007d2:	2102      	movs	r1, #2
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f000 fcde 	bl	8001198 <setTimer>
				UART_transmit_counter();
 80007dc:	f000 fab8 	bl	8000d50 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 80007e0:	4b8f      	ldr	r3, [pc, #572]	; (8000a20 <fsm_function+0x544>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d110      	bne.n	800080a <fsm_function+0x32e>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <fsm_function+0x54c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fcce 	bl	8001198 <setTimer>
				TRAFFIC_STATUS = RED1_GREEN2;
 80007fc:	4b8b      	ldr	r3, [pc, #556]	; (8000a2c <fsm_function+0x550>)
 80007fe:	2202      	movs	r2, #2
 8000800:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = RED_TIME;
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <fsm_function+0x554>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a87      	ldr	r2, [pc, #540]	; (8000a24 <fsm_function+0x548>)
 8000808:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fdf8 	bl	8000400 <is_button_pressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <fsm_function+0x340>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 8000816:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <fsm_function+0x550>)
 8000818:	2229      	movs	r2, #41	; 0x29
 800081a:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 800081c:	2003      	movs	r0, #3
 800081e:	f7ff fdef 	bl	8000400 <is_button_pressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	f040 80f2 	bne.w	8000a0e <fsm_function+0x532>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 800082a:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <fsm_function+0x558>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fcad 	bl	8001198 <setTimer>
				flag_pedestrian = 1;
 800083e:	4b7e      	ldr	r3, [pc, #504]	; (8000a38 <fsm_function+0x55c>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
			}
			break;
 8000844:	e0e3      	b.n	8000a0e <fsm_function+0x532>

		case MODE_MODIFY_RED:
			// TOGGLE RED
			trafficToggle(RED);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f996 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fdd7 	bl	8000400 <is_button_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d102      	bne.n	800085e <fsm_function+0x382>
				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 8000858:	4b74      	ldr	r3, [pc, #464]	; (8000a2c <fsm_function+0x550>)
 800085a:	222a      	movs	r2, #42	; 0x2a
 800085c:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fdce 	bl	8000400 <is_button_pressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d110      	bne.n	800088c <fsm_function+0x3b0>
				RED_TIME_TEMP = RED_TIME;
 800086a:	4b71      	ldr	r3, [pc, #452]	; (8000a30 <fsm_function+0x554>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a73      	ldr	r2, [pc, #460]	; (8000a3c <fsm_function+0x560>)
 8000870:	6013      	str	r3, [r2, #0]
				// ADD UP RED
				if(RED_TIME_TEMP >= 99){
 8000872:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <fsm_function+0x560>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b62      	cmp	r3, #98	; 0x62
 8000878:	dd03      	ble.n	8000882 <fsm_function+0x3a6>
					RED_TIME_TEMP = 0;
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <fsm_function+0x560>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e004      	b.n	800088c <fsm_function+0x3b0>
				}
				else{
					RED_TIME_TEMP++;
 8000882:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <fsm_function+0x560>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a6c      	ldr	r2, [pc, #432]	; (8000a3c <fsm_function+0x560>)
 800088a:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800088c:	2002      	movs	r0, #2
 800088e:	f7ff fdb7 	bl	8000400 <is_button_pressed>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	f040 80bc 	bne.w	8000a12 <fsm_function+0x536>
				// SAVE
				RED_TIME = RED_TIME_TEMP;
 800089a:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <fsm_function+0x560>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a64      	ldr	r2, [pc, #400]	; (8000a30 <fsm_function+0x554>)
 80008a0:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80008a2:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <fsm_function+0x554>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <fsm_function+0x54c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a64      	ldr	r2, [pc, #400]	; (8000a40 <fsm_function+0x564>)
 80008ae:	6013      	str	r3, [r2, #0]
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 80008b0:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <fsm_function+0x554>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <fsm_function+0x564>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <fsm_function+0x54c>)
 80008bc:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 80008be:	4b5b      	ldr	r3, [pc, #364]	; (8000a2c <fsm_function+0x550>)
 80008c0:	222a      	movs	r2, #42	; 0x2a
 80008c2:	601a      	str	r2, [r3, #0]
			}
			break;
 80008c4:	e0a5      	b.n	8000a12 <fsm_function+0x536>

		case MODE_MODIFY_YELLOW:
			// TOGGLE RED
			trafficToggle(YELLOW);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f000 f956 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fd97 	bl	8000400 <is_button_pressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d102      	bne.n	80008de <fsm_function+0x402>
				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 80008d8:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <fsm_function+0x550>)
 80008da:	222b      	movs	r2, #43	; 0x2b
 80008dc:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fd8e 	bl	8000400 <is_button_pressed>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d110      	bne.n	800090c <fsm_function+0x430>
				YELLOW_TIME_TEMP = YELLOW_TIME;
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <fsm_function+0x564>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a55      	ldr	r2, [pc, #340]	; (8000a44 <fsm_function+0x568>)
 80008f0:	6013      	str	r3, [r2, #0]
				// ADD UP YELLOW
				if(YELLOW_TIME_TEMP >= 99){
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <fsm_function+0x568>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b62      	cmp	r3, #98	; 0x62
 80008f8:	dd03      	ble.n	8000902 <fsm_function+0x426>
					YELLOW_TIME_TEMP = 0;
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <fsm_function+0x568>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e004      	b.n	800090c <fsm_function+0x430>
				}
				else{
					YELLOW_TIME_TEMP++;
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <fsm_function+0x568>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <fsm_function+0x568>)
 800090a:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fd77 	bl	8000400 <is_button_pressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d17e      	bne.n	8000a16 <fsm_function+0x53a>
				// SAVE
				YELLOW_TIME = YELLOW_TIME_TEMP;
 8000918:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <fsm_function+0x568>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a48      	ldr	r2, [pc, #288]	; (8000a40 <fsm_function+0x564>)
 800091e:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <fsm_function+0x554>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <fsm_function+0x564>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4a3f      	ldr	r2, [pc, #252]	; (8000a28 <fsm_function+0x54c>)
 800092c:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <fsm_function+0x564>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <fsm_function+0x54c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <fsm_function+0x554>)
 800093a:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <fsm_function+0x550>)
 800093e:	222b      	movs	r2, #43	; 0x2b
 8000940:	601a      	str	r2, [r3, #0]
			}
			break;
 8000942:	e068      	b.n	8000a16 <fsm_function+0x53a>

		case MODE_MODIFY_GREEN:
			// TOGGLE RED
			trafficToggle(GREEN);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f917 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fd58 	bl	8000400 <is_button_pressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10c      	bne.n	8000970 <fsm_function+0x494>
				TRAFFIC_STATUS = RED1_GREEN2;
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <fsm_function+0x550>)
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <fsm_function+0x54c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fc14 	bl	8001198 <setTimer>
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fd45 	bl	8000400 <is_button_pressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d110      	bne.n	800099e <fsm_function+0x4c2>
				GREEN_TIME_TEMP = GREEN_TIME;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <fsm_function+0x54c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <fsm_function+0x56c>)
 8000982:	6013      	str	r3, [r2, #0]
				// ADD UP GREEN
				if(GREEN_TIME_TEMP >= 99){
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <fsm_function+0x56c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b62      	cmp	r3, #98	; 0x62
 800098a:	dd03      	ble.n	8000994 <fsm_function+0x4b8>
					GREEN_TIME_TEMP = 0;
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <fsm_function+0x56c>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e004      	b.n	800099e <fsm_function+0x4c2>
				}
				else{
					GREEN_TIME_TEMP++;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <fsm_function+0x56c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <fsm_function+0x56c>)
 800099c:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff fd2e 	bl	8000400 <is_button_pressed>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d137      	bne.n	8000a1a <fsm_function+0x53e>
				// SAVE
				GREEN_TIME = GREEN_TIME_TEMP;;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <fsm_function+0x56c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <fsm_function+0x54c>)
 80009b0:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <fsm_function+0x554>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <fsm_function+0x54c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <fsm_function+0x564>)
 80009be:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <fsm_function+0x564>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <fsm_function+0x54c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <fsm_function+0x554>)
 80009cc:	6013      	str	r3, [r2, #0]

				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <fsm_function+0x54c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	2101      	movs	r1, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fbdb 	bl	8001198 <setTimer>
				TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <fsm_function+0x554>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <fsm_function+0x54c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	441a      	add	r2, r3
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <fsm_function+0x564>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <fsm_function+0x558>)
 80009f4:	6013      	str	r3, [r2, #0]
				TRAFFIC_STATUS = RED1_GREEN2;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <fsm_function+0x550>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80009fc:	e00d      	b.n	8000a1a <fsm_function+0x53e>
		default:
			break;
 80009fe:	bf00      	nop
 8000a00:	e00c      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a02:	bf00      	nop
 8000a04:	e00a      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a06:	bf00      	nop
 8000a08:	e008      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a0a:	bf00      	nop
 8000a0c:	e006      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a0e:	bf00      	nop
 8000a10:	e004      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a12:	bf00      	nop
 8000a14:	e002      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a16:	bf00      	nop
 8000a18:	e000      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000020c 	.word	0x2000020c
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	200000ec 	.word	0x200000ec
 8000a40:	20000004 	.word	0x20000004
 8000a44:	200000f0 	.word	0x200000f0
 8000a48:	200000f4 	.word	0x200000f4

08000a4c <trafficDisplay1>:



#include <hardware.h>

void trafficDisplay1(uint8_t input){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d83b      	bhi.n	8000ad4 <trafficDisplay1+0x88>
 8000a5c:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <trafficDisplay1+0x18>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000a75 	.word	0x08000a75
 8000a68:	08000a8d 	.word	0x08000a8d
 8000a6c:	08000abd 	.word	0x08000abd
 8000a70:	08000aa5 	.word	0x08000aa5
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <trafficDisplay1+0x94>)
 8000a7c:	f001 f943 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <trafficDisplay1+0x98>)
 8000a86:	f001 f93e 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000a8a:	e024      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <trafficDisplay1+0x94>)
 8000a94:	f001 f937 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <trafficDisplay1+0x98>)
 8000a9e:	f001 f932 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000aa2:	e018      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <trafficDisplay1+0x94>)
 8000aac:	f001 f92b 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <trafficDisplay1+0x98>)
 8000ab6:	f001 f926 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000aba:	e00c      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <trafficDisplay1+0x94>)
 8000ac4:	f001 f91f 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <trafficDisplay1+0x98>)
 8000ace:	f001 f91a 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000ad2:	e000      	b.n	8000ad6 <trafficDisplay1+0x8a>
		default:
			break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <trafficDisplay2>:

void trafficDisplay2(uint8_t input){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d837      	bhi.n	8000b68 <trafficDisplay2+0x80>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <trafficDisplay2+0x18>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b11 	.word	0x08000b11
 8000b04:	08000b27 	.word	0x08000b27
 8000b08:	08000b53 	.word	0x08000b53
 8000b0c:	08000b3d 	.word	0x08000b3d
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2120      	movs	r1, #32
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b16:	f001 f8f6 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4815      	ldr	r0, [pc, #84]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b20:	f001 f8f1 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000b24:	e021      	b.n	8000b6a <trafficDisplay2+0x82>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b2c:	f001 f8eb 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b36:	f001 f8e6 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000b3a:	e016      	b.n	8000b6a <trafficDisplay2+0x82>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b42:	f001 f8e0 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b4c:	f001 f8db 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000b50:	e00b      	b.n	8000b6a <trafficDisplay2+0x82>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2120      	movs	r1, #32
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b58:	f001 f8d5 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b62:	f001 f8d0 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000b66:	e000      	b.n	8000b6a <trafficDisplay2+0x82>
		default:
			break;
 8000b68:	bf00      	nop
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <trafficToggle>:

uint8_t toggle_state = 0;
void trafficToggle(uint8_t input){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[4]){
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <trafficToggle+0x88>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00b      	beq.n	8000ba2 <trafficToggle+0x2a>
		setTimer(1000, 4);
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b90:	f000 fb02 	bl	8001198 <setTimer>
		toggle_state = 1 - toggle_state;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <trafficToggle+0x8c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f1c3 0301 	rsb	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <trafficToggle+0x8c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
	}
	if(toggle_state){
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <trafficToggle+0x8c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d01e      	beq.n	8000be8 <trafficToggle+0x70>
		switch(input){
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d014      	beq.n	8000bda <trafficToggle+0x62>
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	dc20      	bgt.n	8000bf6 <trafficToggle+0x7e>
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d002      	beq.n	8000bbe <trafficToggle+0x46>
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d007      	beq.n	8000bcc <trafficToggle+0x54>
	}
	else {
		trafficDisplay1(OFF);
		trafficDisplay2(OFF);
	}
}
 8000bbc:	e01b      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(RED);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ff44 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(RED);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ff8f 	bl	8000ae8 <trafficDisplay2>
				break;
 8000bca:	e014      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(YELLOW);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff ff3d 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(YELLOW);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff88 	bl	8000ae8 <trafficDisplay2>
				break;
 8000bd8:	e00d      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(GREEN);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff ff36 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(GREEN);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff ff81 	bl	8000ae8 <trafficDisplay2>
				break;
 8000be6:	e006      	b.n	8000bf6 <trafficToggle+0x7e>
		trafficDisplay1(OFF);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff2f 	bl	8000a4c <trafficDisplay1>
		trafficDisplay2(OFF);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff7a 	bl	8000ae8 <trafficDisplay2>
}
 8000bf4:	e7ff      	b.n	8000bf6 <trafficToggle+0x7e>
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000020c 	.word	0x2000020c
 8000c04:	200000fc 	.word	0x200000fc

08000c08 <pedestrianDisplay>:


void pedestrianDisplay(uint8_t input){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d83f      	bhi.n	8000c98 <pedestrianDisplay+0x90>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <pedestrianDisplay+0x18>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c4b 	.word	0x08000c4b
 8000c28:	08000c7f 	.word	0x08000c7f
 8000c2c:	08000c65 	.word	0x08000c65
		case OFF:
		  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c38:	f001 f865 	bl	8001d06 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c44:	f001 f85f 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000c48:	e027      	b.n	8000c9a <pedestrianDisplay+0x92>
		case RED:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c52:	f001 f858 	bl	8001d06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c5e:	f001 f852 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000c62:	e01a      	b.n	8000c9a <pedestrianDisplay+0x92>
		case GREEN:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c6c:	f001 f84b 	bl	8001d06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c78:	f001 f845 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000c7c:	e00d      	b.n	8000c9a <pedestrianDisplay+0x92>
		case YELLOW:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c86:	f001 f83e 	bl	8001d06 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c92:	f001 f838 	bl	8001d06 <HAL_GPIO_WritePin>
		  break;
 8000c96:	e000      	b.n	8000c9a <pedestrianDisplay+0x92>
		default:
			break;
 8000c98:	bf00      	nop
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40010800 	.word	0x40010800

08000cac <BuzzerOn>:
}

uint16_t BuzzerPeriod = 250;
uint16_t BuzzerDutyCycle = 500;
uint8_t BuzzerToggle = 0;
void BuzzerOn(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	if(timer_flag[TIMER_BUZZER]){
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <BuzzerOn+0x60>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d018      	beq.n	8000cea <BuzzerOn+0x3e>
		BuzzerToggle = 1 - BuzzerToggle;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <BuzzerOn+0x64>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f1c3 0301 	rsb	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <BuzzerOn+0x64>)
 8000cc4:	701a      	strb	r2, [r3, #0]
		setTimer(BuzzerPeriod, TIMER_BUZZER);
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <BuzzerOn+0x68>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	2105      	movs	r1, #5
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fa63 	bl	8001198 <setTimer>

		 BuzzerDutyCycle+=100;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <BuzzerOn+0x6c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3364      	adds	r3, #100	; 0x64
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <BuzzerOn+0x6c>)
 8000cdc:	801a      	strh	r2, [r3, #0]
		 BuzzerPeriod-=50;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <BuzzerOn+0x68>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b32      	subs	r3, #50	; 0x32
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <BuzzerOn+0x68>)
 8000ce8:	801a      	strh	r2, [r3, #0]
	}
	if(BuzzerToggle) __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,BuzzerDutyCycle);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <BuzzerOn+0x64>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d005      	beq.n	8000cfe <BuzzerOn+0x52>
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <BuzzerOn+0x6c>)
 8000cf4:	881a      	ldrh	r2, [r3, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <BuzzerOn+0x70>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
	else __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
}
 8000cfc:	e003      	b.n	8000d06 <BuzzerOn+0x5a>
	else __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <BuzzerOn+0x70>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000020c 	.word	0x2000020c
 8000d10:	200000fd 	.word	0x200000fd
 8000d14:	20000010 	.word	0x20000010
 8000d18:	20000012 	.word	0x20000012
 8000d1c:	20000168 	.word	0x20000168

08000d20 <BuzzerOff>:


void BuzzerOff(){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <BuzzerOff+0x24>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
	  BuzzerPeriod = 250;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <BuzzerOff+0x28>)
 8000d2e:	22fa      	movs	r2, #250	; 0xfa
 8000d30:	801a      	strh	r2, [r3, #0]
	  BuzzerDutyCycle = 500;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <BuzzerOff+0x2c>)
 8000d34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d38:	801a      	strh	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000168 	.word	0x20000168
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	20000012 	.word	0x20000012

08000d50 <UART_transmit_counter>:

char packet[30];
void UART_transmit_counter(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    sprintf(packet, "!7SEG:%d#\r\n", TRAFFIC_COUNTER);
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <UART_transmit_counter+0x2c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4909      	ldr	r1, [pc, #36]	; (8000d80 <UART_transmit_counter+0x30>)
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <UART_transmit_counter+0x34>)
 8000d5e:	f003 f8e5 	bl	8003f2c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)packet, strlen(packet), 1000);
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <UART_transmit_counter+0x34>)
 8000d64:	f7ff f9f2 	bl	800014c <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d70:	4904      	ldr	r1, [pc, #16]	; (8000d84 <UART_transmit_counter+0x34>)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <UART_transmit_counter+0x38>)
 8000d74:	f002 fbbd 	bl	80034f2 <HAL_UART_Transmit>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000e8 	.word	0x200000e8
 8000d80:	08004838 	.word	0x08004838
 8000d84:	20000100 	.word	0x20000100
 8000d88:	200001b0 	.word	0x200001b0

08000d8c <runAutoDebug>:

void runAutoDebug() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	if(timer_flag[0]){
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <runAutoDebug+0x24>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <runAutoDebug+0x1e>
		setTimer(1000,0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9e:	f000 f9fb 	bl	8001198 <setTimer>
		HAL_GPIO_TogglePin(DEBUG_LED1_GPIO_Port, DEBUG_LED1_Pin);
 8000da2:	2120      	movs	r1, #32
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <runAutoDebug+0x28>)
 8000da6:	f000 ffc6 	bl	8001d36 <HAL_GPIO_TogglePin>
        if(is_button_pressed(0)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(1)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(2)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(3)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
#endif //__TEST_BUTTON
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000020c 	.word	0x2000020c
 8000db4:	40010800 	.word	0x40010800

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f000 fbe8 	bl	8001590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f82a 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f000 f950 	bl	8001068 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dc8:	f000 f862 	bl	8000e90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dcc:	f000 f8ac 	bl	8000f28 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000dd0:	f000 f920 	bl	8001014 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <main+0x50>)
 8000dd6:	f001 fc31 	bl	800263c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <main+0x54>)
 8000dde:	f001 fcd7 	bl	8002790 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2 , &UART_VALUE , 1) ;
 8000de2:	2201      	movs	r2, #1
 8000de4:	490a      	ldr	r1, [pc, #40]	; (8000e10 <main+0x58>)
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <main+0x5c>)
 8000de8:	f002 fc15 	bl	8003616 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initButton();
 8000dec:	f7ff f9fc 	bl	80001e8 <initButton>
  initTimer(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f000 fa18 	bl	8001228 <initTimer>
  while (1)
  {
	  runAutoDebug();
 8000df8:	f7ff ffc8 	bl	8000d8c <runAutoDebug>
	  fsm_function();
 8000dfc:	f7ff fb6e 	bl	80004dc <fsm_function>
	  fsm_pedestrian();
 8000e00:	f7ff fb30 	bl	8000464 <fsm_pedestrian>
	  runAutoDebug();
 8000e04:	e7f8      	b.n	8000df8 <main+0x40>
 8000e06:	bf00      	nop
 8000e08:	20000120 	.word	0x20000120
 8000e0c:	20000168 	.word	0x20000168
 8000e10:	200000a0 	.word	0x200000a0
 8000e14:	200001b0 	.word	0x200001b0

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 f878 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ff8a 	bl	8001d68 <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f997 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 f9f7 	bl	800226c <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e84:	f000 f982 	bl	800118c <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3740      	adds	r7, #64	; 0x40
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	f240 321f 	movw	r2, #799	; 0x31f
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec4:	2209      	movs	r2, #9
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f001 fb61 	bl	800259c <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f000 f954 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 feb5 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 f946 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f002 fa33 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f938 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000120 	.word	0x20000120

08000f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	; (8001010 <MX_TIM3_Init+0xe8>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7e:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f80:	f001 fb0c 	bl	800259c <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f8a:	f000 f8ff 	bl	800118c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481c      	ldr	r0, [pc, #112]	; (800100c <MX_TIM3_Init+0xe4>)
 8000f9c:	f001 fe60 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f8f1 	bl	800118c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000faa:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_TIM3_Init+0xe4>)
 8000fac:	f001 fb98 	bl	80026e0 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 f8e9 	bl	800118c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <MX_TIM3_Init+0xe4>)
 8000fca:	f002 f9d5 	bl	8003378 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 f8da 	bl	800118c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM3_Init+0xe4>)
 8000ff0:	f001 fd78 	bl	8002ae4 <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ffa:	f000 f8c7 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM3_Init+0xe4>)
 8001000:	f000 f99a 	bl	8001338 <HAL_TIM_MspPostInit>

}
 8001004:	bf00      	nop
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000168 	.word	0x20000168
 8001010:	40000400 	.word	0x40000400

08001014 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART2_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001020:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001024:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART2_UART_Init+0x4c>)
 800104c:	f002 fa04 	bl	8003458 <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f899 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001b0 	.word	0x200001b0
 8001064:	40004400 	.word	0x40004400

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <MX_GPIO_Init+0x114>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a3e      	ldr	r2, [pc, #248]	; (800117c <MX_GPIO_Init+0x114>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <MX_GPIO_Init+0x114>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b39      	ldr	r3, [pc, #228]	; (800117c <MX_GPIO_Init+0x114>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a38      	ldr	r2, [pc, #224]	; (800117c <MX_GPIO_Init+0x114>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <MX_GPIO_Init+0x114>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_GPIO_Init+0x114>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a32      	ldr	r2, [pc, #200]	; (800117c <MX_GPIO_Init+0x114>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_GPIO_Init+0x114>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80010ca:	482d      	ldr	r0, [pc, #180]	; (8001180 <MX_GPIO_Init+0x118>)
 80010cc:	f000 fe1b 	bl	8001d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010d6:	482b      	ldr	r0, [pc, #172]	; (8001184 <MX_GPIO_Init+0x11c>)
 80010d8:	f000 fe15 	bl	8001d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_GPIO_Init+0x120>)
 80010e4:	f000 fe0f 	bl	8001d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80010e8:	2313      	movs	r3, #19
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4619      	mov	r1, r3
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <MX_GPIO_Init+0x118>)
 80010fc:	f000 fc68 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED1_Pin PEDLED_BIT2_Pin TRAFFIC1_BIT1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin;
 8001100:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <MX_GPIO_Init+0x118>)
 800111a:	f000 fc59 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 800111e:	2301      	movs	r3, #1
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4814      	ldr	r0, [pc, #80]	; (8001184 <MX_GPIO_Init+0x11c>)
 8001132:	f000 fc4d 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDLED_BIT1_Pin TRAFFIC1_BIT2_Pin TRAFFIC2_BIT2_Pin TRAFFIC2_BIT1_Pin */
  GPIO_InitStruct.Pin = PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin;
 8001136:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_GPIO_Init+0x11c>)
 8001150:	f000 fc3e 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED2_Pin;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED2_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_GPIO_Init+0x120>)
 800116e:	f000 fc2f 	bl	80019d0 <HAL_GPIO_Init>

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	40010c00 	.word	0x40010c00
 8001188:	40011000 	.word	0x40011000

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 80011a2:	4907      	ldr	r1, [pc, #28]	; (80011c0 <setTimer+0x28>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <setTimer+0x2c>)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2100      	movs	r1, #0
 80011b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200001f4 	.word	0x200001f4
 80011c4:	2000020c 	.word	0x2000020c

080011c8 <timerRun>:

void timerRun(){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	e01c      	b.n	800120e <timerRun+0x46>
		if(timer_counter[i] > 0){
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <timerRun+0x58>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd13      	ble.n	8001208 <timerRun+0x40>
			timer_counter[i]--;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <timerRun+0x58>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <timerRun+0x58>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <timerRun+0x58>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dc04      	bgt.n	8001208 <timerRun+0x40>
				timer_flag[i] = 1;
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <timerRun+0x5c>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2101      	movs	r1, #1
 8001204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b05      	cmp	r3, #5
 8001212:	dddf      	ble.n	80011d4 <timerRun+0xc>
			}
		}
	}
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	200001f4 	.word	0x200001f4
 8001224:	2000020c 	.word	0x2000020c

08001228 <initTimer>:

void initTimer(int delay){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e006      	b.n	8001244 <initTimer+0x1c>
		setTimer(delay, i);
 8001236:	68f9      	ldr	r1, [r7, #12]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffad 	bl	8001198 <setTimer>
	for(int i = 0; i<NO_OF_TIMER; i++){
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b05      	cmp	r3, #5
 8001248:	ddf5      	ble.n	8001236 <initTimer+0xe>
	}
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_MspInit+0x5c>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <HAL_MspInit+0x5c>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_MspInit+0x5c>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <HAL_MspInit+0x5c>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_MspInit+0x5c>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_MspInit+0x5c>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_MspInit+0x60>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_MspInit+0x60>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000

080012b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d114      	bne.n	80012f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	201c      	movs	r0, #28
 80012e8:	f000 fa8b 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ec:	201c      	movs	r0, #28
 80012ee:	f000 faa4 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f2:	e018      	b.n	8001326 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_TIM_Base_MspInit+0x7c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d113      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x78>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f000 fa71 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001320:	201d      	movs	r0, #29
 8001322:	f000 fa8a 	bl	800183a <HAL_NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000
 8001334:	40000400 	.word	0x40000400

08001338 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_TIM_MspPostInit+0x58>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d117      	bne.n	8001388 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_TIM_MspPostInit+0x5c>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001370:	2340      	movs	r3, #64	; 0x40
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_TIM_MspPostInit+0x60>)
 8001384:	f000 fb24 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40000400 	.word	0x40000400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <HAL_UART_MspInit+0x98>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d137      	bne.n	800142c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c6:	61d3      	str	r3, [r2, #28]
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_UART_MspInit+0x9c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ec:	2304      	movs	r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	480f      	ldr	r0, [pc, #60]	; (800143c <HAL_UART_MspInit+0xa0>)
 8001400:	f000 fae6 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001404:	2308      	movs	r3, #8
 8001406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4619      	mov	r1, r3
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <HAL_UART_MspInit+0xa0>)
 8001418:	f000 fada 	bl	80019d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2026      	movs	r0, #38	; 0x26
 8001422:	f000 f9ee 	bl	8001802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001426:	2026      	movs	r0, #38	; 0x26
 8001428:	f000 fa07 	bl	800183a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40004400 	.word	0x40004400
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f8c9 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f001 fa1d 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000120 	.word	0x20000120

080014a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM3_IRQHandler+0x10>)
 80014aa:	f001 fa13 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000168 	.word	0x20000168

080014b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <USART2_IRQHandler+0x10>)
 80014be:	f002 f8db 	bl	8003678 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001b0 	.word	0x200001b0

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f002 fce4 	bl	8003ec8 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20005000 	.word	0x20005000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000224 	.word	0x20000224
 8001534:	20000240 	.word	0x20000240

08001538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001546:	490d      	ldr	r1, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800155c:	4c0a      	ldr	r4, [pc, #40]	; (8001588 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156a:	f7ff ffe5 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f002 fcb1 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7ff fc21 	bl	8000db8 <main>
  bx lr
 8001576:	4770      	bx	lr
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800157c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001580:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8001584:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001588:	2000023c 	.word	0x2000023c

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_Init+0x28>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_Init+0x28>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 f923 	bl	80017ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fe52 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40022000 	.word	0x40022000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f93b 	bl	8001856 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f903 	bl	8001802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000014 	.word	0x20000014
 8001614:	2000001c 	.word	0x2000001c
 8001618:	20000018 	.word	0x20000018

0800161c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x1c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_IncTick+0x20>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x20>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	2000001c 	.word	0x2000001c
 800163c:	20000228 	.word	0x20000228

08001640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_GetTick+0x10>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000228 	.word	0x20000228

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <__NVIC_EnableIRQ+0x34>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	; (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	; 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	; 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b8:	d301      	bcc.n	80017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00f      	b.n	80017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <SysTick_Config+0x40>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c6:	210f      	movs	r1, #15
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f7ff ff90 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <SysTick_Config+0x40>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <SysTick_Config+0x40>)
 80017d8:	2207      	movs	r2, #7
 80017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	e000e010 	.word	0xe000e010

080017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff2d 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001814:	f7ff ff42 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	6978      	ldr	r0, [r7, #20]
 8001820:	f7ff ff90 	bl	8001744 <NVIC_EncodePriority>
 8001824:	4602      	mov	r2, r0
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff5f 	bl	80016f0 <__NVIC_SetPriority>
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff35 	bl	80016b8 <__NVIC_EnableIRQ>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffa2 	bl	80017a8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001880:	2b02      	cmp	r3, #2
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e020      	b.n	80018d8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d005      	beq.n	8001906 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e051      	b.n	80019aa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 020e 	bic.w	r2, r2, #14
 8001914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_DMA_Abort_IT+0xd0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d029      	beq.n	8001984 <HAL_DMA_Abort_IT+0xa0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_DMA_Abort_IT+0xd4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d022      	beq.n	8001980 <HAL_DMA_Abort_IT+0x9c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_DMA_Abort_IT+0xd8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d01a      	beq.n	800197a <HAL_DMA_Abort_IT+0x96>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <HAL_DMA_Abort_IT+0xdc>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d012      	beq.n	8001974 <HAL_DMA_Abort_IT+0x90>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_DMA_Abort_IT+0xe0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00a      	beq.n	800196e <HAL_DMA_Abort_IT+0x8a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_DMA_Abort_IT+0xe4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d102      	bne.n	8001968 <HAL_DMA_Abort_IT+0x84>
 8001962:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001966:	e00e      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800196c:	e00b      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 800196e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001972:	e008      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	e005      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 800197a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800197e:	e002      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001980:	2310      	movs	r3, #16
 8001982:	e000      	b.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001984:	2301      	movs	r3, #1
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_DMA_Abort_IT+0xe8>)
 8001988:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
    } 
  }
  return status;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40020008 	.word	0x40020008
 80019b8:	4002001c 	.word	0x4002001c
 80019bc:	40020030 	.word	0x40020030
 80019c0:	40020044 	.word	0x40020044
 80019c4:	40020058 	.word	0x40020058
 80019c8:	4002006c 	.word	0x4002006c
 80019cc:	40020000 	.word	0x40020000

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b08b      	sub	sp, #44	; 0x2c
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e169      	b.n	8001cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e4:	2201      	movs	r2, #1
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8158 	bne.w	8001cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a9a      	ldr	r2, [pc, #616]	; (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d05e      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a0c:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d875      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a12:	4a98      	ldr	r2, [pc, #608]	; (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d058      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a18:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d86f      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a1e:	4a96      	ldr	r2, [pc, #600]	; (8001c78 <HAL_GPIO_Init+0x2a8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d052      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a24:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2a8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d869      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a2a:	4a94      	ldr	r2, [pc, #592]	; (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d04c      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a30:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2ac>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d863      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a36:	4a92      	ldr	r2, [pc, #584]	; (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d046      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
 8001a3c:	4a90      	ldr	r2, [pc, #576]	; (8001c80 <HAL_GPIO_Init+0x2b0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d85d      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d82a      	bhi.n	8001a9c <HAL_GPIO_Init+0xcc>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d859      	bhi.n	8001afe <HAL_GPIO_Init+0x12e>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <HAL_GPIO_Init+0x80>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001acb 	.word	0x08001acb
 8001a54:	08001aa5 	.word	0x08001aa5
 8001a58:	08001ab7 	.word	0x08001ab7
 8001a5c:	08001af9 	.word	0x08001af9
 8001a60:	08001aff 	.word	0x08001aff
 8001a64:	08001aff 	.word	0x08001aff
 8001a68:	08001aff 	.word	0x08001aff
 8001a6c:	08001aff 	.word	0x08001aff
 8001a70:	08001aff 	.word	0x08001aff
 8001a74:	08001aff 	.word	0x08001aff
 8001a78:	08001aff 	.word	0x08001aff
 8001a7c:	08001aff 	.word	0x08001aff
 8001a80:	08001aff 	.word	0x08001aff
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001aff 	.word	0x08001aff
 8001a8c:	08001aff 	.word	0x08001aff
 8001a90:	08001aff 	.word	0x08001aff
 8001a94:	08001aad 	.word	0x08001aad
 8001a98:	08001ac1 	.word	0x08001ac1
 8001a9c:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <HAL_GPIO_Init+0x2b4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa2:	e02c      	b.n	8001afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e029      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e024      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	3308      	adds	r3, #8
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e01f      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	330c      	adds	r3, #12
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e01a      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	623b      	str	r3, [r7, #32]
          break;
 8001ad6:	e013      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	611a      	str	r2, [r3, #16]
          break;
 8001aea:	e009      	b.n	8001b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aec:	2308      	movs	r3, #8
 8001aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	615a      	str	r2, [r3, #20]
          break;
 8001af6:	e003      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x130>
          break;
 8001afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d801      	bhi.n	8001b0a <HAL_GPIO_Init+0x13a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_Init+0x13e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d802      	bhi.n	8001b1c <HAL_GPIO_Init+0x14c>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x152>
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	3b08      	subs	r3, #8
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	210f      	movs	r1, #15
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	6a39      	ldr	r1, [r7, #32]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 80b1 	beq.w	8001cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a4c      	ldr	r2, [pc, #304]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b68:	4a48      	ldr	r2, [pc, #288]	; (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <HAL_GPIO_Init+0x1ec>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_GPIO_Init+0x2c4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_GPIO_Init+0x1e8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a3e      	ldr	r2, [pc, #248]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <HAL_GPIO_Init+0x2cc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_GPIO_Init+0x1e0>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x1ee>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bce:	492f      	ldr	r1, [pc, #188]	; (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4928      	ldr	r1, [pc, #160]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	491e      	ldr	r1, [pc, #120]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	4914      	ldr	r1, [pc, #80]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d021      	beq.n	8001ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e021      	b.n	8001cb2 <HAL_GPIO_Init+0x2e2>
 8001c6e:	bf00      	nop
 8001c70:	10320000 	.word	0x10320000
 8001c74:	10310000 	.word	0x10310000
 8001c78:	10220000 	.word	0x10220000
 8001c7c:	10210000 	.word	0x10210000
 8001c80:	10120000 	.word	0x10120000
 8001c84:	10110000 	.word	0x10110000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40011400 	.word	0x40011400
 8001ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_GPIO_Init+0x304>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4909      	ldr	r1, [pc, #36]	; (8001cd4 <HAL_GPIO_Init+0x304>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae8e 	bne.w	80019e4 <HAL_GPIO_Init+0x14>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	372c      	adds	r7, #44	; 0x2c
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]
 8001d12:	4613      	mov	r3, r2
 8001d14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d16:	787b      	ldrb	r3, [r7, #1]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e272      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8087 	beq.w	8001e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d88:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d00c      	beq.n	8001dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d94:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d112      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5e>
 8001da0:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d06c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x12c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d168      	bne.n	8001e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e24c      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x76>
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a7f      	ldr	r2, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e02e      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x98>
 8001de6:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0xbc>
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a71      	ldr	r2, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001e24:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a67      	ldr	r2, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fbfc 	bl	8001640 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fbf8 	bl	8001640 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e200      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xe4>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fbe8 	bl	8001640 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fbe4 	bl	8001640 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1ec      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x10c>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x18c>
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x176>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1c0      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x270>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fb9d 	bl	8001640 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fb99 	bl	8001640 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1a1      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x270>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb7c 	bl	8001640 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fb78 	bl	8001640 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e180      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03a      	beq.n	8001fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d019      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_RCC_OscConfig+0x274>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff fb5c 	bl	8001640 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fb58 	bl	8001640 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e160      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f000 fad8 	bl	8002560 <RCC_Delay>
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fb42 	bl	8001640 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbe:	e00f      	b.n	8001fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fb3e 	bl	8001640 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d908      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e146      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	42420000 	.word	0x42420000
 8001fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b92      	ldr	r3, [pc, #584]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e9      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a6 	beq.w	8002146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b8b      	ldr	r3, [pc, #556]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10d      	bne.n	8002026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a87      	ldr	r2, [pc, #540]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	61d3      	str	r3, [r2, #28]
 8002016:	4b85      	ldr	r3, [pc, #532]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b82      	ldr	r3, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x4c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x4c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7e      	ldr	r2, [pc, #504]	; (8002230 <HAL_RCC_OscConfig+0x4c8>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7ff faff 	bl	8001640 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7ff fafb 	bl	8001640 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e103      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b75      	ldr	r3, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x4c8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x312>
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e02d      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x334>
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a69      	ldr	r2, [pc, #420]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a66      	ldr	r2, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	e01c      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d10c      	bne.n	80020be <HAL_RCC_OscConfig+0x356>
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	4b5e      	ldr	r3, [pc, #376]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e00b      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 80020be:	4b5b      	ldr	r3, [pc, #364]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a5a      	ldr	r2, [pc, #360]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b58      	ldr	r3, [pc, #352]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a57      	ldr	r2, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d015      	beq.n	800210a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff faaf 	bl	8001640 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff faab 	bl	8001640 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0b1      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	4b4b      	ldr	r3, [pc, #300]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ee      	beq.n	80020e6 <HAL_RCC_OscConfig+0x37e>
 8002108:	e014      	b.n	8002134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff fa99 	bl	8001640 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff fa95 	bl	8001640 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e09b      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ee      	bne.n	8002112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d105      	bne.n	8002146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8087 	beq.w	800225e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d061      	beq.n	8002220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d146      	bne.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fa69 	bl	8001640 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff fa65 	bl	8001640 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e06d      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219a:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4921      	ldr	r1, [pc, #132]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a19      	ldr	r1, [r3, #32]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	430b      	orrs	r3, r1
 80021be:	491b      	ldr	r1, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fa39 	bl	8001640 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff fa35 	bl	8001640 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e03d      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x46a>
 80021f0:	e035      	b.n	800225e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fa22 	bl	8001640 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fa1e 	bl	8001640 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e026      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_OscConfig+0x4c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x498>
 800221e:	e01e      	b.n	800225e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e019      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
 800222c:	40021000 	.word	0x40021000
 8002230:	40007000 	.word	0x40007000
 8002234:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x500>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d0      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4965      	ldr	r1, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d040      	beq.n	800238c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d115      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e073      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	4b3d      	ldr	r3, [pc, #244]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4936      	ldr	r1, [pc, #216]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235c:	f7ff f970 	bl	8001640 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7ff f96c 	bl	8001640 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e053      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d210      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0207 	bic.w	r2, r3, #7
 80023a2:	4922      	ldr	r1, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	490a      	ldr	r1, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	5ccb      	ldrb	r3, [r1, r3]
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1cc>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff f8ce 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08004854 	.word	0x08004854
 8002438:	20000014 	.word	0x20000014
 800243c:	20000018 	.word	0x20000018

08002440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b490      	push	{r4, r7}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002448:	1d3c      	adds	r4, r7, #4
 800244a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002450:	f240 2301 	movw	r3, #513	; 0x201
 8002454:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	2300      	movs	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d002      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x40>
 800247a:	2b08      	cmp	r3, #8
 800247c:	d003      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x46>
 800247e:	e02b      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002482:	623b      	str	r3, [r7, #32]
      break;
 8002484:	e02b      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	0c9b      	lsrs	r3, r3, #18
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3328      	adds	r3, #40	; 0x28
 8002490:	443b      	add	r3, r7
 8002492:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002496:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	3328      	adds	r3, #40	; 0x28
 80024ae:	443b      	add	r3, r7
 80024b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ba:	fb03 f202 	mul.w	r2, r3, r2
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	e004      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	623b      	str	r3, [r7, #32]
      break;
 80024d6:	e002      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024da:	623b      	str	r3, [r7, #32]
      break;
 80024dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024de:	6a3b      	ldr	r3, [r7, #32]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc90      	pop	{r4, r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	08004844 	.word	0x08004844
 80024f0:	40021000 	.word	0x40021000
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	003d0900 	.word	0x003d0900

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <HAL_RCC_GetHCLKFreq+0x10>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000014 	.word	0x20000014

08002510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002514:	f7ff fff2 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08004864 	.word	0x08004864

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800253c:	f7ff ffde 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	08004864 	.word	0x08004864

08002560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <RCC_Delay+0x34>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <RCC_Delay+0x38>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a5b      	lsrs	r3, r3, #9
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800257c:	bf00      	nop
  }
  while (Delay --);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <RCC_Delay+0x1c>
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000014 	.word	0x20000014
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e041      	b.n	8002632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fe78 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	4619      	mov	r1, r3
 80025da:	4610      	mov	r0, r2
 80025dc:	f000 fc28 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e03a      	b.n	80026ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x58>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267e:	d009      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x58>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x58>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d111      	bne.n	80026b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d010      	beq.n	80026c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	e007      	b.n	80026c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800

080026e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e041      	b.n	8002776 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f839 	bl	800277e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 fb86 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_TIM_PWM_Start+0x24>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e022      	b.n	80027fa <HAL_TIM_PWM_Start+0x6a>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d109      	bne.n	80027ce <HAL_TIM_PWM_Start+0x3e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e015      	b.n	80027fa <HAL_TIM_PWM_Start+0x6a>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d109      	bne.n	80027e8 <HAL_TIM_PWM_Start+0x58>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	bf14      	ite	ne
 80027e0:	2301      	movne	r3, #1
 80027e2:	2300      	moveq	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e008      	b.n	80027fa <HAL_TIM_PWM_Start+0x6a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e05e      	b.n	80028c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <HAL_TIM_PWM_Start+0x82>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002810:	e013      	b.n	800283a <HAL_TIM_PWM_Start+0xaa>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0x92>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002820:	e00b      	b.n	800283a <HAL_TIM_PWM_Start+0xaa>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0xa2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002830:	e003      	b.n	800283a <HAL_TIM_PWM_Start+0xaa>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2201      	movs	r2, #1
 8002840:	6839      	ldr	r1, [r7, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fd74 	bl	8003330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <HAL_TIM_PWM_Start+0x138>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d107      	bne.n	8002862 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <HAL_TIM_PWM_Start+0x138>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00e      	beq.n	800288a <HAL_TIM_PWM_Start+0xfa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d009      	beq.n	800288a <HAL_TIM_PWM_Start+0xfa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_TIM_PWM_Start+0x13c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_TIM_PWM_Start+0xfa>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_TIM_PWM_Start+0x140>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d111      	bne.n	80028ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d010      	beq.n	80028be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	e007      	b.n	80028be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d122      	bne.n	8002930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0202 	mvn.w	r2, #2
 8002900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa6f 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa62 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fa71 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b04      	cmp	r3, #4
 800293c:	d122      	bne.n	8002984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d11b      	bne.n	8002984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0204 	mvn.w	r2, #4
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa45 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa38 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa47 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0208 	mvn.w	r2, #8
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa1b 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fa0e 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fa1d 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0210 	mvn.w	r2, #16
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2208      	movs	r2, #8
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f9f1 	bl	8002dfa <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f9e4 	bl	8002de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f9f3 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0201 	mvn.w	r2, #1
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fd fb82 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a70:	2b80      	cmp	r3, #128	; 0x80
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fce1 	bl	8003446 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9b7 	bl	8002e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0220 	mvn.w	r2, #32
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fcac 	bl	8003434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0ac      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	f200 809f 	bhi.w	8002c4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b0e:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b49 	.word	0x08002b49
 8002b18:	08002c4d 	.word	0x08002c4d
 8002b1c:	08002c4d 	.word	0x08002c4d
 8002b20:	08002c4d 	.word	0x08002c4d
 8002b24:	08002b89 	.word	0x08002b89
 8002b28:	08002c4d 	.word	0x08002c4d
 8002b2c:	08002c4d 	.word	0x08002c4d
 8002b30:	08002c4d 	.word	0x08002c4d
 8002b34:	08002bcb 	.word	0x08002bcb
 8002b38:	08002c4d 	.word	0x08002c4d
 8002b3c:	08002c4d 	.word	0x08002c4d
 8002b40:	08002c4d 	.word	0x08002c4d
 8002b44:	08002c0b 	.word	0x08002c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f9d0 	bl	8002ef4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6999      	ldr	r1, [r3, #24]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]
      break;
 8002b86:	e062      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fa16 	bl	8002fc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6999      	ldr	r1, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	021a      	lsls	r2, r3, #8
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	619a      	str	r2, [r3, #24]
      break;
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fa5f 	bl	8003094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0208 	orr.w	r2, r2, #8
 8002be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0204 	bic.w	r2, r2, #4
 8002bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69d9      	ldr	r1, [r3, #28]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	61da      	str	r2, [r3, #28]
      break;
 8002c08:	e021      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 faa9 	bl	8003168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69d9      	ldr	r1, [r3, #28]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	021a      	lsls	r2, r3, #8
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	61da      	str	r2, [r3, #28]
      break;
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_TIM_ConfigClockSource+0x18>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0b3      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x180>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	d03e      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xd0>
 8002cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb6:	f200 8087 	bhi.w	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	f000 8085 	beq.w	8002dcc <HAL_TIM_ConfigClockSource+0x16c>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	d87f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d01a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xa2>
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d87b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d050      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x116>
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d877      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b50      	cmp	r3, #80	; 0x50
 8002cda:	d03c      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xf6>
 8002cdc:	2b50      	cmp	r3, #80	; 0x50
 8002cde:	d873      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d058      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x136>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d86f      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d064      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cec:	2b30      	cmp	r3, #48	; 0x30
 8002cee:	d86b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d060      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d867      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05c      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d05a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d00:	e062      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f000 faee 	bl	80032f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e04e      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f000 fad7 	bl	80032f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e03b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 fa4e 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	; 0x50
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 faa5 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002d74:	e02b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f000 fa6c 	bl	8003260 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	; 0x60
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fa95 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002d94:	e01b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f000 fa2e 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fa85 	bl	80032be <TIM_ITRx_SetConfig>
      break;
 8002db4:	e00b      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	f000 fa7c 	bl	80032be <TIM_ITRx_SetConfig>
        break;
 8002dc6:	e002      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a29      	ldr	r2, [pc, #164]	; (8002ee8 <TIM_Base_SetConfig+0xb8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <TIM_Base_SetConfig+0x30>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d007      	beq.n	8002e60 <TIM_Base_SetConfig+0x30>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <TIM_Base_SetConfig+0xbc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_Base_SetConfig+0x30>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d108      	bne.n	8002e72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <TIM_Base_SetConfig+0xb8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <TIM_Base_SetConfig+0x62>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e80:	d007      	beq.n	8002e92 <TIM_Base_SetConfig+0x62>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <TIM_Base_SetConfig+0xbc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d003      	beq.n	8002e92 <TIM_Base_SetConfig+0x62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <TIM_Base_SetConfig+0xb8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d103      	bne.n	8002ed8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	615a      	str	r2, [r3, #20]
}
 8002ede:	bf00      	nop
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40012c00 	.word	0x40012c00
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800

08002ef4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f023 0201 	bic.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10c      	bne.n	8002f6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f023 0308 	bic.w	r3, r3, #8
 8002f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a13      	ldr	r2, [pc, #76]	; (8002fbc <TIM_OC1_SetConfig+0xc8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d111      	bne.n	8002f96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40012c00 	.word	0x40012c00

08002fc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0210 	bic.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0320 	bic.w	r3, r3, #32
 800300a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <TIM_OC2_SetConfig+0xd0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10d      	bne.n	800303c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <TIM_OC2_SetConfig+0xd0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d113      	bne.n	800306c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800304a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003052:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	40012c00 	.word	0x40012c00

08003094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <TIM_OC3_SetConfig+0xd0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10d      	bne.n	800310e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800310c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <TIM_OC3_SetConfig+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d113      	bne.n	800313e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800311c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	621a      	str	r2, [r3, #32]
}
 8003158:	bf00      	nop
 800315a:	371c      	adds	r7, #28
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40012c00 	.word	0x40012c00

08003168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	031b      	lsls	r3, r3, #12
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <TIM_OC4_SetConfig+0x98>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d109      	bne.n	80031dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00

08003204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 030a 	bic.w	r3, r3, #10
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 0210 	bic.w	r2, r3, #16
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800328a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	031b      	lsls	r3, r3, #12
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800329c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	f043 0307 	orr.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	609a      	str	r2, [r3, #8]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr

080032f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	431a      	orrs	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4313      	orrs	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e046      	b.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d009      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a12      	ldr	r2, [pc, #72]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10c      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4313      	orrs	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800

08003434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e03f      	b.n	80034ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd ff8c 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fc85 	bl	8003dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695a      	ldr	r2, [r3, #20]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b08a      	sub	sp, #40	; 0x28
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d17c      	bne.n	800360c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_UART_Transmit+0x2c>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e075      	b.n	800360e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_UART_Transmit+0x3e>
 800352c:	2302      	movs	r3, #2
 800352e:	e06e      	b.n	800360e <HAL_UART_Transmit+0x11c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003546:	f7fe f87b 	bl	8001640 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d108      	bne.n	8003574 <HAL_UART_Transmit+0x82>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e003      	b.n	800357c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003584:	e02a      	b.n	80035dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fa38 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e036      	b.n	800360e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3302      	adds	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e007      	b.n	80035ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1cf      	bne.n	8003586 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2140      	movs	r1, #64	; 0x40
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fa08 	bl	8003a06 <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e006      	b.n	800360e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b20      	cmp	r3, #32
 800362e:	d11d      	bne.n	800366c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_UART_Receive_IT+0x26>
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e016      	b.n	800366e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_UART_Receive_IT+0x38>
 800364a:	2302      	movs	r3, #2
 800364c:	e00f      	b.n	800366e <HAL_UART_Receive_IT+0x58>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	461a      	mov	r2, r3
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa19 	bl	8003a9a <UART_Start_Receive_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	e000      	b.n	800366e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	; 0x28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_UART_IRQHandler+0x52>
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fac9 	bl	8003c5a <UART_Receive_IT>
      return;
 80036c8:	e17b      	b.n	80039c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80b1 	beq.w	8003834 <HAL_UART_IRQHandler+0x1bc>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_UART_IRQHandler+0x70>
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80a6 	beq.w	8003834 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <HAL_UART_IRQHandler+0x90>
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f043 0201 	orr.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_UART_IRQHandler+0xb0>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0202 	orr.w	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_UART_IRQHandler+0xd0>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f043 0204 	orr.w	r2, r3, #4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00f      	beq.n	8003772 <HAL_UART_IRQHandler+0xfa>
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <HAL_UART_IRQHandler+0xee>
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f043 0208 	orr.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 811e 	beq.w	80039b8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_UART_IRQHandler+0x11e>
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fa62 	bl	8003c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <HAL_UART_IRQHandler+0x146>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d031      	beq.n	8003822 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f9a4 	bl	8003b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d023      	beq.n	800381a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d013      	beq.n	8003812 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4a76      	ldr	r2, [pc, #472]	; (80039c8 <HAL_UART_IRQHandler+0x350>)
 80037f0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe f874 	bl	80018e4 <HAL_DMA_Abort_IT>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800380c:	4610      	mov	r0, r2
 800380e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e00e      	b.n	8003830 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8e3 	bl	80039de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e00a      	b.n	8003830 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8df 	bl	80039de <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e006      	b.n	8003830 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8db 	bl	80039de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800382e:	e0c3      	b.n	80039b8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	bf00      	nop
    return;
 8003832:	e0c1      	b.n	80039b8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 80a1 	bne.w	8003980 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 809b 	beq.w	8003980 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8095 	beq.w	8003980 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d04e      	beq.n	8003918 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003884:	8a3b      	ldrh	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8098 	beq.w	80039bc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003890:	8a3a      	ldrh	r2, [r7, #16]
 8003892:	429a      	cmp	r2, r3
 8003894:	f080 8092 	bcs.w	80039bc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8a3a      	ldrh	r2, [r7, #16]
 800389c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d02b      	beq.n	8003900 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0210 	bic.w	r2, r2, #16
 80038f4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd ffb7 	bl	800186e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003908:	b29b      	uxth	r3, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f86d 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003916:	e051      	b.n	80039bc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003920:	b29b      	uxth	r3, r3
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d047      	beq.n	80039c0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003930:	8a7b      	ldrh	r3, [r7, #18]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003944:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0210 	bic.w	r2, r2, #16
 8003972:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003974:	8a7b      	ldrh	r3, [r7, #18]
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f839 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800397e:	e01f      	b.n	80039c0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_UART_IRQHandler+0x324>
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f8f9 	bl	8003b8c <UART_Transmit_IT>
    return;
 800399a:	e012      	b.n	80039c2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <HAL_UART_IRQHandler+0x34a>
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f93a 	bl	8003c2a <UART_EndTransmit_IT>
    return;
 80039b6:	e004      	b.n	80039c2 <HAL_UART_IRQHandler+0x34a>
    return;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039c0:	bf00      	nop
  }
}
 80039c2:	3728      	adds	r7, #40	; 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	08003b65 	.word	0x08003b65

080039cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a16:	e02c      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d028      	beq.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a26:	f7fd fe0b 	bl	8001640 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d21d      	bcs.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00f      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d0c3      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0220 	orr.w	r2, r2, #32
 8003afe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0210 	bic.w	r2, r2, #16
 8003b4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff ff2d 	bl	80039de <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b21      	cmp	r3, #33	; 0x21
 8003b9e:	d13e      	bne.n	8003c1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d114      	bne.n	8003bd4 <UART_Transmit_IT+0x48>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]
 8003bd2:	e008      	b.n	8003be6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	1c59      	adds	r1, r3, #1
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6211      	str	r1, [r2, #32]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10f      	bne.n	8003c1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr

08003c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff febe 	bl	80039cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b22      	cmp	r3, #34	; 0x22
 8003c6c:	f040 8099 	bne.w	8003da2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d117      	bne.n	8003caa <UART_Receive_IT+0x50>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d113      	bne.n	8003caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca8:	e026      	b.n	8003cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d007      	beq.n	8003cce <UART_Receive_IT+0x74>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <UART_Receive_IT+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e008      	b.n	8003cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4619      	mov	r1, r3
 8003d06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d148      	bne.n	8003d9e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0220 	bic.w	r2, r2, #32
 8003d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d123      	bne.n	8003d94 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0210 	bic.w	r2, r2, #16
 8003d60:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d10a      	bne.n	8003d86 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fe2f 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
 8003d92:	e002      	b.n	8003d9a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fc f9f3 	bl	8000180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e002      	b.n	8003da4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003de6:	f023 030c 	bic.w	r3, r3, #12
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <UART_SetConfig+0x114>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fb90 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	e002      	b.n	8003e22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7fe fb78 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8003e20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009a      	lsls	r2, r3, #2
 8003e2c:	441a      	add	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	4a22      	ldr	r2, [pc, #136]	; (8003ec4 <UART_SetConfig+0x118>)
 8003e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	0119      	lsls	r1, r3, #4
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <UART_SetConfig+0x118>)
 8003e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2064      	movs	r0, #100	; 0x64
 8003e62:	fb00 f303 	mul.w	r3, r0, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <UART_SetConfig+0x118>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	4419      	add	r1, r3
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <UART_SetConfig+0x118>)
 8003e92:	fba3 0302 	umull	r0, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2064      	movs	r0, #100	; 0x64
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	3332      	adds	r3, #50	; 0x32
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <UART_SetConfig+0x118>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40013800 	.word	0x40013800
 8003ec4:	51eb851f 	.word	0x51eb851f

08003ec8 <__errno>:
 8003ec8:	4b01      	ldr	r3, [pc, #4]	; (8003ed0 <__errno+0x8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000020 	.word	0x20000020

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	2600      	movs	r6, #0
 8003ed8:	4d0c      	ldr	r5, [pc, #48]	; (8003f0c <__libc_init_array+0x38>)
 8003eda:	4c0d      	ldr	r4, [pc, #52]	; (8003f10 <__libc_init_array+0x3c>)
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	42a6      	cmp	r6, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	f000 fc9c 	bl	8004820 <_init>
 8003ee8:	2600      	movs	r6, #0
 8003eea:	4d0a      	ldr	r5, [pc, #40]	; (8003f14 <__libc_init_array+0x40>)
 8003eec:	4c0a      	ldr	r4, [pc, #40]	; (8003f18 <__libc_init_array+0x44>)
 8003eee:	1b64      	subs	r4, r4, r5
 8003ef0:	10a4      	asrs	r4, r4, #2
 8003ef2:	42a6      	cmp	r6, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efc:	4798      	blx	r3
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f06:	4798      	blx	r3
 8003f08:	3601      	adds	r6, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	080048a0 	.word	0x080048a0
 8003f10:	080048a0 	.word	0x080048a0
 8003f14:	080048a0 	.word	0x080048a0
 8003f18:	080048a4 	.word	0x080048a4

08003f1c <memset>:
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4402      	add	r2, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <siprintf>:
 8003f2c:	b40e      	push	{r1, r2, r3}
 8003f2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f32:	b500      	push	{lr}
 8003f34:	b09c      	sub	sp, #112	; 0x70
 8003f36:	ab1d      	add	r3, sp, #116	; 0x74
 8003f38:	9002      	str	r0, [sp, #8]
 8003f3a:	9006      	str	r0, [sp, #24]
 8003f3c:	9107      	str	r1, [sp, #28]
 8003f3e:	9104      	str	r1, [sp, #16]
 8003f40:	4808      	ldr	r0, [pc, #32]	; (8003f64 <siprintf+0x38>)
 8003f42:	4909      	ldr	r1, [pc, #36]	; (8003f68 <siprintf+0x3c>)
 8003f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f48:	9105      	str	r1, [sp, #20]
 8003f4a:	6800      	ldr	r0, [r0, #0]
 8003f4c:	a902      	add	r1, sp, #8
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	f000 f868 	bl	8004024 <_svfiprintf_r>
 8003f54:	2200      	movs	r2, #0
 8003f56:	9b02      	ldr	r3, [sp, #8]
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	b01c      	add	sp, #112	; 0x70
 8003f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f60:	b003      	add	sp, #12
 8003f62:	4770      	bx	lr
 8003f64:	20000020 	.word	0x20000020
 8003f68:	ffff0208 	.word	0xffff0208

08003f6c <__ssputs_r>:
 8003f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	688e      	ldr	r6, [r1, #8]
 8003f72:	4682      	mov	sl, r0
 8003f74:	429e      	cmp	r6, r3
 8003f76:	460c      	mov	r4, r1
 8003f78:	4690      	mov	r8, r2
 8003f7a:	461f      	mov	r7, r3
 8003f7c:	d838      	bhi.n	8003ff0 <__ssputs_r+0x84>
 8003f7e:	898a      	ldrh	r2, [r1, #12]
 8003f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f84:	d032      	beq.n	8003fec <__ssputs_r+0x80>
 8003f86:	6825      	ldr	r5, [r4, #0]
 8003f88:	6909      	ldr	r1, [r1, #16]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	eba5 0901 	sub.w	r9, r5, r1
 8003f90:	6965      	ldr	r5, [r4, #20]
 8003f92:	444b      	add	r3, r9
 8003f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f9c:	106d      	asrs	r5, r5, #1
 8003f9e:	429d      	cmp	r5, r3
 8003fa0:	bf38      	it	cc
 8003fa2:	461d      	movcc	r5, r3
 8003fa4:	0553      	lsls	r3, r2, #21
 8003fa6:	d531      	bpl.n	800400c <__ssputs_r+0xa0>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f000 fb6f 	bl	800468c <_malloc_r>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	b950      	cbnz	r0, 8003fc8 <__ssputs_r+0x5c>
 8003fb2:	230c      	movs	r3, #12
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	f8ca 3000 	str.w	r3, [sl]
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc2:	81a3      	strh	r3, [r4, #12]
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	464a      	mov	r2, r9
 8003fca:	6921      	ldr	r1, [r4, #16]
 8003fcc:	f000 face 	bl	800456c <memcpy>
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6126      	str	r6, [r4, #16]
 8003fde:	444e      	add	r6, r9
 8003fe0:	6026      	str	r6, [r4, #0]
 8003fe2:	463e      	mov	r6, r7
 8003fe4:	6165      	str	r5, [r4, #20]
 8003fe6:	eba5 0509 	sub.w	r5, r5, r9
 8003fea:	60a5      	str	r5, [r4, #8]
 8003fec:	42be      	cmp	r6, r7
 8003fee:	d900      	bls.n	8003ff2 <__ssputs_r+0x86>
 8003ff0:	463e      	mov	r6, r7
 8003ff2:	4632      	mov	r2, r6
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	6820      	ldr	r0, [r4, #0]
 8003ff8:	f000 fac6 	bl	8004588 <memmove>
 8003ffc:	68a3      	ldr	r3, [r4, #8]
 8003ffe:	2000      	movs	r0, #0
 8004000:	1b9b      	subs	r3, r3, r6
 8004002:	60a3      	str	r3, [r4, #8]
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	4433      	add	r3, r6
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	e7db      	b.n	8003fc4 <__ssputs_r+0x58>
 800400c:	462a      	mov	r2, r5
 800400e:	f000 fbb1 	bl	8004774 <_realloc_r>
 8004012:	4606      	mov	r6, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d1e1      	bne.n	8003fdc <__ssputs_r+0x70>
 8004018:	4650      	mov	r0, sl
 800401a:	6921      	ldr	r1, [r4, #16]
 800401c:	f000 face 	bl	80045bc <_free_r>
 8004020:	e7c7      	b.n	8003fb2 <__ssputs_r+0x46>
	...

08004024 <_svfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	4698      	mov	r8, r3
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	4607      	mov	r7, r0
 800402e:	061b      	lsls	r3, r3, #24
 8004030:	460d      	mov	r5, r1
 8004032:	4614      	mov	r4, r2
 8004034:	b09d      	sub	sp, #116	; 0x74
 8004036:	d50e      	bpl.n	8004056 <_svfiprintf_r+0x32>
 8004038:	690b      	ldr	r3, [r1, #16]
 800403a:	b963      	cbnz	r3, 8004056 <_svfiprintf_r+0x32>
 800403c:	2140      	movs	r1, #64	; 0x40
 800403e:	f000 fb25 	bl	800468c <_malloc_r>
 8004042:	6028      	str	r0, [r5, #0]
 8004044:	6128      	str	r0, [r5, #16]
 8004046:	b920      	cbnz	r0, 8004052 <_svfiprintf_r+0x2e>
 8004048:	230c      	movs	r3, #12
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e0d1      	b.n	80041f6 <_svfiprintf_r+0x1d2>
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	616b      	str	r3, [r5, #20]
 8004056:	2300      	movs	r3, #0
 8004058:	9309      	str	r3, [sp, #36]	; 0x24
 800405a:	2320      	movs	r3, #32
 800405c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004060:	2330      	movs	r3, #48	; 0x30
 8004062:	f04f 0901 	mov.w	r9, #1
 8004066:	f8cd 800c 	str.w	r8, [sp, #12]
 800406a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004210 <_svfiprintf_r+0x1ec>
 800406e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004072:	4623      	mov	r3, r4
 8004074:	469a      	mov	sl, r3
 8004076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800407a:	b10a      	cbz	r2, 8004080 <_svfiprintf_r+0x5c>
 800407c:	2a25      	cmp	r2, #37	; 0x25
 800407e:	d1f9      	bne.n	8004074 <_svfiprintf_r+0x50>
 8004080:	ebba 0b04 	subs.w	fp, sl, r4
 8004084:	d00b      	beq.n	800409e <_svfiprintf_r+0x7a>
 8004086:	465b      	mov	r3, fp
 8004088:	4622      	mov	r2, r4
 800408a:	4629      	mov	r1, r5
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff ff6d 	bl	8003f6c <__ssputs_r>
 8004092:	3001      	adds	r0, #1
 8004094:	f000 80aa 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 8004098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800409a:	445a      	add	r2, fp
 800409c:	9209      	str	r2, [sp, #36]	; 0x24
 800409e:	f89a 3000 	ldrb.w	r3, [sl]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 80a2 	beq.w	80041ec <_svfiprintf_r+0x1c8>
 80040a8:	2300      	movs	r3, #0
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b2:	f10a 0a01 	add.w	sl, sl, #1
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	9307      	str	r3, [sp, #28]
 80040ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040be:	931a      	str	r3, [sp, #104]	; 0x68
 80040c0:	4654      	mov	r4, sl
 80040c2:	2205      	movs	r2, #5
 80040c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c8:	4851      	ldr	r0, [pc, #324]	; (8004210 <_svfiprintf_r+0x1ec>)
 80040ca:	f000 fa41 	bl	8004550 <memchr>
 80040ce:	9a04      	ldr	r2, [sp, #16]
 80040d0:	b9d8      	cbnz	r0, 800410a <_svfiprintf_r+0xe6>
 80040d2:	06d0      	lsls	r0, r2, #27
 80040d4:	bf44      	itt	mi
 80040d6:	2320      	movmi	r3, #32
 80040d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040dc:	0711      	lsls	r1, r2, #28
 80040de:	bf44      	itt	mi
 80040e0:	232b      	movmi	r3, #43	; 0x2b
 80040e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e6:	f89a 3000 	ldrb.w	r3, [sl]
 80040ea:	2b2a      	cmp	r3, #42	; 0x2a
 80040ec:	d015      	beq.n	800411a <_svfiprintf_r+0xf6>
 80040ee:	4654      	mov	r4, sl
 80040f0:	2000      	movs	r0, #0
 80040f2:	f04f 0c0a 	mov.w	ip, #10
 80040f6:	9a07      	ldr	r2, [sp, #28]
 80040f8:	4621      	mov	r1, r4
 80040fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040fe:	3b30      	subs	r3, #48	; 0x30
 8004100:	2b09      	cmp	r3, #9
 8004102:	d94e      	bls.n	80041a2 <_svfiprintf_r+0x17e>
 8004104:	b1b0      	cbz	r0, 8004134 <_svfiprintf_r+0x110>
 8004106:	9207      	str	r2, [sp, #28]
 8004108:	e014      	b.n	8004134 <_svfiprintf_r+0x110>
 800410a:	eba0 0308 	sub.w	r3, r0, r8
 800410e:	fa09 f303 	lsl.w	r3, r9, r3
 8004112:	4313      	orrs	r3, r2
 8004114:	46a2      	mov	sl, r4
 8004116:	9304      	str	r3, [sp, #16]
 8004118:	e7d2      	b.n	80040c0 <_svfiprintf_r+0x9c>
 800411a:	9b03      	ldr	r3, [sp, #12]
 800411c:	1d19      	adds	r1, r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	9103      	str	r1, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	bfbb      	ittet	lt
 8004126:	425b      	neglt	r3, r3
 8004128:	f042 0202 	orrlt.w	r2, r2, #2
 800412c:	9307      	strge	r3, [sp, #28]
 800412e:	9307      	strlt	r3, [sp, #28]
 8004130:	bfb8      	it	lt
 8004132:	9204      	strlt	r2, [sp, #16]
 8004134:	7823      	ldrb	r3, [r4, #0]
 8004136:	2b2e      	cmp	r3, #46	; 0x2e
 8004138:	d10c      	bne.n	8004154 <_svfiprintf_r+0x130>
 800413a:	7863      	ldrb	r3, [r4, #1]
 800413c:	2b2a      	cmp	r3, #42	; 0x2a
 800413e:	d135      	bne.n	80041ac <_svfiprintf_r+0x188>
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	3402      	adds	r4, #2
 8004144:	1d1a      	adds	r2, r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	9203      	str	r2, [sp, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	bfb8      	it	lt
 800414e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004214 <_svfiprintf_r+0x1f0>
 8004158:	2203      	movs	r2, #3
 800415a:	4650      	mov	r0, sl
 800415c:	7821      	ldrb	r1, [r4, #0]
 800415e:	f000 f9f7 	bl	8004550 <memchr>
 8004162:	b140      	cbz	r0, 8004176 <_svfiprintf_r+0x152>
 8004164:	2340      	movs	r3, #64	; 0x40
 8004166:	eba0 000a 	sub.w	r0, r0, sl
 800416a:	fa03 f000 	lsl.w	r0, r3, r0
 800416e:	9b04      	ldr	r3, [sp, #16]
 8004170:	3401      	adds	r4, #1
 8004172:	4303      	orrs	r3, r0
 8004174:	9304      	str	r3, [sp, #16]
 8004176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417a:	2206      	movs	r2, #6
 800417c:	4826      	ldr	r0, [pc, #152]	; (8004218 <_svfiprintf_r+0x1f4>)
 800417e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004182:	f000 f9e5 	bl	8004550 <memchr>
 8004186:	2800      	cmp	r0, #0
 8004188:	d038      	beq.n	80041fc <_svfiprintf_r+0x1d8>
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <_svfiprintf_r+0x1f8>)
 800418c:	bb1b      	cbnz	r3, 80041d6 <_svfiprintf_r+0x1b2>
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	3307      	adds	r3, #7
 8004192:	f023 0307 	bic.w	r3, r3, #7
 8004196:	3308      	adds	r3, #8
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800419c:	4433      	add	r3, r6
 800419e:	9309      	str	r3, [sp, #36]	; 0x24
 80041a0:	e767      	b.n	8004072 <_svfiprintf_r+0x4e>
 80041a2:	460c      	mov	r4, r1
 80041a4:	2001      	movs	r0, #1
 80041a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041aa:	e7a5      	b.n	80040f8 <_svfiprintf_r+0xd4>
 80041ac:	2300      	movs	r3, #0
 80041ae:	f04f 0c0a 	mov.w	ip, #10
 80041b2:	4619      	mov	r1, r3
 80041b4:	3401      	adds	r4, #1
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	4620      	mov	r0, r4
 80041ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041be:	3a30      	subs	r2, #48	; 0x30
 80041c0:	2a09      	cmp	r2, #9
 80041c2:	d903      	bls.n	80041cc <_svfiprintf_r+0x1a8>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0c5      	beq.n	8004154 <_svfiprintf_r+0x130>
 80041c8:	9105      	str	r1, [sp, #20]
 80041ca:	e7c3      	b.n	8004154 <_svfiprintf_r+0x130>
 80041cc:	4604      	mov	r4, r0
 80041ce:	2301      	movs	r3, #1
 80041d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d4:	e7f0      	b.n	80041b8 <_svfiprintf_r+0x194>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4638      	mov	r0, r7
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <_svfiprintf_r+0x1fc>)
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	f3af 8000 	nop.w
 80041e6:	1c42      	adds	r2, r0, #1
 80041e8:	4606      	mov	r6, r0
 80041ea:	d1d6      	bne.n	800419a <_svfiprintf_r+0x176>
 80041ec:	89ab      	ldrh	r3, [r5, #12]
 80041ee:	065b      	lsls	r3, r3, #25
 80041f0:	f53f af2c 	bmi.w	800404c <_svfiprintf_r+0x28>
 80041f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041f6:	b01d      	add	sp, #116	; 0x74
 80041f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fc:	ab03      	add	r3, sp, #12
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	462a      	mov	r2, r5
 8004202:	4638      	mov	r0, r7
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <_svfiprintf_r+0x1fc>)
 8004206:	a904      	add	r1, sp, #16
 8004208:	f000 f87c 	bl	8004304 <_printf_i>
 800420c:	e7eb      	b.n	80041e6 <_svfiprintf_r+0x1c2>
 800420e:	bf00      	nop
 8004210:	0800486c 	.word	0x0800486c
 8004214:	08004872 	.word	0x08004872
 8004218:	08004876 	.word	0x08004876
 800421c:	00000000 	.word	0x00000000
 8004220:	08003f6d 	.word	0x08003f6d

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4616      	mov	r6, r2
 800422a:	4699      	mov	r9, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	690b      	ldr	r3, [r1, #16]
 8004230:	4607      	mov	r7, r0
 8004232:	4293      	cmp	r3, r2
 8004234:	bfb8      	it	lt
 8004236:	4613      	movlt	r3, r2
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800423e:	460c      	mov	r4, r1
 8004240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004244:	b10a      	cbz	r2, 800424a <_printf_common+0x26>
 8004246:	3301      	adds	r3, #1
 8004248:	6033      	str	r3, [r6, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0699      	lsls	r1, r3, #26
 800424e:	bf42      	ittt	mi
 8004250:	6833      	ldrmi	r3, [r6, #0]
 8004252:	3302      	addmi	r3, #2
 8004254:	6033      	strmi	r3, [r6, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	f015 0506 	ands.w	r5, r5, #6
 800425c:	d106      	bne.n	800426c <_printf_common+0x48>
 800425e:	f104 0a19 	add.w	sl, r4, #25
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	6832      	ldr	r2, [r6, #0]
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	42ab      	cmp	r3, r5
 800426a:	dc28      	bgt.n	80042be <_printf_common+0x9a>
 800426c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004270:	1e13      	subs	r3, r2, #0
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	bf18      	it	ne
 8004276:	2301      	movne	r3, #1
 8004278:	0692      	lsls	r2, r2, #26
 800427a:	d42d      	bmi.n	80042d8 <_printf_common+0xb4>
 800427c:	4649      	mov	r1, r9
 800427e:	4638      	mov	r0, r7
 8004280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d020      	beq.n	80042cc <_printf_common+0xa8>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	68e5      	ldr	r5, [r4, #12]
 800428e:	f003 0306 	and.w	r3, r3, #6
 8004292:	2b04      	cmp	r3, #4
 8004294:	bf18      	it	ne
 8004296:	2500      	movne	r5, #0
 8004298:	6832      	ldr	r2, [r6, #0]
 800429a:	f04f 0600 	mov.w	r6, #0
 800429e:	68a3      	ldr	r3, [r4, #8]
 80042a0:	bf08      	it	eq
 80042a2:	1aad      	subeq	r5, r5, r2
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	bf08      	it	eq
 80042a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bfc4      	itt	gt
 80042b0:	1a9b      	subgt	r3, r3, r2
 80042b2:	18ed      	addgt	r5, r5, r3
 80042b4:	341a      	adds	r4, #26
 80042b6:	42b5      	cmp	r5, r6
 80042b8:	d11a      	bne.n	80042f0 <_printf_common+0xcc>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e008      	b.n	80042d0 <_printf_common+0xac>
 80042be:	2301      	movs	r3, #1
 80042c0:	4652      	mov	r2, sl
 80042c2:	4649      	mov	r1, r9
 80042c4:	4638      	mov	r0, r7
 80042c6:	47c0      	blx	r8
 80042c8:	3001      	adds	r0, #1
 80042ca:	d103      	bne.n	80042d4 <_printf_common+0xb0>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	3501      	adds	r5, #1
 80042d6:	e7c4      	b.n	8004262 <_printf_common+0x3e>
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	18e1      	adds	r1, r4, r3
 80042dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e6:	4422      	add	r2, r4
 80042e8:	3302      	adds	r3, #2
 80042ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ee:	e7c5      	b.n	800427c <_printf_common+0x58>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4622      	mov	r2, r4
 80042f4:	4649      	mov	r1, r9
 80042f6:	4638      	mov	r0, r7
 80042f8:	47c0      	blx	r8
 80042fa:	3001      	adds	r0, #1
 80042fc:	d0e6      	beq.n	80042cc <_printf_common+0xa8>
 80042fe:	3601      	adds	r6, #1
 8004300:	e7d9      	b.n	80042b6 <_printf_common+0x92>
	...

08004304 <_printf_i>:
 8004304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	7e0f      	ldrb	r7, [r1, #24]
 800430a:	4691      	mov	r9, r2
 800430c:	2f78      	cmp	r7, #120	; 0x78
 800430e:	4680      	mov	r8, r0
 8004310:	460c      	mov	r4, r1
 8004312:	469a      	mov	sl, r3
 8004314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800431a:	d807      	bhi.n	800432c <_printf_i+0x28>
 800431c:	2f62      	cmp	r7, #98	; 0x62
 800431e:	d80a      	bhi.n	8004336 <_printf_i+0x32>
 8004320:	2f00      	cmp	r7, #0
 8004322:	f000 80d9 	beq.w	80044d8 <_printf_i+0x1d4>
 8004326:	2f58      	cmp	r7, #88	; 0x58
 8004328:	f000 80a4 	beq.w	8004474 <_printf_i+0x170>
 800432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004334:	e03a      	b.n	80043ac <_printf_i+0xa8>
 8004336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800433a:	2b15      	cmp	r3, #21
 800433c:	d8f6      	bhi.n	800432c <_printf_i+0x28>
 800433e:	a101      	add	r1, pc, #4	; (adr r1, 8004344 <_printf_i+0x40>)
 8004340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004344:	0800439d 	.word	0x0800439d
 8004348:	080043b1 	.word	0x080043b1
 800434c:	0800432d 	.word	0x0800432d
 8004350:	0800432d 	.word	0x0800432d
 8004354:	0800432d 	.word	0x0800432d
 8004358:	0800432d 	.word	0x0800432d
 800435c:	080043b1 	.word	0x080043b1
 8004360:	0800432d 	.word	0x0800432d
 8004364:	0800432d 	.word	0x0800432d
 8004368:	0800432d 	.word	0x0800432d
 800436c:	0800432d 	.word	0x0800432d
 8004370:	080044bf 	.word	0x080044bf
 8004374:	080043e1 	.word	0x080043e1
 8004378:	080044a1 	.word	0x080044a1
 800437c:	0800432d 	.word	0x0800432d
 8004380:	0800432d 	.word	0x0800432d
 8004384:	080044e1 	.word	0x080044e1
 8004388:	0800432d 	.word	0x0800432d
 800438c:	080043e1 	.word	0x080043e1
 8004390:	0800432d 	.word	0x0800432d
 8004394:	0800432d 	.word	0x0800432d
 8004398:	080044a9 	.word	0x080044a9
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0a4      	b.n	80044fa <_printf_i+0x1f6>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	6829      	ldr	r1, [r5, #0]
 80043b4:	0606      	lsls	r6, r0, #24
 80043b6:	f101 0304 	add.w	r3, r1, #4
 80043ba:	d50a      	bpl.n	80043d2 <_printf_i+0xce>
 80043bc:	680e      	ldr	r6, [r1, #0]
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	2e00      	cmp	r6, #0
 80043c2:	da03      	bge.n	80043cc <_printf_i+0xc8>
 80043c4:	232d      	movs	r3, #45	; 0x2d
 80043c6:	4276      	negs	r6, r6
 80043c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043cc:	230a      	movs	r3, #10
 80043ce:	485e      	ldr	r0, [pc, #376]	; (8004548 <_printf_i+0x244>)
 80043d0:	e019      	b.n	8004406 <_printf_i+0x102>
 80043d2:	680e      	ldr	r6, [r1, #0]
 80043d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	bf18      	it	ne
 80043dc:	b236      	sxthne	r6, r6
 80043de:	e7ef      	b.n	80043c0 <_printf_i+0xbc>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	1d19      	adds	r1, r3, #4
 80043e6:	6029      	str	r1, [r5, #0]
 80043e8:	0601      	lsls	r1, r0, #24
 80043ea:	d501      	bpl.n	80043f0 <_printf_i+0xec>
 80043ec:	681e      	ldr	r6, [r3, #0]
 80043ee:	e002      	b.n	80043f6 <_printf_i+0xf2>
 80043f0:	0646      	lsls	r6, r0, #25
 80043f2:	d5fb      	bpl.n	80043ec <_printf_i+0xe8>
 80043f4:	881e      	ldrh	r6, [r3, #0]
 80043f6:	2f6f      	cmp	r7, #111	; 0x6f
 80043f8:	bf0c      	ite	eq
 80043fa:	2308      	moveq	r3, #8
 80043fc:	230a      	movne	r3, #10
 80043fe:	4852      	ldr	r0, [pc, #328]	; (8004548 <_printf_i+0x244>)
 8004400:	2100      	movs	r1, #0
 8004402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004406:	6865      	ldr	r5, [r4, #4]
 8004408:	2d00      	cmp	r5, #0
 800440a:	bfa8      	it	ge
 800440c:	6821      	ldrge	r1, [r4, #0]
 800440e:	60a5      	str	r5, [r4, #8]
 8004410:	bfa4      	itt	ge
 8004412:	f021 0104 	bicge.w	r1, r1, #4
 8004416:	6021      	strge	r1, [r4, #0]
 8004418:	b90e      	cbnz	r6, 800441e <_printf_i+0x11a>
 800441a:	2d00      	cmp	r5, #0
 800441c:	d04d      	beq.n	80044ba <_printf_i+0x1b6>
 800441e:	4615      	mov	r5, r2
 8004420:	fbb6 f1f3 	udiv	r1, r6, r3
 8004424:	fb03 6711 	mls	r7, r3, r1, r6
 8004428:	5dc7      	ldrb	r7, [r0, r7]
 800442a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800442e:	4637      	mov	r7, r6
 8004430:	42bb      	cmp	r3, r7
 8004432:	460e      	mov	r6, r1
 8004434:	d9f4      	bls.n	8004420 <_printf_i+0x11c>
 8004436:	2b08      	cmp	r3, #8
 8004438:	d10b      	bne.n	8004452 <_printf_i+0x14e>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	07de      	lsls	r6, r3, #31
 800443e:	d508      	bpl.n	8004452 <_printf_i+0x14e>
 8004440:	6923      	ldr	r3, [r4, #16]
 8004442:	6861      	ldr	r1, [r4, #4]
 8004444:	4299      	cmp	r1, r3
 8004446:	bfde      	ittt	le
 8004448:	2330      	movle	r3, #48	; 0x30
 800444a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800444e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004452:	1b52      	subs	r2, r2, r5
 8004454:	6122      	str	r2, [r4, #16]
 8004456:	464b      	mov	r3, r9
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f8cd a000 	str.w	sl, [sp]
 8004460:	aa03      	add	r2, sp, #12
 8004462:	f7ff fedf 	bl	8004224 <_printf_common>
 8004466:	3001      	adds	r0, #1
 8004468:	d14c      	bne.n	8004504 <_printf_i+0x200>
 800446a:	f04f 30ff 	mov.w	r0, #4294967295
 800446e:	b004      	add	sp, #16
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	4834      	ldr	r0, [pc, #208]	; (8004548 <_printf_i+0x244>)
 8004476:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800447a:	6829      	ldr	r1, [r5, #0]
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	061d      	lsls	r5, r3, #24
 8004486:	d514      	bpl.n	80044b2 <_printf_i+0x1ae>
 8004488:	07df      	lsls	r7, r3, #31
 800448a:	bf44      	itt	mi
 800448c:	f043 0320 	orrmi.w	r3, r3, #32
 8004490:	6023      	strmi	r3, [r4, #0]
 8004492:	b91e      	cbnz	r6, 800449c <_printf_i+0x198>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	f023 0320 	bic.w	r3, r3, #32
 800449a:	6023      	str	r3, [r4, #0]
 800449c:	2310      	movs	r3, #16
 800449e:	e7af      	b.n	8004400 <_printf_i+0xfc>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f043 0320 	orr.w	r3, r3, #32
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	2378      	movs	r3, #120	; 0x78
 80044aa:	4828      	ldr	r0, [pc, #160]	; (800454c <_printf_i+0x248>)
 80044ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044b0:	e7e3      	b.n	800447a <_printf_i+0x176>
 80044b2:	0659      	lsls	r1, r3, #25
 80044b4:	bf48      	it	mi
 80044b6:	b2b6      	uxthmi	r6, r6
 80044b8:	e7e6      	b.n	8004488 <_printf_i+0x184>
 80044ba:	4615      	mov	r5, r2
 80044bc:	e7bb      	b.n	8004436 <_printf_i+0x132>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	6826      	ldr	r6, [r4, #0]
 80044c2:	1d18      	adds	r0, r3, #4
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	6028      	str	r0, [r5, #0]
 80044c8:	0635      	lsls	r5, r6, #24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	d501      	bpl.n	80044d2 <_printf_i+0x1ce>
 80044ce:	6019      	str	r1, [r3, #0]
 80044d0:	e002      	b.n	80044d8 <_printf_i+0x1d4>
 80044d2:	0670      	lsls	r0, r6, #25
 80044d4:	d5fb      	bpl.n	80044ce <_printf_i+0x1ca>
 80044d6:	8019      	strh	r1, [r3, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	4615      	mov	r5, r2
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	e7ba      	b.n	8004456 <_printf_i+0x152>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	2100      	movs	r1, #0
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	602a      	str	r2, [r5, #0]
 80044e8:	681d      	ldr	r5, [r3, #0]
 80044ea:	6862      	ldr	r2, [r4, #4]
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 f82f 	bl	8004550 <memchr>
 80044f2:	b108      	cbz	r0, 80044f8 <_printf_i+0x1f4>
 80044f4:	1b40      	subs	r0, r0, r5
 80044f6:	6060      	str	r0, [r4, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	2300      	movs	r3, #0
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004502:	e7a8      	b.n	8004456 <_printf_i+0x152>
 8004504:	462a      	mov	r2, r5
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	6923      	ldr	r3, [r4, #16]
 800450c:	47d0      	blx	sl
 800450e:	3001      	adds	r0, #1
 8004510:	d0ab      	beq.n	800446a <_printf_i+0x166>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	079b      	lsls	r3, r3, #30
 8004516:	d413      	bmi.n	8004540 <_printf_i+0x23c>
 8004518:	68e0      	ldr	r0, [r4, #12]
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	4298      	cmp	r0, r3
 800451e:	bfb8      	it	lt
 8004520:	4618      	movlt	r0, r3
 8004522:	e7a4      	b.n	800446e <_printf_i+0x16a>
 8004524:	2301      	movs	r3, #1
 8004526:	4632      	mov	r2, r6
 8004528:	4649      	mov	r1, r9
 800452a:	4640      	mov	r0, r8
 800452c:	47d0      	blx	sl
 800452e:	3001      	adds	r0, #1
 8004530:	d09b      	beq.n	800446a <_printf_i+0x166>
 8004532:	3501      	adds	r5, #1
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	9903      	ldr	r1, [sp, #12]
 8004538:	1a5b      	subs	r3, r3, r1
 800453a:	42ab      	cmp	r3, r5
 800453c:	dcf2      	bgt.n	8004524 <_printf_i+0x220>
 800453e:	e7eb      	b.n	8004518 <_printf_i+0x214>
 8004540:	2500      	movs	r5, #0
 8004542:	f104 0619 	add.w	r6, r4, #25
 8004546:	e7f5      	b.n	8004534 <_printf_i+0x230>
 8004548:	0800487d 	.word	0x0800487d
 800454c:	0800488e 	.word	0x0800488e

08004550 <memchr>:
 8004550:	4603      	mov	r3, r0
 8004552:	b510      	push	{r4, lr}
 8004554:	b2c9      	uxtb	r1, r1
 8004556:	4402      	add	r2, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	4618      	mov	r0, r3
 800455c:	d101      	bne.n	8004562 <memchr+0x12>
 800455e:	2000      	movs	r0, #0
 8004560:	e003      	b.n	800456a <memchr+0x1a>
 8004562:	7804      	ldrb	r4, [r0, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	428c      	cmp	r4, r1
 8004568:	d1f6      	bne.n	8004558 <memchr+0x8>
 800456a:	bd10      	pop	{r4, pc}

0800456c <memcpy>:
 800456c:	440a      	add	r2, r1
 800456e:	4291      	cmp	r1, r2
 8004570:	f100 33ff 	add.w	r3, r0, #4294967295
 8004574:	d100      	bne.n	8004578 <memcpy+0xc>
 8004576:	4770      	bx	lr
 8004578:	b510      	push	{r4, lr}
 800457a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457e:	4291      	cmp	r1, r2
 8004580:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004584:	d1f9      	bne.n	800457a <memcpy+0xe>
 8004586:	bd10      	pop	{r4, pc}

08004588 <memmove>:
 8004588:	4288      	cmp	r0, r1
 800458a:	b510      	push	{r4, lr}
 800458c:	eb01 0402 	add.w	r4, r1, r2
 8004590:	d902      	bls.n	8004598 <memmove+0x10>
 8004592:	4284      	cmp	r4, r0
 8004594:	4623      	mov	r3, r4
 8004596:	d807      	bhi.n	80045a8 <memmove+0x20>
 8004598:	1e43      	subs	r3, r0, #1
 800459a:	42a1      	cmp	r1, r4
 800459c:	d008      	beq.n	80045b0 <memmove+0x28>
 800459e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a6:	e7f8      	b.n	800459a <memmove+0x12>
 80045a8:	4601      	mov	r1, r0
 80045aa:	4402      	add	r2, r0
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d100      	bne.n	80045b2 <memmove+0x2a>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ba:	e7f7      	b.n	80045ac <memmove+0x24>

080045bc <_free_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4605      	mov	r5, r0
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d040      	beq.n	8004646 <_free_r+0x8a>
 80045c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c8:	1f0c      	subs	r4, r1, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfb8      	it	lt
 80045ce:	18e4      	addlt	r4, r4, r3
 80045d0:	f000 f910 	bl	80047f4 <__malloc_lock>
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <_free_r+0x8c>)
 80045d6:	6813      	ldr	r3, [r2, #0]
 80045d8:	b933      	cbnz	r3, 80045e8 <_free_r+0x2c>
 80045da:	6063      	str	r3, [r4, #4]
 80045dc:	6014      	str	r4, [r2, #0]
 80045de:	4628      	mov	r0, r5
 80045e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045e4:	f000 b90c 	b.w	8004800 <__malloc_unlock>
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d908      	bls.n	80045fe <_free_r+0x42>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	1821      	adds	r1, r4, r0
 80045f0:	428b      	cmp	r3, r1
 80045f2:	bf01      	itttt	eq
 80045f4:	6819      	ldreq	r1, [r3, #0]
 80045f6:	685b      	ldreq	r3, [r3, #4]
 80045f8:	1809      	addeq	r1, r1, r0
 80045fa:	6021      	streq	r1, [r4, #0]
 80045fc:	e7ed      	b.n	80045da <_free_r+0x1e>
 80045fe:	461a      	mov	r2, r3
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	b10b      	cbz	r3, 8004608 <_free_r+0x4c>
 8004604:	42a3      	cmp	r3, r4
 8004606:	d9fa      	bls.n	80045fe <_free_r+0x42>
 8004608:	6811      	ldr	r1, [r2, #0]
 800460a:	1850      	adds	r0, r2, r1
 800460c:	42a0      	cmp	r0, r4
 800460e:	d10b      	bne.n	8004628 <_free_r+0x6c>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	4401      	add	r1, r0
 8004614:	1850      	adds	r0, r2, r1
 8004616:	4283      	cmp	r3, r0
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	d1e0      	bne.n	80045de <_free_r+0x22>
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4401      	add	r1, r0
 8004622:	6011      	str	r1, [r2, #0]
 8004624:	6053      	str	r3, [r2, #4]
 8004626:	e7da      	b.n	80045de <_free_r+0x22>
 8004628:	d902      	bls.n	8004630 <_free_r+0x74>
 800462a:	230c      	movs	r3, #12
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	e7d6      	b.n	80045de <_free_r+0x22>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	1821      	adds	r1, r4, r0
 8004634:	428b      	cmp	r3, r1
 8004636:	bf01      	itttt	eq
 8004638:	6819      	ldreq	r1, [r3, #0]
 800463a:	685b      	ldreq	r3, [r3, #4]
 800463c:	1809      	addeq	r1, r1, r0
 800463e:	6021      	streq	r1, [r4, #0]
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	6054      	str	r4, [r2, #4]
 8004644:	e7cb      	b.n	80045de <_free_r+0x22>
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	2000022c 	.word	0x2000022c

0800464c <sbrk_aligned>:
 800464c:	b570      	push	{r4, r5, r6, lr}
 800464e:	4e0e      	ldr	r6, [pc, #56]	; (8004688 <sbrk_aligned+0x3c>)
 8004650:	460c      	mov	r4, r1
 8004652:	6831      	ldr	r1, [r6, #0]
 8004654:	4605      	mov	r5, r0
 8004656:	b911      	cbnz	r1, 800465e <sbrk_aligned+0x12>
 8004658:	f000 f8bc 	bl	80047d4 <_sbrk_r>
 800465c:	6030      	str	r0, [r6, #0]
 800465e:	4621      	mov	r1, r4
 8004660:	4628      	mov	r0, r5
 8004662:	f000 f8b7 	bl	80047d4 <_sbrk_r>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d00a      	beq.n	8004680 <sbrk_aligned+0x34>
 800466a:	1cc4      	adds	r4, r0, #3
 800466c:	f024 0403 	bic.w	r4, r4, #3
 8004670:	42a0      	cmp	r0, r4
 8004672:	d007      	beq.n	8004684 <sbrk_aligned+0x38>
 8004674:	1a21      	subs	r1, r4, r0
 8004676:	4628      	mov	r0, r5
 8004678:	f000 f8ac 	bl	80047d4 <_sbrk_r>
 800467c:	3001      	adds	r0, #1
 800467e:	d101      	bne.n	8004684 <sbrk_aligned+0x38>
 8004680:	f04f 34ff 	mov.w	r4, #4294967295
 8004684:	4620      	mov	r0, r4
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	20000230 	.word	0x20000230

0800468c <_malloc_r>:
 800468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	1ccd      	adds	r5, r1, #3
 8004692:	f025 0503 	bic.w	r5, r5, #3
 8004696:	3508      	adds	r5, #8
 8004698:	2d0c      	cmp	r5, #12
 800469a:	bf38      	it	cc
 800469c:	250c      	movcc	r5, #12
 800469e:	2d00      	cmp	r5, #0
 80046a0:	4607      	mov	r7, r0
 80046a2:	db01      	blt.n	80046a8 <_malloc_r+0x1c>
 80046a4:	42a9      	cmp	r1, r5
 80046a6:	d905      	bls.n	80046b4 <_malloc_r+0x28>
 80046a8:	230c      	movs	r3, #12
 80046aa:	2600      	movs	r6, #0
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4630      	mov	r0, r6
 80046b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b4:	4e2e      	ldr	r6, [pc, #184]	; (8004770 <_malloc_r+0xe4>)
 80046b6:	f000 f89d 	bl	80047f4 <__malloc_lock>
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	461c      	mov	r4, r3
 80046be:	bb34      	cbnz	r4, 800470e <_malloc_r+0x82>
 80046c0:	4629      	mov	r1, r5
 80046c2:	4638      	mov	r0, r7
 80046c4:	f7ff ffc2 	bl	800464c <sbrk_aligned>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	4604      	mov	r4, r0
 80046cc:	d14d      	bne.n	800476a <_malloc_r+0xde>
 80046ce:	6834      	ldr	r4, [r6, #0]
 80046d0:	4626      	mov	r6, r4
 80046d2:	2e00      	cmp	r6, #0
 80046d4:	d140      	bne.n	8004758 <_malloc_r+0xcc>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	4631      	mov	r1, r6
 80046da:	4638      	mov	r0, r7
 80046dc:	eb04 0803 	add.w	r8, r4, r3
 80046e0:	f000 f878 	bl	80047d4 <_sbrk_r>
 80046e4:	4580      	cmp	r8, r0
 80046e6:	d13a      	bne.n	800475e <_malloc_r+0xd2>
 80046e8:	6821      	ldr	r1, [r4, #0]
 80046ea:	3503      	adds	r5, #3
 80046ec:	1a6d      	subs	r5, r5, r1
 80046ee:	f025 0503 	bic.w	r5, r5, #3
 80046f2:	3508      	adds	r5, #8
 80046f4:	2d0c      	cmp	r5, #12
 80046f6:	bf38      	it	cc
 80046f8:	250c      	movcc	r5, #12
 80046fa:	4638      	mov	r0, r7
 80046fc:	4629      	mov	r1, r5
 80046fe:	f7ff ffa5 	bl	800464c <sbrk_aligned>
 8004702:	3001      	adds	r0, #1
 8004704:	d02b      	beq.n	800475e <_malloc_r+0xd2>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	442b      	add	r3, r5
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	e00e      	b.n	800472c <_malloc_r+0xa0>
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	1b52      	subs	r2, r2, r5
 8004712:	d41e      	bmi.n	8004752 <_malloc_r+0xc6>
 8004714:	2a0b      	cmp	r2, #11
 8004716:	d916      	bls.n	8004746 <_malloc_r+0xba>
 8004718:	1961      	adds	r1, r4, r5
 800471a:	42a3      	cmp	r3, r4
 800471c:	6025      	str	r5, [r4, #0]
 800471e:	bf18      	it	ne
 8004720:	6059      	strne	r1, [r3, #4]
 8004722:	6863      	ldr	r3, [r4, #4]
 8004724:	bf08      	it	eq
 8004726:	6031      	streq	r1, [r6, #0]
 8004728:	5162      	str	r2, [r4, r5]
 800472a:	604b      	str	r3, [r1, #4]
 800472c:	4638      	mov	r0, r7
 800472e:	f104 060b 	add.w	r6, r4, #11
 8004732:	f000 f865 	bl	8004800 <__malloc_unlock>
 8004736:	f026 0607 	bic.w	r6, r6, #7
 800473a:	1d23      	adds	r3, r4, #4
 800473c:	1af2      	subs	r2, r6, r3
 800473e:	d0b6      	beq.n	80046ae <_malloc_r+0x22>
 8004740:	1b9b      	subs	r3, r3, r6
 8004742:	50a3      	str	r3, [r4, r2]
 8004744:	e7b3      	b.n	80046ae <_malloc_r+0x22>
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	42a3      	cmp	r3, r4
 800474a:	bf0c      	ite	eq
 800474c:	6032      	streq	r2, [r6, #0]
 800474e:	605a      	strne	r2, [r3, #4]
 8004750:	e7ec      	b.n	800472c <_malloc_r+0xa0>
 8004752:	4623      	mov	r3, r4
 8004754:	6864      	ldr	r4, [r4, #4]
 8004756:	e7b2      	b.n	80046be <_malloc_r+0x32>
 8004758:	4634      	mov	r4, r6
 800475a:	6876      	ldr	r6, [r6, #4]
 800475c:	e7b9      	b.n	80046d2 <_malloc_r+0x46>
 800475e:	230c      	movs	r3, #12
 8004760:	4638      	mov	r0, r7
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	f000 f84c 	bl	8004800 <__malloc_unlock>
 8004768:	e7a1      	b.n	80046ae <_malloc_r+0x22>
 800476a:	6025      	str	r5, [r4, #0]
 800476c:	e7de      	b.n	800472c <_malloc_r+0xa0>
 800476e:	bf00      	nop
 8004770:	2000022c 	.word	0x2000022c

08004774 <_realloc_r>:
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	4680      	mov	r8, r0
 800477a:	4614      	mov	r4, r2
 800477c:	460e      	mov	r6, r1
 800477e:	b921      	cbnz	r1, 800478a <_realloc_r+0x16>
 8004780:	4611      	mov	r1, r2
 8004782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004786:	f7ff bf81 	b.w	800468c <_malloc_r>
 800478a:	b92a      	cbnz	r2, 8004798 <_realloc_r+0x24>
 800478c:	f7ff ff16 	bl	80045bc <_free_r>
 8004790:	4625      	mov	r5, r4
 8004792:	4628      	mov	r0, r5
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	f000 f838 	bl	800480c <_malloc_usable_size_r>
 800479c:	4284      	cmp	r4, r0
 800479e:	4607      	mov	r7, r0
 80047a0:	d802      	bhi.n	80047a8 <_realloc_r+0x34>
 80047a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047a6:	d812      	bhi.n	80047ce <_realloc_r+0x5a>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4640      	mov	r0, r8
 80047ac:	f7ff ff6e 	bl	800468c <_malloc_r>
 80047b0:	4605      	mov	r5, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0ed      	beq.n	8004792 <_realloc_r+0x1e>
 80047b6:	42bc      	cmp	r4, r7
 80047b8:	4622      	mov	r2, r4
 80047ba:	4631      	mov	r1, r6
 80047bc:	bf28      	it	cs
 80047be:	463a      	movcs	r2, r7
 80047c0:	f7ff fed4 	bl	800456c <memcpy>
 80047c4:	4631      	mov	r1, r6
 80047c6:	4640      	mov	r0, r8
 80047c8:	f7ff fef8 	bl	80045bc <_free_r>
 80047cc:	e7e1      	b.n	8004792 <_realloc_r+0x1e>
 80047ce:	4635      	mov	r5, r6
 80047d0:	e7df      	b.n	8004792 <_realloc_r+0x1e>
	...

080047d4 <_sbrk_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	2300      	movs	r3, #0
 80047d8:	4d05      	ldr	r5, [pc, #20]	; (80047f0 <_sbrk_r+0x1c>)
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fc fe74 	bl	80014cc <_sbrk>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_sbrk_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_sbrk_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000234 	.word	0x20000234

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__malloc_lock+0x8>)
 80047f6:	f000 b811 	b.w	800481c <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	20000238 	.word	0x20000238

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__malloc_unlock+0x8>)
 8004802:	f000 b80c 	b.w	800481e <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	20000238 	.word	0x20000238

0800480c <_malloc_usable_size_r>:
 800480c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004810:	1f18      	subs	r0, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfbc      	itt	lt
 8004816:	580b      	ldrlt	r3, [r1, r0]
 8004818:	18c0      	addlt	r0, r0, r3
 800481a:	4770      	bx	lr

0800481c <__retarget_lock_acquire_recursive>:
 800481c:	4770      	bx	lr

0800481e <__retarget_lock_release_recursive>:
 800481e:	4770      	bx	lr

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
