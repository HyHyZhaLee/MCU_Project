
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c24  08004c24  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004c24  08004c24  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c24  08004c24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000080  08004cac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004cac  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd93  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002531  00000000  00000000  0002ce3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0002f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00030188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001987f  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ea8  00000000  00000000  0004a707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b49c  00000000  00000000  0005b5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb4  00000000  00000000  000e6a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ba4 	.word	0x08004ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004ba4 	.word	0x08004ba4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
 */

# include "global.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d101      	bne.n	8000172 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 800016e:	f000 ff79 	bl	8001064 <SCH_Update>
	}
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
	...

0800017c <HAL_UART_RxCpltCallback>:
#define MAX_UART_BUFFER_SIZE 30
uint8_t UART_VALUE = 0;
uint8_t uart_buffer[MAX_UART_BUFFER_SIZE];
uint8_t uart_index_buffer = 0;
uint8_t uart_buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a10      	ldr	r2, [pc, #64]	; (80001cc <HAL_UART_RxCpltCallback+0x50>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d119      	bne.n	80001c2 <HAL_UART_RxCpltCallback+0x46>
//    	HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
        uart_buffer[uart_index_buffer++] = UART_VALUE;
 800018e:	4b10      	ldr	r3, [pc, #64]	; (80001d0 <HAL_UART_RxCpltCallback+0x54>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	1c5a      	adds	r2, r3, #1
 8000194:	b2d1      	uxtb	r1, r2
 8000196:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <HAL_UART_RxCpltCallback+0x54>)
 8000198:	7011      	strb	r1, [r2, #0]
 800019a:	461a      	mov	r2, r3
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <HAL_UART_RxCpltCallback+0x58>)
 800019e:	7819      	ldrb	r1, [r3, #0]
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <HAL_UART_RxCpltCallback+0x5c>)
 80001a2:	5499      	strb	r1, [r3, r2]
        if (uart_index_buffer == MAX_UART_BUFFER_SIZE) {
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <HAL_UART_RxCpltCallback+0x54>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b1e      	cmp	r3, #30
 80001aa:	d102      	bne.n	80001b2 <HAL_UART_RxCpltCallback+0x36>
            uart_index_buffer = 0;
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <HAL_UART_RxCpltCallback+0x54>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
        }
        uart_buffer_flag = 1;
 80001b2:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <HAL_UART_RxCpltCallback+0x60>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	4906      	ldr	r1, [pc, #24]	; (80001d4 <HAL_UART_RxCpltCallback+0x58>)
 80001bc:	4808      	ldr	r0, [pc, #32]	; (80001e0 <HAL_UART_RxCpltCallback+0x64>)
 80001be:	f003 fbec 	bl	800399a <HAL_UART_Receive_IT>
    }
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40004400 	.word	0x40004400
 80001d0:	200000be 	.word	0x200000be
 80001d4:	2000009c 	.word	0x2000009c
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	200000bf 	.word	0x200000bf
 80001e0:	200001ac 	.word	0x200001ac

080001e4 <initButton>:
static uint8_t flagForButtonPress[N0_OF_BUTTONS];
static uint8_t flagForButtonLongPress[N0_OF_BUTTONS];
// we define counter for automatically decreasing.
static uint16_t counterForButtonLongPress[N0_OF_BUTTONS];

void initButton(){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e026      	b.n	800023e <initButton+0x5a>
        buttonBuffer0[i] = BUTTON_IS_RELEASED;
 80001f0:	4a17      	ldr	r2, [pc, #92]	; (8000250 <initButton+0x6c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4413      	add	r3, r2
 80001f6:	2201      	movs	r2, #1
 80001f8:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = BUTTON_IS_RELEASED;
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <initButton+0x70>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4413      	add	r3, r2
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
        buttonBuffer2[i] = BUTTON_IS_RELEASED;
 8000204:	4a14      	ldr	r2, [pc, #80]	; (8000258 <initButton+0x74>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4413      	add	r3, r2
 800020a:	2201      	movs	r2, #1
 800020c:	701a      	strb	r2, [r3, #0]
        buttonBuffer3[i] = BUTTON_IS_RELEASED;
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <initButton+0x78>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]

        flagForButtonLongPress[i] = 0;
 8000218:	4a11      	ldr	r2, [pc, #68]	; (8000260 <initButton+0x7c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000222:	4a10      	ldr	r2, [pc, #64]	; (8000264 <initButton+0x80>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
        counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 800022c:	4a0e      	ldr	r2, [pc, #56]	; (8000268 <initButton+0x84>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b03      	cmp	r3, #3
 8000242:	ddd5      	ble.n	80001f0 <initButton+0xc>
    }
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	bc80      	pop	{r7}
 800024e:	4770      	bx	lr
 8000250:	200000c0 	.word	0x200000c0
 8000254:	200000c4 	.word	0x200000c4
 8000258:	200000c8 	.word	0x200000c8
 800025c:	200000cc 	.word	0x200000cc
 8000260:	200000d4 	.word	0x200000d4
 8000264:	200000d0 	.word	0x200000d0
 8000268:	200000d8 	.word	0x200000d8

0800026c <button_reading>:

void button_reading(void) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e0a6      	b.n	80003c6 <button_reading+0x15a>
        buttonBuffer2[i] = buttonBuffer1[i];
 8000278:	4a57      	ldr	r2, [pc, #348]	; (80003d8 <button_reading+0x16c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4413      	add	r3, r2
 800027e:	7819      	ldrb	r1, [r3, #0]
 8000280:	4a56      	ldr	r2, [pc, #344]	; (80003dc <button_reading+0x170>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4413      	add	r3, r2
 8000286:	460a      	mov	r2, r1
 8000288:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = buttonBuffer0[i];
 800028a:	4a55      	ldr	r2, [pc, #340]	; (80003e0 <button_reading+0x174>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	7819      	ldrb	r1, [r3, #0]
 8000292:	4a51      	ldr	r2, [pc, #324]	; (80003d8 <button_reading+0x16c>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4413      	add	r3, r2
 8000298:	460a      	mov	r2, r1
 800029a:	701a      	strb	r2, [r3, #0]
        switch (i) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d83a      	bhi.n	8000318 <button_reading+0xac>
 80002a2:	a201      	add	r2, pc, #4	; (adr r2, 80002a8 <button_reading+0x3c>)
 80002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a8:	080002b9 	.word	0x080002b9
 80002ac:	080002d1 	.word	0x080002d1
 80002b0:	080002e9 	.word	0x080002e9
 80002b4:	08000301 	.word	0x08000301
            case 0:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80002b8:	2101      	movs	r1, #1
 80002ba:	484a      	ldr	r0, [pc, #296]	; (80003e4 <button_reading+0x178>)
 80002bc:	f001 feb2 	bl	8002024 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4619      	mov	r1, r3
 80002c4:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <button_reading+0x174>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4413      	add	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	701a      	strb	r2, [r3, #0]
                break;
 80002ce:	e023      	b.n	8000318 <button_reading+0xac>
            case 1:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80002d0:	2102      	movs	r1, #2
 80002d2:	4844      	ldr	r0, [pc, #272]	; (80003e4 <button_reading+0x178>)
 80002d4:	f001 fea6 	bl	8002024 <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	4619      	mov	r1, r3
 80002dc:	4a40      	ldr	r2, [pc, #256]	; (80003e0 <button_reading+0x174>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	460a      	mov	r2, r1
 80002e4:	701a      	strb	r2, [r3, #0]
                break;
 80002e6:	e017      	b.n	8000318 <button_reading+0xac>
            case 2:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80002e8:	2110      	movs	r1, #16
 80002ea:	483e      	ldr	r0, [pc, #248]	; (80003e4 <button_reading+0x178>)
 80002ec:	f001 fe9a 	bl	8002024 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4619      	mov	r1, r3
 80002f4:	4a3a      	ldr	r2, [pc, #232]	; (80003e0 <button_reading+0x174>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	460a      	mov	r2, r1
 80002fc:	701a      	strb	r2, [r3, #0]
                break;
 80002fe:	e00b      	b.n	8000318 <button_reading+0xac>
            case 3:
				buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000300:	2101      	movs	r1, #1
 8000302:	4839      	ldr	r0, [pc, #228]	; (80003e8 <button_reading+0x17c>)
 8000304:	f001 fe8e 	bl	8002024 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	4619      	mov	r1, r3
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <button_reading+0x174>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	460a      	mov	r2, r1
 8000314:	701a      	strb	r2, [r3, #0]
				break;
 8000316:	bf00      	nop
        }
        if ((buttonBuffer1[i] == buttonBuffer0[i]) && (buttonBuffer1[i] == buttonBuffer2[i])) {
 8000318:	4a2f      	ldr	r2, [pc, #188]	; (80003d8 <button_reading+0x16c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	492f      	ldr	r1, [pc, #188]	; (80003e0 <button_reading+0x174>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	440b      	add	r3, r1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	429a      	cmp	r2, r3
 800032a:	d149      	bne.n	80003c0 <button_reading+0x154>
 800032c:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <button_reading+0x16c>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	4929      	ldr	r1, [pc, #164]	; (80003dc <button_reading+0x170>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	440b      	add	r3, r1
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	429a      	cmp	r2, r3
 800033e:	d13f      	bne.n	80003c0 <button_reading+0x154>
            if (buttonBuffer2[i] != buttonBuffer3[i]) {
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <button_reading+0x170>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4413      	add	r3, r2
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	4928      	ldr	r1, [pc, #160]	; (80003ec <button_reading+0x180>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	440b      	add	r3, r1
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	429a      	cmp	r2, r3
 8000352:	d01a      	beq.n	800038a <button_reading+0x11e>
                buttonBuffer3[i] = buttonBuffer2[i];
 8000354:	4a21      	ldr	r2, [pc, #132]	; (80003dc <button_reading+0x170>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	7819      	ldrb	r1, [r3, #0]
 800035c:	4a23      	ldr	r2, [pc, #140]	; (80003ec <button_reading+0x180>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4413      	add	r3, r2
 8000362:	460a      	mov	r2, r1
 8000364:	701a      	strb	r2, [r3, #0]
                if (buttonBuffer3[i] == BUTTON_IS_PRESSED) {
 8000366:	4a21      	ldr	r2, [pc, #132]	; (80003ec <button_reading+0x180>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d126      	bne.n	80003c0 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <button_reading+0x184>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800037a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 1;
 800037e:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <button_reading+0x188>)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
 8000388:	e01a      	b.n	80003c0 <button_reading+0x154>
                }
            } else {
                counterForButtonLongPress[i]--;
 800038a:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <button_reading+0x184>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000392:	3b01      	subs	r3, #1
 8000394:	b299      	uxth	r1, r3
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <button_reading+0x184>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (counterForButtonLongPress[i] == 0) {
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <button_reading+0x184>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d10a      	bne.n	80003c0 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 80003aa:	4a11      	ldr	r2, [pc, #68]	; (80003f0 <button_reading+0x184>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80003b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonLongPress[i] = 1;
 80003b6:	4a10      	ldr	r2, [pc, #64]	; (80003f8 <button_reading+0x18c>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	f77f af55 	ble.w	8000278 <button_reading+0xc>
                }
            }
        }
    }
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000c4 	.word	0x200000c4
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	200000c0 	.word	0x200000c0
 80003e4:	40010800 	.word	0x40010800
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	200000cc 	.word	0x200000cc
 80003f0:	200000d8 	.word	0x200000d8
 80003f4:	200000d0 	.word	0x200000d0
 80003f8:	200000d4 	.word	0x200000d4

080003fc <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d901      	bls.n	8000410 <is_button_pressed+0x14>
 800040c:	2300      	movs	r3, #0
 800040e:	e00b      	b.n	8000428 <is_button_pressed+0x2c>
    if(flagForButtonPress[index] == 1){
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <is_button_pressed+0x38>)
 8000414:	5cd3      	ldrb	r3, [r2, r3]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d105      	bne.n	8000426 <is_button_pressed+0x2a>
    	flagForButtonPress[index] = 0;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <is_button_pressed+0x38>)
 800041e:	2100      	movs	r1, #0
 8000420:	54d1      	strb	r1, [r2, r3]
    	return 1;
 8000422:	2301      	movs	r3, #1
 8000424:	e000      	b.n	8000428 <is_button_pressed+0x2c>
    }
    return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	200000d0 	.word	0x200000d0

08000438 <fsm_function>:
int GREEN_TIME_TEMP = 0;            // Temporary storage for green light duration

int TRAFFIC_ONE_PERIOD = 0;             // Total duration of one complete traffic light cycle in seconds

// Function to handle the traffic light state machine
void fsm_function(){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	switch(TRAFFIC_STATUS){
 800043c:	4bac      	ldr	r3, [pc, #688]	; (80006f0 <fsm_function+0x2b8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	3b01      	subs	r3, #1
 8000442:	2b2a      	cmp	r3, #42	; 0x2a
 8000444:	f200 8289 	bhi.w	800095a <fsm_function+0x522>
 8000448:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <fsm_function+0x18>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	080004fd 	.word	0x080004fd
 8000454:	08000541 	.word	0x08000541
 8000458:	080005cb 	.word	0x080005cb
 800045c:	0800065d 	.word	0x0800065d
 8000460:	08000711 	.word	0x08000711
 8000464:	0800095b 	.word	0x0800095b
 8000468:	0800095b 	.word	0x0800095b
 800046c:	0800095b 	.word	0x0800095b
 8000470:	0800095b 	.word	0x0800095b
 8000474:	0800095b 	.word	0x0800095b
 8000478:	0800095b 	.word	0x0800095b
 800047c:	0800095b 	.word	0x0800095b
 8000480:	0800095b 	.word	0x0800095b
 8000484:	0800095b 	.word	0x0800095b
 8000488:	0800095b 	.word	0x0800095b
 800048c:	0800095b 	.word	0x0800095b
 8000490:	0800095b 	.word	0x0800095b
 8000494:	0800095b 	.word	0x0800095b
 8000498:	0800095b 	.word	0x0800095b
 800049c:	0800095b 	.word	0x0800095b
 80004a0:	0800095b 	.word	0x0800095b
 80004a4:	0800095b 	.word	0x0800095b
 80004a8:	0800095b 	.word	0x0800095b
 80004ac:	0800095b 	.word	0x0800095b
 80004b0:	0800095b 	.word	0x0800095b
 80004b4:	0800095b 	.word	0x0800095b
 80004b8:	0800095b 	.word	0x0800095b
 80004bc:	0800095b 	.word	0x0800095b
 80004c0:	0800095b 	.word	0x0800095b
 80004c4:	0800095b 	.word	0x0800095b
 80004c8:	0800095b 	.word	0x0800095b
 80004cc:	0800095b 	.word	0x0800095b
 80004d0:	0800095b 	.word	0x0800095b
 80004d4:	0800095b 	.word	0x0800095b
 80004d8:	0800095b 	.word	0x0800095b
 80004dc:	0800095b 	.word	0x0800095b
 80004e0:	0800095b 	.word	0x0800095b
 80004e4:	0800095b 	.word	0x0800095b
 80004e8:	0800095b 	.word	0x0800095b
 80004ec:	0800095b 	.word	0x0800095b
 80004f0:	080007a3 	.word	0x080007a3
 80004f4:	08000823 	.word	0x08000823
 80004f8:	080008a1 	.word	0x080008a1
		// CASE INIT
		case INIT:
			TRAFFIC_STATUS = RED1_GREEN2;
 80004fc:	4b7c      	ldr	r3, [pc, #496]	; (80006f0 <fsm_function+0x2b8>)
 80004fe:	2202      	movs	r2, #2
 8000500:	601a      	str	r2, [r3, #0]
			// INITIALIZE
			setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 8000502:	4b7c      	ldr	r3, [pc, #496]	; (80006f4 <fsm_function+0x2bc>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	2101      	movs	r1, #1
 8000510:	4618      	mov	r0, r3
 8000512:	f000 ffe7 	bl	80014e4 <setTimer>
			TRAFFIC_COUNTER = RED_TIME;
 8000516:	4b78      	ldr	r3, [pc, #480]	; (80006f8 <fsm_function+0x2c0>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a78      	ldr	r2, [pc, #480]	; (80006fc <fsm_function+0x2c4>)
 800051c:	6013      	str	r3, [r2, #0]
			trafficDisplay1(OFF);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fa42 	bl	80009a8 <trafficDisplay1>
			trafficDisplay2(OFF);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fa8d 	bl	8000a44 <trafficDisplay2>
			TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 800052a:	4b73      	ldr	r3, [pc, #460]	; (80006f8 <fsm_function+0x2c0>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b71      	ldr	r3, [pc, #452]	; (80006f4 <fsm_function+0x2bc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	441a      	add	r2, r3
 8000534:	4b72      	ldr	r3, [pc, #456]	; (8000700 <fsm_function+0x2c8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4413      	add	r3, r2
 800053a:	4a72      	ldr	r2, [pc, #456]	; (8000704 <fsm_function+0x2cc>)
 800053c:	6013      	str	r3, [r2, #0]
			break;
 800053e:	e21b      	b.n	8000978 <fsm_function+0x540>

		// CASE RED - GREEN
		case RED1_GREEN2:
			trafficDisplay1(RED);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fa31 	bl	80009a8 <trafficDisplay1>
			trafficDisplay2(GREEN);
 8000546:	2003      	movs	r0, #3
 8000548:	f000 fa7c 	bl	8000a44 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800054c:	4b6e      	ldr	r3, [pc, #440]	; (8000708 <fsm_function+0x2d0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d10b      	bne.n	800056c <fsm_function+0x134>
				TRAFFIC_COUNTER--;
 8000554:	4b69      	ldr	r3, [pc, #420]	; (80006fc <fsm_function+0x2c4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a68      	ldr	r2, [pc, #416]	; (80006fc <fsm_function+0x2c4>)
 800055c:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800055e:	2102      	movs	r1, #2
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 ffbe 	bl	80014e4 <setTimer>
				UART_transmit_counter();
 8000568:	f000 fafc 	bl	8000b64 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800056c:	4b66      	ldr	r3, [pc, #408]	; (8000708 <fsm_function+0x2d0>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d10c      	bne.n	800058e <fsm_function+0x156>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000574:	4b62      	ldr	r3, [pc, #392]	; (8000700 <fsm_function+0x2c8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f000 ffae 	bl	80014e4 <setTimer>
				TRAFFIC_STATUS = RED1_YELLOW2;
 8000588:	4b59      	ldr	r3, [pc, #356]	; (80006f0 <fsm_function+0x2b8>)
 800058a:	2203      	movs	r2, #3
 800058c:	601a      	str	r2, [r3, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff ff34 	bl	80003fc <is_button_pressed>
 8000594:	4603      	mov	r3, r0
 8000596:	2b01      	cmp	r3, #1
 8000598:	d102      	bne.n	80005a0 <fsm_function+0x168>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 800059a:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <fsm_function+0x2b8>)
 800059c:	2229      	movs	r2, #41	; 0x29
 800059e:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 80005a0:	2003      	movs	r0, #3
 80005a2:	f7ff ff2b 	bl	80003fc <is_button_pressed>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	f040 81d8 	bne.w	800095e <fsm_function+0x526>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 80005ae:	4b55      	ldr	r3, [pc, #340]	; (8000704 <fsm_function+0x2cc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005b6:	fb02 f303 	mul.w	r3, r2, r3
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ff91 	bl	80014e4 <setTimer>
				flag_pedestrian = 1;
 80005c2:	4b52      	ldr	r3, [pc, #328]	; (800070c <fsm_function+0x2d4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	601a      	str	r2, [r3, #0]
			}
			break;
 80005c8:	e1c9      	b.n	800095e <fsm_function+0x526>

		// CASE RED - YELLOW
		case RED1_YELLOW2:
			trafficDisplay1(RED);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 f9ec 	bl	80009a8 <trafficDisplay1>
			trafficDisplay2(YELLOW);
 80005d0:	2002      	movs	r0, #2
 80005d2:	f000 fa37 	bl	8000a44 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 80005d6:	4b4c      	ldr	r3, [pc, #304]	; (8000708 <fsm_function+0x2d0>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10b      	bne.n	80005f6 <fsm_function+0x1be>
				TRAFFIC_COUNTER--;
 80005de:	4b47      	ldr	r3, [pc, #284]	; (80006fc <fsm_function+0x2c4>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a45      	ldr	r2, [pc, #276]	; (80006fc <fsm_function+0x2c4>)
 80005e6:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 80005e8:	2102      	movs	r1, #2
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 ff79 	bl	80014e4 <setTimer>
				UART_transmit_counter();
 80005f2:	f000 fab7 	bl	8000b64 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 80005f6:	4b44      	ldr	r3, [pc, #272]	; (8000708 <fsm_function+0x2d0>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d110      	bne.n	8000620 <fsm_function+0x1e8>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <fsm_function+0x2bc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000606:	fb02 f303 	mul.w	r3, r2, r3
 800060a:	2101      	movs	r1, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f000 ff69 	bl	80014e4 <setTimer>
				TRAFFIC_STATUS = GREEN1_RED2;
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <fsm_function+0x2b8>)
 8000614:	2204      	movs	r2, #4
 8000616:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = GREEN_TIME;
 8000618:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <fsm_function+0x2bc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a37      	ldr	r2, [pc, #220]	; (80006fc <fsm_function+0x2c4>)
 800061e:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff feeb 	bl	80003fc <is_button_pressed>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d102      	bne.n	8000632 <fsm_function+0x1fa>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <fsm_function+0x2b8>)
 800062e:	2229      	movs	r2, #41	; 0x29
 8000630:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000632:	2003      	movs	r0, #3
 8000634:	f7ff fee2 	bl	80003fc <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	f040 8191 	bne.w	8000962 <fsm_function+0x52a>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <fsm_function+0x2cc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	2103      	movs	r1, #3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 ff48 	bl	80014e4 <setTimer>
				flag_pedestrian = 1;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <fsm_function+0x2d4>)
 8000656:	2201      	movs	r2, #1
 8000658:	601a      	str	r2, [r3, #0]
			}
			break;
 800065a:	e182      	b.n	8000962 <fsm_function+0x52a>

		// CASE GREEN - RED
		case GREEN1_RED2:
			trafficDisplay1(GREEN);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f9a3 	bl	80009a8 <trafficDisplay1>
			trafficDisplay2(RED);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f9ee 	bl	8000a44 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <fsm_function+0x2d0>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d10b      	bne.n	8000688 <fsm_function+0x250>
				TRAFFIC_COUNTER--;
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <fsm_function+0x2c4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3b01      	subs	r3, #1
 8000676:	4a21      	ldr	r2, [pc, #132]	; (80006fc <fsm_function+0x2c4>)
 8000678:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800067a:	2102      	movs	r1, #2
 800067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000680:	f000 ff30 	bl	80014e4 <setTimer>
				UART_transmit_counter();
 8000684:	f000 fa6e 	bl	8000b64 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <fsm_function+0x2d0>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d110      	bne.n	80006b2 <fsm_function+0x27a>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <fsm_function+0x2c8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	2101      	movs	r1, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff20 	bl	80014e4 <setTimer>
				TRAFFIC_STATUS = YELLOW1_RED2;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <fsm_function+0x2b8>)
 80006a6:	2205      	movs	r2, #5
 80006a8:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = YELLOW_TIME;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <fsm_function+0x2c8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a13      	ldr	r2, [pc, #76]	; (80006fc <fsm_function+0x2c4>)
 80006b0:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fea2 	bl	80003fc <is_button_pressed>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d102      	bne.n	80006c4 <fsm_function+0x28c>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <fsm_function+0x2b8>)
 80006c0:	2229      	movs	r2, #41	; 0x29
 80006c2:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 80006c4:	2003      	movs	r0, #3
 80006c6:	f7ff fe99 	bl	80003fc <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	f040 814a 	bne.w	8000966 <fsm_function+0x52e>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <fsm_function+0x2cc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006da:	fb02 f303 	mul.w	r3, r2, r3
 80006de:	2103      	movs	r1, #3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 feff 	bl	80014e4 <setTimer>
				flag_pedestrian = 1;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <fsm_function+0x2d4>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	601a      	str	r2, [r3, #0]
			}
			break;
 80006ec:	e13b      	b.n	8000966 <fsm_function+0x52e>
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000008 	.word	0x20000008
 80006f8:	2000000c 	.word	0x2000000c
 80006fc:	200000e4 	.word	0x200000e4
 8000700:	20000004 	.word	0x20000004
 8000704:	200000f4 	.word	0x200000f4
 8000708:	200002d8 	.word	0x200002d8
 800070c:	200000e0 	.word	0x200000e0

		// CASE YELLOW - RED
		case YELLOW1_RED2:
			trafficDisplay1(YELLOW);
 8000710:	2002      	movs	r0, #2
 8000712:	f000 f949 	bl	80009a8 <trafficDisplay1>
			trafficDisplay2(RED);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 f994 	bl	8000a44 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800071c:	4b97      	ldr	r3, [pc, #604]	; (800097c <fsm_function+0x544>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10b      	bne.n	800073c <fsm_function+0x304>
				TRAFFIC_COUNTER--;
 8000724:	4b96      	ldr	r3, [pc, #600]	; (8000980 <fsm_function+0x548>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3b01      	subs	r3, #1
 800072a:	4a95      	ldr	r2, [pc, #596]	; (8000980 <fsm_function+0x548>)
 800072c:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800072e:	2102      	movs	r1, #2
 8000730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000734:	f000 fed6 	bl	80014e4 <setTimer>
				UART_transmit_counter();
 8000738:	f000 fa14 	bl	8000b64 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800073c:	4b8f      	ldr	r3, [pc, #572]	; (800097c <fsm_function+0x544>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d110      	bne.n	8000766 <fsm_function+0x32e>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 8000744:	4b8f      	ldr	r3, [pc, #572]	; (8000984 <fsm_function+0x54c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074c:	fb02 f303 	mul.w	r3, r2, r3
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fec6 	bl	80014e4 <setTimer>
				TRAFFIC_STATUS = RED1_GREEN2;
 8000758:	4b8b      	ldr	r3, [pc, #556]	; (8000988 <fsm_function+0x550>)
 800075a:	2202      	movs	r2, #2
 800075c:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = RED_TIME;
 800075e:	4b8b      	ldr	r3, [pc, #556]	; (800098c <fsm_function+0x554>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a87      	ldr	r2, [pc, #540]	; (8000980 <fsm_function+0x548>)
 8000764:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fe48 	bl	80003fc <is_button_pressed>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d102      	bne.n	8000778 <fsm_function+0x340>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 8000772:	4b85      	ldr	r3, [pc, #532]	; (8000988 <fsm_function+0x550>)
 8000774:	2229      	movs	r2, #41	; 0x29
 8000776:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000778:	2003      	movs	r0, #3
 800077a:	f7ff fe3f 	bl	80003fc <is_button_pressed>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	f040 80f2 	bne.w	800096a <fsm_function+0x532>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000786:	4b82      	ldr	r3, [pc, #520]	; (8000990 <fsm_function+0x558>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800078e:	fb02 f303 	mul.w	r3, r2, r3
 8000792:	2103      	movs	r1, #3
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fea5 	bl	80014e4 <setTimer>
				flag_pedestrian = 1;
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <fsm_function+0x55c>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
			}
			break;
 80007a0:	e0e3      	b.n	800096a <fsm_function+0x532>

		case MODE_MODIFY_RED:
			// TOGGLE RED
			trafficToggle(RED);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f000 f996 	bl	8000ad4 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff fe27 	bl	80003fc <is_button_pressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d102      	bne.n	80007ba <fsm_function+0x382>
				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 80007b4:	4b74      	ldr	r3, [pc, #464]	; (8000988 <fsm_function+0x550>)
 80007b6:	222a      	movs	r2, #42	; 0x2a
 80007b8:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 80007ba:	2001      	movs	r0, #1
 80007bc:	f7ff fe1e 	bl	80003fc <is_button_pressed>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d110      	bne.n	80007e8 <fsm_function+0x3b0>
				RED_TIME_TEMP = RED_TIME;
 80007c6:	4b71      	ldr	r3, [pc, #452]	; (800098c <fsm_function+0x554>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a73      	ldr	r2, [pc, #460]	; (8000998 <fsm_function+0x560>)
 80007cc:	6013      	str	r3, [r2, #0]
				// ADD UP RED
				if(RED_TIME_TEMP >= 99){
 80007ce:	4b72      	ldr	r3, [pc, #456]	; (8000998 <fsm_function+0x560>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b62      	cmp	r3, #98	; 0x62
 80007d4:	dd03      	ble.n	80007de <fsm_function+0x3a6>
					RED_TIME_TEMP = 0;
 80007d6:	4b70      	ldr	r3, [pc, #448]	; (8000998 <fsm_function+0x560>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e004      	b.n	80007e8 <fsm_function+0x3b0>
				}
				else{
					RED_TIME_TEMP++;
 80007de:	4b6e      	ldr	r3, [pc, #440]	; (8000998 <fsm_function+0x560>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a6c      	ldr	r2, [pc, #432]	; (8000998 <fsm_function+0x560>)
 80007e6:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff fe07 	bl	80003fc <is_button_pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	f040 80bc 	bne.w	800096e <fsm_function+0x536>
				// SAVE
				RED_TIME = RED_TIME_TEMP;
 80007f6:	4b68      	ldr	r3, [pc, #416]	; (8000998 <fsm_function+0x560>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a64      	ldr	r2, [pc, #400]	; (800098c <fsm_function+0x554>)
 80007fc:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80007fe:	4b63      	ldr	r3, [pc, #396]	; (800098c <fsm_function+0x554>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b60      	ldr	r3, [pc, #384]	; (8000984 <fsm_function+0x54c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	4a64      	ldr	r2, [pc, #400]	; (800099c <fsm_function+0x564>)
 800080a:	6013      	str	r3, [r2, #0]
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 800080c:	4b5f      	ldr	r3, [pc, #380]	; (800098c <fsm_function+0x554>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b62      	ldr	r3, [pc, #392]	; (800099c <fsm_function+0x564>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	4a5b      	ldr	r2, [pc, #364]	; (8000984 <fsm_function+0x54c>)
 8000818:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 800081a:	4b5b      	ldr	r3, [pc, #364]	; (8000988 <fsm_function+0x550>)
 800081c:	222a      	movs	r2, #42	; 0x2a
 800081e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000820:	e0a5      	b.n	800096e <fsm_function+0x536>

		case MODE_MODIFY_YELLOW:
			// TOGGLE RED
			trafficToggle(YELLOW);
 8000822:	2002      	movs	r0, #2
 8000824:	f000 f956 	bl	8000ad4 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fde7 	bl	80003fc <is_button_pressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d102      	bne.n	800083a <fsm_function+0x402>
				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 8000834:	4b54      	ldr	r3, [pc, #336]	; (8000988 <fsm_function+0x550>)
 8000836:	222b      	movs	r2, #43	; 0x2b
 8000838:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff fdde 	bl	80003fc <is_button_pressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d110      	bne.n	8000868 <fsm_function+0x430>
				YELLOW_TIME_TEMP = YELLOW_TIME;
 8000846:	4b55      	ldr	r3, [pc, #340]	; (800099c <fsm_function+0x564>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a55      	ldr	r2, [pc, #340]	; (80009a0 <fsm_function+0x568>)
 800084c:	6013      	str	r3, [r2, #0]
				// ADD UP YELLOW
				if(YELLOW_TIME_TEMP >= 99){
 800084e:	4b54      	ldr	r3, [pc, #336]	; (80009a0 <fsm_function+0x568>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b62      	cmp	r3, #98	; 0x62
 8000854:	dd03      	ble.n	800085e <fsm_function+0x426>
					YELLOW_TIME_TEMP = 0;
 8000856:	4b52      	ldr	r3, [pc, #328]	; (80009a0 <fsm_function+0x568>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e004      	b.n	8000868 <fsm_function+0x430>
				}
				else{
					YELLOW_TIME_TEMP++;
 800085e:	4b50      	ldr	r3, [pc, #320]	; (80009a0 <fsm_function+0x568>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a4e      	ldr	r2, [pc, #312]	; (80009a0 <fsm_function+0x568>)
 8000866:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fdc7 	bl	80003fc <is_button_pressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d17e      	bne.n	8000972 <fsm_function+0x53a>
				// SAVE
				YELLOW_TIME = YELLOW_TIME_TEMP;
 8000874:	4b4a      	ldr	r3, [pc, #296]	; (80009a0 <fsm_function+0x568>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a48      	ldr	r2, [pc, #288]	; (800099c <fsm_function+0x564>)
 800087a:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 800087c:	4b43      	ldr	r3, [pc, #268]	; (800098c <fsm_function+0x554>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b46      	ldr	r3, [pc, #280]	; (800099c <fsm_function+0x564>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	4a3f      	ldr	r2, [pc, #252]	; (8000984 <fsm_function+0x54c>)
 8000888:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 800088a:	4b44      	ldr	r3, [pc, #272]	; (800099c <fsm_function+0x564>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <fsm_function+0x54c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a3d      	ldr	r2, [pc, #244]	; (800098c <fsm_function+0x554>)
 8000896:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 8000898:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <fsm_function+0x550>)
 800089a:	222b      	movs	r2, #43	; 0x2b
 800089c:	601a      	str	r2, [r3, #0]
			}
			break;
 800089e:	e068      	b.n	8000972 <fsm_function+0x53a>

		case MODE_MODIFY_GREEN:
			// TOGGLE RED
			trafficToggle(GREEN);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f917 	bl	8000ad4 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fda8 	bl	80003fc <is_button_pressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10c      	bne.n	80008cc <fsm_function+0x494>
				TRAFFIC_STATUS = RED1_GREEN2;
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <fsm_function+0x550>)
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80008b8:	4b32      	ldr	r3, [pc, #200]	; (8000984 <fsm_function+0x54c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fe0c 	bl	80014e4 <setTimer>
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fd95 	bl	80003fc <is_button_pressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d110      	bne.n	80008fa <fsm_function+0x4c2>
				GREEN_TIME_TEMP = GREEN_TIME;
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <fsm_function+0x54c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <fsm_function+0x56c>)
 80008de:	6013      	str	r3, [r2, #0]
				// ADD UP GREEN
				if(GREEN_TIME_TEMP >= 99){
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <fsm_function+0x56c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b62      	cmp	r3, #98	; 0x62
 80008e6:	dd03      	ble.n	80008f0 <fsm_function+0x4b8>
					GREEN_TIME_TEMP = 0;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <fsm_function+0x56c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	e004      	b.n	80008fa <fsm_function+0x4c2>
				}
				else{
					GREEN_TIME_TEMP++;
 80008f0:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <fsm_function+0x56c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <fsm_function+0x56c>)
 80008f8:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff fd7e 	bl	80003fc <is_button_pressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d137      	bne.n	8000976 <fsm_function+0x53e>
				// SAVE
				GREEN_TIME = GREEN_TIME_TEMP;;
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <fsm_function+0x56c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1e      	ldr	r2, [pc, #120]	; (8000984 <fsm_function+0x54c>)
 800090c:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <fsm_function+0x554>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <fsm_function+0x54c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	4a20      	ldr	r2, [pc, #128]	; (800099c <fsm_function+0x564>)
 800091a:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <fsm_function+0x564>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <fsm_function+0x54c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4413      	add	r3, r2
 8000926:	4a19      	ldr	r2, [pc, #100]	; (800098c <fsm_function+0x554>)
 8000928:	6013      	str	r3, [r2, #0]

				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <fsm_function+0x54c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f000 fdd3 	bl	80014e4 <setTimer>
				TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <fsm_function+0x554>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <fsm_function+0x54c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	441a      	add	r2, r3
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <fsm_function+0x564>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4413      	add	r3, r2
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <fsm_function+0x558>)
 8000950:	6013      	str	r3, [r2, #0]
				TRAFFIC_STATUS = RED1_GREEN2;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <fsm_function+0x550>)
 8000954:	2202      	movs	r2, #2
 8000956:	601a      	str	r2, [r3, #0]
			}
			break;
 8000958:	e00d      	b.n	8000976 <fsm_function+0x53e>
		default:
			break;
 800095a:	bf00      	nop
 800095c:	e00c      	b.n	8000978 <fsm_function+0x540>
			break;
 800095e:	bf00      	nop
 8000960:	e00a      	b.n	8000978 <fsm_function+0x540>
			break;
 8000962:	bf00      	nop
 8000964:	e008      	b.n	8000978 <fsm_function+0x540>
			break;
 8000966:	bf00      	nop
 8000968:	e006      	b.n	8000978 <fsm_function+0x540>
			break;
 800096a:	bf00      	nop
 800096c:	e004      	b.n	8000978 <fsm_function+0x540>
			break;
 800096e:	bf00      	nop
 8000970:	e002      	b.n	8000978 <fsm_function+0x540>
			break;
 8000972:	bf00      	nop
 8000974:	e000      	b.n	8000978 <fsm_function+0x540>
			break;
 8000976:	bf00      	nop
	}
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200002d8 	.word	0x200002d8
 8000980:	200000e4 	.word	0x200000e4
 8000984:	20000008 	.word	0x20000008
 8000988:	20000000 	.word	0x20000000
 800098c:	2000000c 	.word	0x2000000c
 8000990:	200000f4 	.word	0x200000f4
 8000994:	200000e0 	.word	0x200000e0
 8000998:	200000e8 	.word	0x200000e8
 800099c:	20000004 	.word	0x20000004
 80009a0:	200000ec 	.word	0x200000ec
 80009a4:	200000f0 	.word	0x200000f0

080009a8 <trafficDisplay1>:



#include <hardware.h>

void trafficDisplay1(uint8_t input){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d83b      	bhi.n	8000a30 <trafficDisplay1+0x88>
 80009b8:	a201      	add	r2, pc, #4	; (adr r2, 80009c0 <trafficDisplay1+0x18>)
 80009ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009be:	bf00      	nop
 80009c0:	080009d1 	.word	0x080009d1
 80009c4:	080009e9 	.word	0x080009e9
 80009c8:	08000a19 	.word	0x08000a19
 80009cc:	08000a01 	.word	0x08000a01
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d6:	4819      	ldr	r0, [pc, #100]	; (8000a3c <trafficDisplay1+0x94>)
 80009d8:	f001 fb3b 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2108      	movs	r1, #8
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <trafficDisplay1+0x98>)
 80009e2:	f001 fb36 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 80009e6:	e024      	b.n	8000a32 <trafficDisplay1+0x8a>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <trafficDisplay1+0x94>)
 80009f0:	f001 fb2f 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <trafficDisplay1+0x98>)
 80009fa:	f001 fb2a 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 80009fe:	e018      	b.n	8000a32 <trafficDisplay1+0x8a>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <trafficDisplay1+0x94>)
 8000a08:	f001 fb23 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2108      	movs	r1, #8
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <trafficDisplay1+0x98>)
 8000a12:	f001 fb1e 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000a16:	e00c      	b.n	8000a32 <trafficDisplay1+0x8a>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <trafficDisplay1+0x94>)
 8000a20:	f001 fb17 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <trafficDisplay1+0x98>)
 8000a2a:	f001 fb12 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000a2e:	e000      	b.n	8000a32 <trafficDisplay1+0x8a>
		default:
			break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <trafficDisplay2>:

void trafficDisplay2(uint8_t input){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b03      	cmp	r3, #3
 8000a52:	d837      	bhi.n	8000ac4 <trafficDisplay2+0x80>
 8000a54:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <trafficDisplay2+0x18>)
 8000a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5a:	bf00      	nop
 8000a5c:	08000a6d 	.word	0x08000a6d
 8000a60:	08000a83 	.word	0x08000a83
 8000a64:	08000aaf 	.word	0x08000aaf
 8000a68:	08000a99 	.word	0x08000a99
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000a72:	f001 faee 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2110      	movs	r1, #16
 8000a7a:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000a7c:	f001 fae9 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000a80:	e021      	b.n	8000ac6 <trafficDisplay2+0x82>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000a82:	2201      	movs	r2, #1
 8000a84:	2120      	movs	r1, #32
 8000a86:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000a88:	f001 fae3 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2110      	movs	r1, #16
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000a92:	f001 fade 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000a96:	e016      	b.n	8000ac6 <trafficDisplay2+0x82>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000a9e:	f001 fad8 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000aa8:	f001 fad3 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000aac:	e00b      	b.n	8000ac6 <trafficDisplay2+0x82>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000ab4:	f001 facd 	bl	8002052 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <trafficDisplay2+0x8c>)
 8000abe:	f001 fac8 	bl	8002052 <HAL_GPIO_WritePin>
		  break;
 8000ac2:	e000      	b.n	8000ac6 <trafficDisplay2+0x82>
		default:
			break;
 8000ac4:	bf00      	nop
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <trafficToggle>:

uint8_t toggle_state = 0;
void trafficToggle(uint8_t input){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[4]){
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <trafficToggle+0x88>)
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <trafficToggle+0x2a>
		setTimer(1000, 4);
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aec:	f000 fcfa 	bl	80014e4 <setTimer>
		toggle_state = 1 - toggle_state;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <trafficToggle+0x8c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	f1c3 0301 	rsb	r3, r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <trafficToggle+0x8c>)
 8000afc:	701a      	strb	r2, [r3, #0]
	}
	if(toggle_state){
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <trafficToggle+0x8c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01e      	beq.n	8000b44 <trafficToggle+0x70>
		switch(input){
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d014      	beq.n	8000b36 <trafficToggle+0x62>
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	dc20      	bgt.n	8000b52 <trafficToggle+0x7e>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d002      	beq.n	8000b1a <trafficToggle+0x46>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d007      	beq.n	8000b28 <trafficToggle+0x54>
	}
	else {
		trafficDisplay1(OFF);
		trafficDisplay2(OFF);
	}
}
 8000b18:	e01b      	b.n	8000b52 <trafficToggle+0x7e>
				trafficDisplay1(RED);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff ff44 	bl	80009a8 <trafficDisplay1>
				trafficDisplay2(RED);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ff8f 	bl	8000a44 <trafficDisplay2>
				break;
 8000b26:	e014      	b.n	8000b52 <trafficToggle+0x7e>
				trafficDisplay1(YELLOW);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f7ff ff3d 	bl	80009a8 <trafficDisplay1>
				trafficDisplay2(YELLOW);
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff ff88 	bl	8000a44 <trafficDisplay2>
				break;
 8000b34:	e00d      	b.n	8000b52 <trafficToggle+0x7e>
				trafficDisplay1(GREEN);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f7ff ff36 	bl	80009a8 <trafficDisplay1>
				trafficDisplay2(GREEN);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f7ff ff81 	bl	8000a44 <trafficDisplay2>
				break;
 8000b42:	e006      	b.n	8000b52 <trafficToggle+0x7e>
		trafficDisplay1(OFF);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ff2f 	bl	80009a8 <trafficDisplay1>
		trafficDisplay2(OFF);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ff7a 	bl	8000a44 <trafficDisplay2>
}
 8000b50:	e7ff      	b.n	8000b52 <trafficToggle+0x7e>
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200002d8 	.word	0x200002d8
 8000b60:	200000f8 	.word	0x200000f8

08000b64 <UART_transmit_counter>:
	  BuzzerPeriod = 250;
	  BuzzerDutyCycle = 500;
}

char packet[30];
void UART_transmit_counter(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    sprintf(packet, "!7SEG:%d#\r\n", TRAFFIC_COUNTER);
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <UART_transmit_counter+0x2c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4909      	ldr	r1, [pc, #36]	; (8000b94 <UART_transmit_counter+0x30>)
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <UART_transmit_counter+0x34>)
 8000b72:	f003 fb9d 	bl	80042b0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)packet, strlen(packet), 1000);
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <UART_transmit_counter+0x34>)
 8000b78:	f7ff fae8 	bl	800014c <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b84:	4904      	ldr	r1, [pc, #16]	; (8000b98 <UART_transmit_counter+0x34>)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <UART_transmit_counter+0x38>)
 8000b88:	f002 fe75 	bl	8003876 <HAL_UART_Transmit>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000e4 	.word	0x200000e4
 8000b94:	08004bbc 	.word	0x08004bbc
 8000b98:	200000fc 	.word	0x200000fc
 8000b9c:	200001ac 	.word	0x200001ac

08000ba0 <runAutoDebug>:

void runAutoDebug() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	if(timer_flag[0]){
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <runAutoDebug+0x24>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <runAutoDebug+0x1e>
		setTimer(1000,0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bb2:	f000 fc97 	bl	80014e4 <setTimer>
		HAL_GPIO_TogglePin(DEBUG_LED1_GPIO_Port, DEBUG_LED1_Pin);
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <runAutoDebug+0x28>)
 8000bba:	f001 fa62 	bl	8002082 <HAL_GPIO_TogglePin>
        if(is_button_pressed(0)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(1)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(2)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(3)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
#endif //__TEST_BUTTON
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002d8 	.word	0x200002d8
 8000bc8:	40010800 	.word	0x40010800

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 fe84 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f84c 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f000 f972 	bl	8000ec0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bdc:	f000 f884 	bl	8000ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be0:	f000 f8ce 	bl	8000d80 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000be4:	f000 f942 	bl	8000e6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000be8:	4817      	ldr	r0, [pc, #92]	; (8000c48 <main+0x7c>)
 8000bea:	f001 fee9 	bl	80029c0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <main+0x80>)
 8000bf2:	f001 ff8f 	bl	8002b14 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2 , &UART_VALUE , 1) ;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4915      	ldr	r1, [pc, #84]	; (8000c50 <main+0x84>)
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <main+0x88>)
 8000bfc:	f002 fecd 	bl	800399a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  SCH_Init();
 8000c00:	f000 fa22 	bl	8001048 <SCH_Init>
  SCH_Add_Task(initTimer, 10, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210a      	movs	r1, #10
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <main+0x8c>)
 8000c0a:	f000 fa4b 	bl	80010a4 <SCH_Add_Task>
  SCH_Add_Task(initButton, 1000, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <main+0x90>)
 8000c16:	f000 fa45 	bl	80010a4 <SCH_Add_Task>
  SCH_Add_Task(runAutoDebug, 11, 10);
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	210b      	movs	r1, #11
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <main+0x94>)
 8000c20:	f000 fa40 	bl	80010a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_function, 12, 10);
 8000c24:	220a      	movs	r2, #10
 8000c26:	210c      	movs	r1, #12
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <main+0x98>)
 8000c2a:	f000 fa3b 	bl	80010a4 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 13, 1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	210d      	movs	r1, #13
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <main+0x9c>)
 8000c34:	f000 fa36 	bl	80010a4 <SCH_Add_Task>
  SCH_Add_Task(button_reading, 13, 10);
 8000c38:	220a      	movs	r2, #10
 8000c3a:	210d      	movs	r1, #13
 8000c3c:	480b      	ldr	r0, [pc, #44]	; (8000c6c <main+0xa0>)
 8000c3e:	f000 fa31 	bl	80010a4 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000c42:	f000 fc25 	bl	8001490 <SCH_Dispatch_Tasks>
 8000c46:	e7fc      	b.n	8000c42 <main+0x76>
 8000c48:	2000011c 	.word	0x2000011c
 8000c4c:	20000164 	.word	0x20000164
 8000c50:	2000009c 	.word	0x2000009c
 8000c54:	200001ac 	.word	0x200001ac
 8000c58:	08001575 	.word	0x08001575
 8000c5c:	080001e5 	.word	0x080001e5
 8000c60:	08000ba1 	.word	0x08000ba1
 8000c64:	08000439 	.word	0x08000439
 8000c68:	08001515 	.word	0x08001515
 8000c6c:	0800026d 	.word	0x0800026d

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	; 0x40
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fb0e 	bl	80042a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 fa20 	bl	80020ec <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f997 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fc8d 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000cdc:	f000 f982 	bl	8000fe4 <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3740      	adds	r7, #64	; 0x40
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d0e:	f240 321f 	movw	r2, #799	; 0x31f
 8000d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d1c:	2209      	movs	r2, #9
 8000d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d2e:	f001 fdf7 	bl	8002920 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d38:	f000 f954 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d4a:	f002 f94b 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d54:	f000 f946 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d66:	f002 fcc9 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f938 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000011c 	.word	0x2000011c

08000d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000db2:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <MX_TIM3_Init+0xe8>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd6:	4823      	ldr	r0, [pc, #140]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000dd8:	f001 fda2 	bl	8002920 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000de2:	f000 f8ff 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df0:	4619      	mov	r1, r3
 8000df2:	481c      	ldr	r0, [pc, #112]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000df4:	f002 f8f6 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dfe:	f000 f8f1 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e04:	f001 fe2e 	bl	8002a64 <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e0e:	f000 f8e9 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e22:	f002 fc6b 	bl	80036fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e2c:	f000 f8da 	bl	8000fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e30:	2360      	movs	r3, #96	; 0x60
 8000e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e48:	f002 f80e 	bl	8002e68 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e52:	f000 f8c7 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM3_Init+0xe4>)
 8000e58:	f000 fc14 	bl	8001684 <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	; 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000164 	.word	0x20000164
 8000e68:	40000400 	.word	0x40000400

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <MX_USART2_UART_Init+0x50>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f002 fc9a 	bl	80037dc <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eae:	f000 f899 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001ac 	.word	0x200001ac
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a3e      	ldr	r2, [pc, #248]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a38      	ldr	r2, [pc, #224]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000f0a:	f043 0310 	orr.w	r3, r3, #16
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <MX_GPIO_Init+0x114>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000f22:	482d      	ldr	r0, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f24:	f001 f895 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f2e:	482b      	ldr	r0, [pc, #172]	; (8000fdc <MX_GPIO_Init+0x11c>)
 8000f30:	f001 f88f 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3a:	4829      	ldr	r0, [pc, #164]	; (8000fe0 <MX_GPIO_Init+0x120>)
 8000f3c:	f001 f889 	bl	8002052 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000f40:	2313      	movs	r3, #19
 8000f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f54:	f000 fee2 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED1_Pin PEDLED_BIT2_Pin TRAFFIC1_BIT1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin;
 8000f58:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <MX_GPIO_Init+0x118>)
 8000f72:	f000 fed3 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000f76:	2301      	movs	r3, #1
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_GPIO_Init+0x11c>)
 8000f8a:	f000 fec7 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDLED_BIT1_Pin TRAFFIC1_BIT2_Pin TRAFFIC2_BIT2_Pin TRAFFIC2_BIT1_Pin */
  GPIO_InitStruct.Pin = PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin;
 8000f8e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <MX_GPIO_Init+0x11c>)
 8000fa8:	f000 feb8 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED2_Pin;
 8000fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED2_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <MX_GPIO_Init+0x120>)
 8000fc6:	f000 fea9 	bl	8001d1c <HAL_GPIO_Init>

}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <Get_New_Task_ID>:
// The array of tasks
static sTask SCH_tasks_G[SCH_MAX_TASKS];
static uint32_t newTaskID = 0;
static uint32_t Error_code_G = 0;

static uint32_t Get_New_Task_ID(void){
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	newTaskID++;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <Get_New_Task_ID+0x2c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <Get_New_Task_ID+0x2c>)
 8000ffc:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <Get_New_Task_ID+0x2c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d104      	bne.n	8001010 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <Get_New_Task_ID+0x2c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <Get_New_Task_ID+0x2c>)
 800100e:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <Get_New_Task_ID+0x2c>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	200002b8 	.word	0x200002b8

08001020 <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001024:	2101      	movs	r1, #1
 8001026:	2000      	movs	r0, #0
 8001028:	f001 f844 	bl	80020b4 <HAL_PWR_EnterSLEEPMode>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <Watchdog_init>:

void Watchdog_init(){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <Timer_init>:

void Timer_init(){
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <SCH_Init>:

void SCH_Init(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	Error_code_G = 0;
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SCH_Init+0x18>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	Watchdog_init();
 8001052:	f7ff ffed 	bl	8001030 <Watchdog_init>
	Timer_init();
 8001056:	f7ff fff1 	bl	800103c <Timer_init>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002bc 	.word	0x200002bc

08001064 <SCH_Update>:

void SCH_Update(void){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <SCH_Update+0x3c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <SCH_Update+0x34>
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <SCH_Update+0x3c>)
 8001072:	7b1b      	ldrb	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10f      	bne.n	8001098 <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <SCH_Update+0x3c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d004      	beq.n	800108a <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <SCH_Update+0x3c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	3b01      	subs	r3, #1
 8001086:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <SCH_Update+0x3c>)
 8001088:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SCH_Update+0x3c>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 8001092:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <SCH_Update+0x3c>)
 8001094:	2201      	movs	r2, #1
 8001096:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200001f0 	.word	0x200001f0

080010a4 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0; // Index for iterating through tasks
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0; // Accumulator for total delay time
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0; // Delay time for the new task
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]

	// Iterate through tasks to find a suitable position for the new task
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80010bc:	2300      	movs	r3, #0
 80010be:	77fb      	strb	r3, [r7, #31]
 80010c0:	e0e7      	b.n	8001292 <SCH_Add_Task+0x1ee>
		sumDelay += SCH_tasks_G[newTaskIndex].Delay;
 80010c2:	7ffa      	ldrb	r2, [r7, #31]
 80010c4:	4977      	ldr	r1, [pc, #476]	; (80012a4 <SCH_Add_Task+0x200>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	3304      	adds	r3, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4413      	add	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]

		// Check if the current position is suitable for the new task
		if(sumDelay > DELAY){
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d97c      	bls.n	80011dc <SCH_Add_Task+0x138>
			// Calculate the delay for the new task and adjust the delay of the current task
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 80010e2:	7ffa      	ldrb	r2, [r7, #31]
 80010e4:	496f      	ldr	r1, [pc, #444]	; (80012a4 <SCH_Add_Task+0x200>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3304      	adds	r3, #4
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80010fe:	7ffa      	ldrb	r2, [r7, #31]
 8001100:	69b9      	ldr	r1, [r7, #24]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ac9      	subs	r1, r1, r3
 8001106:	4867      	ldr	r0, [pc, #412]	; (80012a4 <SCH_Add_Task+0x200>)
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4403      	add	r3, r0
 8001112:	3304      	adds	r3, #4
 8001114:	6019      	str	r1, [r3, #0]

			// Shift tasks down to make room for the new task
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 8001116:	2309      	movs	r3, #9
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	e017      	b.n	800114c <SCH_Add_Task+0xa8>
				SCH_tasks_G[i] = SCH_tasks_G[i - 1];
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	7df9      	ldrb	r1, [r7, #23]
 8001122:	4860      	ldr	r0, [pc, #384]	; (80012a4 <SCH_Add_Task+0x200>)
 8001124:	460b      	mov	r3, r1
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4418      	add	r0, r3
 800112e:	495d      	ldr	r1, [pc, #372]	; (80012a4 <SCH_Add_Task+0x200>)
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	4604      	mov	r4, r0
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	6023      	str	r3, [r4, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i--){
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	3b01      	subs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	7dfa      	ldrb	r2, [r7, #23]
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8e3      	bhi.n	800111c <SCH_Add_Task+0x78>
			}

			// Insert the new task at the found position
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001154:	7ffa      	ldrb	r2, [r7, #31]
 8001156:	4953      	ldr	r1, [pc, #332]	; (80012a4 <SCH_Add_Task+0x200>)
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8001166:	7ffa      	ldrb	r2, [r7, #31]
 8001168:	494e      	ldr	r1, [pc, #312]	; (80012a4 <SCH_Add_Task+0x200>)
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3304      	adds	r3, #4
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800117a:	7ffa      	ldrb	r2, [r7, #31]
 800117c:	4949      	ldr	r1, [pc, #292]	; (80012a4 <SCH_Add_Task+0x200>)
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3308      	adds	r3, #8
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].RunMe = (newDelay == 0) ? 1 : 0;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	7ffa      	ldrb	r2, [r7, #31]
 800119c:	4618      	mov	r0, r3
 800119e:	4941      	ldr	r1, [pc, #260]	; (80012a4 <SCH_Add_Task+0x200>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	440b      	add	r3, r1
 80011aa:	330c      	adds	r3, #12
 80011ac:	4602      	mov	r2, r0
 80011ae:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80011b0:	7ffc      	ldrb	r4, [r7, #31]
 80011b2:	f7ff ff1d 	bl	8000ff0 <Get_New_Task_ID>
 80011b6:	4602      	mov	r2, r0
 80011b8:	493a      	ldr	r1, [pc, #232]	; (80012a4 <SCH_Add_Task+0x200>)
 80011ba:	4623      	mov	r3, r4
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4423      	add	r3, r4
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	3310      	adds	r3, #16
 80011c6:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80011c8:	7ffa      	ldrb	r2, [r7, #31]
 80011ca:	4936      	ldr	r1, [pc, #216]	; (80012a4 <SCH_Add_Task+0x200>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3310      	adds	r3, #16
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	e05f      	b.n	800129c <SCH_Add_Task+0x1f8>
		} else if(SCH_tasks_G[newTaskIndex].pTask == NULL){
 80011dc:	7ffa      	ldrb	r2, [r7, #31]
 80011de:	4931      	ldr	r1, [pc, #196]	; (80012a4 <SCH_Add_Task+0x200>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d14d      	bne.n	800128c <SCH_Add_Task+0x1e8>
			// If an empty slot is found, insert the new task
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80011f0:	7ffa      	ldrb	r2, [r7, #31]
 80011f2:	492c      	ldr	r1, [pc, #176]	; (80012a4 <SCH_Add_Task+0x200>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001202:	7ffa      	ldrb	r2, [r7, #31]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	1ac9      	subs	r1, r1, r3
 800120a:	4826      	ldr	r0, [pc, #152]	; (80012a4 <SCH_Add_Task+0x200>)
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	3304      	adds	r3, #4
 8001218:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800121a:	7ffa      	ldrb	r2, [r7, #31]
 800121c:	4921      	ldr	r1, [pc, #132]	; (80012a4 <SCH_Add_Task+0x200>)
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	3308      	adds	r3, #8
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].RunMe = (SCH_tasks_G[newTaskIndex].Delay == 0) ? 1 : 0;
 800122e:	7ffa      	ldrb	r2, [r7, #31]
 8001230:	491c      	ldr	r1, [pc, #112]	; (80012a4 <SCH_Add_Task+0x200>)
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	7ffa      	ldrb	r2, [r7, #31]
 800124c:	4618      	mov	r0, r3
 800124e:	4915      	ldr	r1, [pc, #84]	; (80012a4 <SCH_Add_Task+0x200>)
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	330c      	adds	r3, #12
 800125c:	4602      	mov	r2, r0
 800125e:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001260:	7ffc      	ldrb	r4, [r7, #31]
 8001262:	f7ff fec5 	bl	8000ff0 <Get_New_Task_ID>
 8001266:	4602      	mov	r2, r0
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <SCH_Add_Task+0x200>)
 800126a:	4623      	mov	r3, r4
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4423      	add	r3, r4
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3310      	adds	r3, #16
 8001276:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8001278:	7ffa      	ldrb	r2, [r7, #31]
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <SCH_Add_Task+0x200>)
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	3310      	adds	r3, #16
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	e007      	b.n	800129c <SCH_Add_Task+0x1f8>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 800128c:	7ffb      	ldrb	r3, [r7, #31]
 800128e:	3301      	adds	r3, #1
 8001290:	77fb      	strb	r3, [r7, #31]
 8001292:	7ffb      	ldrb	r3, [r7, #31]
 8001294:	2b09      	cmp	r3, #9
 8001296:	f67f af14 	bls.w	80010c2 <SCH_Add_Task+0x1e>
		}
	}

	// Return a special value (such as 0 or an error code) if no space is available
	return NO_TASK_ID; // Example error code for no space
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdb0      	pop	{r4, r5, r7, pc}
 80012a4:	200001f0 	.word	0x200001f0

080012a8 <SCH_Delete_Task>:



uint8_t SCH_Delete_Task(uint32_t taskID){
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80e2 	beq.w	8001480 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e0da      	b.n	8001478 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	4971      	ldr	r1, [pc, #452]	; (800148c <SCH_Delete_Task+0x1e4>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3310      	adds	r3, #16
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	f040 80cb 	bne.w	8001472 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02b      	beq.n	800133e <SCH_Delete_Task+0x96>
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d828      	bhi.n	800133e <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	4966      	ldr	r1, [pc, #408]	; (800148c <SCH_Delete_Task+0x1e4>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01d      	beq.n	800133e <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	4961      	ldr	r1, [pc, #388]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3304      	adds	r3, #4
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	485c      	ldr	r0, [pc, #368]	; (800148c <SCH_Delete_Task+0x1e4>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4403      	add	r3, r0
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	3201      	adds	r2, #1
 800132c:	4419      	add	r1, r3
 800132e:	4857      	ldr	r0, [pc, #348]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4403      	add	r3, r0
 800133a:	3304      	adds	r3, #4
 800133c:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	73bb      	strb	r3, [r7, #14]
 8001342:	e060      	b.n	8001406 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	1c59      	adds	r1, r3, #1
 8001348:	7bba      	ldrb	r2, [r7, #14]
 800134a:	4850      	ldr	r0, [pc, #320]	; (800148c <SCH_Delete_Task+0x1e4>)
 800134c:	460b      	mov	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4403      	add	r3, r0
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	484c      	ldr	r0, [pc, #304]	; (800148c <SCH_Delete_Task+0x1e4>)
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4403      	add	r3, r0
 8001364:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	1c59      	adds	r1, r3, #1
 800136a:	7bba      	ldrb	r2, [r7, #14]
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <SCH_Delete_Task+0x1e4>)
 800136e:	460b      	mov	r3, r1
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4403      	add	r3, r0
 8001378:	3308      	adds	r3, #8
 800137a:	6819      	ldr	r1, [r3, #0]
 800137c:	4843      	ldr	r0, [pc, #268]	; (800148c <SCH_Delete_Task+0x1e4>)
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4403      	add	r3, r0
 8001388:	3308      	adds	r3, #8
 800138a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	1c59      	adds	r1, r3, #1
 8001390:	7bba      	ldrb	r2, [r7, #14]
 8001392:	483e      	ldr	r0, [pc, #248]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001394:	460b      	mov	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	3304      	adds	r3, #4
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	483a      	ldr	r0, [pc, #232]	; (800148c <SCH_Delete_Task+0x1e4>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4403      	add	r3, r0
 80013ae:	3304      	adds	r3, #4
 80013b0:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	1c59      	adds	r1, r3, #1
 80013b6:	7bba      	ldrb	r2, [r7, #14]
 80013b8:	4834      	ldr	r0, [pc, #208]	; (800148c <SCH_Delete_Task+0x1e4>)
 80013ba:	460b      	mov	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4403      	add	r3, r0
 80013c4:	330c      	adds	r3, #12
 80013c6:	7818      	ldrb	r0, [r3, #0]
 80013c8:	4930      	ldr	r1, [pc, #192]	; (800148c <SCH_Delete_Task+0x1e4>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	4602      	mov	r2, r0
 80013d8:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	1c59      	adds	r1, r3, #1
 80013de:	7bba      	ldrb	r2, [r7, #14]
 80013e0:	482a      	ldr	r0, [pc, #168]	; (800148c <SCH_Delete_Task+0x1e4>)
 80013e2:	460b      	mov	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4403      	add	r3, r0
 80013ec:	3310      	adds	r3, #16
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	4826      	ldr	r0, [pc, #152]	; (800148c <SCH_Delete_Task+0x1e4>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4403      	add	r3, r0
 80013fc:	3310      	adds	r3, #16
 80013fe:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	3301      	adds	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d99b      	bls.n	8001344 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 800140c:	7bba      	ldrb	r2, [r7, #14]
 800140e:	491f      	ldr	r1, [pc, #124]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 800141e:	7bba      	ldrb	r2, [r7, #14]
 8001420:	491a      	ldr	r1, [pc, #104]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	3308      	adds	r3, #8
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001432:	7bba      	ldrb	r2, [r7, #14]
 8001434:	4915      	ldr	r1, [pc, #84]	; (800148c <SCH_Delete_Task+0x1e4>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3304      	adds	r3, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001446:	7bba      	ldrb	r2, [r7, #14]
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <SCH_Delete_Task+0x1e4>)
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	330c      	adds	r3, #12
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <SCH_Delete_Task+0x1e4>)
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	3310      	adds	r3, #16
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
				return Return_code;
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	e007      	b.n	8001482 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	3301      	adds	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b09      	cmp	r3, #9
 800147c:	f67f af21 	bls.w	80012c2 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8001480:	7b7b      	ldrb	r3, [r7, #13]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	200001f0 	.word	0x200001f0

08001490 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <SCH_Dispatch_Tasks+0x50>)
 8001498:	7b1b      	ldrb	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d019      	beq.n	80014d2 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <SCH_Dispatch_Tasks+0x50>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset flag
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <SCH_Dispatch_Tasks+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <SCH_Dispatch_Tasks+0x50>)
 80014ac:	1d3c      	adds	r4, r7, #4
 80014ae:	461d      	mov	r5, r3
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fef4 	bl	80012a8 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68f9      	ldr	r1, [r7, #12]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fde9 	bl	80010a4 <SCH_Add_Task>
		}
	}
	SCH_Go_To_Sleep();
 80014d2:	f7ff fda5 	bl	8001020 <SCH_Go_To_Sleep>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001f0 	.word	0x200001f0

080014e4 <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 80014ee:	4907      	ldr	r1, [pc, #28]	; (800150c <setTimer+0x28>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <setTimer+0x2c>)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2100      	movs	r1, #0
 80014fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	200002c0 	.word	0x200002c0
 8001510:	200002d8 	.word	0x200002d8

08001514 <timerRun>:

void timerRun(){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e01c      	b.n	800155a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <timerRun+0x58>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd13      	ble.n	8001554 <timerRun+0x40>
			timer_counter[i]--;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <timerRun+0x58>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <timerRun+0x58>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <timerRun+0x58>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dc04      	bgt.n	8001554 <timerRun+0x40>
				timer_flag[i] = 1;
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <timerRun+0x5c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2101      	movs	r1, #1
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b05      	cmp	r3, #5
 800155e:	dddf      	ble.n	8001520 <timerRun+0xc>
			}
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200002c0 	.word	0x200002c0
 8001570:	200002d8 	.word	0x200002d8

08001574 <initTimer>:

void initTimer(int delay){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<NO_OF_TIMER; i++){
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e006      	b.n	8001590 <initTimer+0x1c>
		setTimer(delay, i);
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffad 	bl	80014e4 <setTimer>
	for(int i = 0; i<NO_OF_TIMER; i++){
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b05      	cmp	r3, #5
 8001594:	ddf5      	ble.n	8001582 <initTimer+0xe>
	}
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_MspInit+0x5c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x5c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_MspInit+0x60>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_MspInit+0x60>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d114      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201c      	movs	r0, #28
 8001634:	f000 fa8b 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001638:	201c      	movs	r0, #28
 800163a:	f000 faa4 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800163e:	e018      	b.n	8001672 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_TIM_Base_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201d      	movs	r0, #29
 8001668:	f000 fa71 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f000 fa8a 	bl	8001b86 <HAL_NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40000400 	.word	0x40000400

08001684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_TIM_MspPostInit+0x58>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d117      	bne.n	80016d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016bc:	2340      	movs	r3, #64	; 0x40
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_TIM_MspPostInit+0x60>)
 80016d0:	f000 fb24 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010800 	.word	0x40010800

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d137      	bne.n	8001778 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001712:	61d3      	str	r3, [r2, #28]
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001738:	2304      	movs	r3, #4
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <HAL_UART_MspInit+0xa0>)
 800174c:	f000 fae6 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001750:	2308      	movs	r3, #8
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <HAL_UART_MspInit+0xa0>)
 8001764:	f000 fada 	bl	8001d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2026      	movs	r0, #38	; 0x26
 800176e:	f000 f9ee 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001772:	2026      	movs	r0, #38	; 0x26
 8001774:	f000 fa07 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f8c9 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM2_IRQHandler+0x10>)
 80017e2:	f001 fa39 	bl	8002c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000011c 	.word	0x2000011c

080017f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM3_IRQHandler+0x10>)
 80017f6:	f001 fa2f 	bl	8002c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000164 	.word	0x20000164

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f002 f8f7 	bl	80039fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200001ac 	.word	0x200001ac

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f002 fd00 	bl	800424c <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20005000 	.word	0x20005000
 8001878:	00000400 	.word	0x00000400
 800187c:	200002f0 	.word	0x200002f0
 8001880:	20000308 	.word	0x20000308

08001884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018b6:	f7ff ffe5 	bl	8001884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f002 fccd 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018be:	f7ff f985 	bl	8000bcc <main>
  bx lr
 80018c2:	4770      	bx	lr
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018cc:	08004c2c 	.word	0x08004c2c
  ldr r2, =_sbss
 80018d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018d4:	20000308 	.word	0x20000308

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_Init+0x28>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_Init+0x28>)
 80018e6:	f043 0310 	orr.w	r3, r3, #16
 80018ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f923 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fe52 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f93b 	bl	8001ba2 <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f903 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000010 	.word	0x20000010
 8001960:	20000018 	.word	0x20000018
 8001964:	20000014 	.word	0x20000014

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_IncTick+0x1c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x20>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_IncTick+0x20>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000018 	.word	0x20000018
 8001988:	200002f4 	.word	0x200002f4

0800198c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_GetTick+0x10>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	200002f4 	.word	0x200002f4

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4906      	ldr	r1, [pc, #24]	; (8001a38 <__NVIC_EnableIRQ+0x34>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f1c3 0307 	rsb	r3, r3, #7
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	bf28      	it	cs
 8001aae:	2304      	movcs	r3, #4
 8001ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d902      	bls.n	8001ac0 <NVIC_EncodePriority+0x30>
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	3b03      	subs	r3, #3
 8001abe:	e000      	b.n	8001ac2 <NVIC_EncodePriority+0x32>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	43d9      	mvns	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	4313      	orrs	r3, r2
         );
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff90 	bl	8001a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff2d 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff42 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff90 	bl	8001a90 <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5f 	bl	8001a3c <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff35 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e020      	b.n	8001c24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020e 	bic.w	r2, r2, #14
 8001bf0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d005      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e051      	b.n	8001cf6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 020e 	bic.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <HAL_DMA_Abort_IT+0xd0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d029      	beq.n	8001cd0 <HAL_DMA_Abort_IT+0xa0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_DMA_Abort_IT+0xd4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d022      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x9c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_DMA_Abort_IT+0xd8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d01a      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x96>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_DMA_Abort_IT+0xdc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d012      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x90>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_DMA_Abort_IT+0xe0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00a      	beq.n	8001cba <HAL_DMA_Abort_IT+0x8a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_DMA_Abort_IT+0xe4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <HAL_DMA_Abort_IT+0x84>
 8001cae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cb2:	e00e      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001cb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb8:	e00b      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbe:	e008      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	e005      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cca:	e002      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001ccc:	2310      	movs	r3, #16
 8001cce:	e000      	b.n	8001cd2 <HAL_DMA_Abort_IT+0xa2>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_DMA_Abort_IT+0xe8>)
 8001cd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	4798      	blx	r3
    } 
  }
  return status;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020008 	.word	0x40020008
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	40020030 	.word	0x40020030
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40020058 	.word	0x40020058
 8001d14:	4002006c 	.word	0x4002006c
 8001d18:	40020000 	.word	0x40020000

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	; 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e169      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8158 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a9a      	ldr	r2, [pc, #616]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a98      	ldr	r2, [pc, #608]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a96      	ldr	r2, [pc, #600]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a94      	ldr	r2, [pc, #592]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a92      	ldr	r2, [pc, #584]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a90      	ldr	r2, [pc, #576]	; (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a79      	ldr	r2, [pc, #484]	; (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	; 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80b1 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a48      	ldr	r2, [pc, #288]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	492c      	ldr	r1, [pc, #176]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491e      	ldr	r1, [pc, #120]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4914      	ldr	r1, [pc, #80]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	490e      	ldr	r1, [pc, #56]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x2e2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae8e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	372c      	adds	r7, #44	; 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002062:	787b      	ldrb	r3, [r7, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206e:	e003      	b.n	8002078 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	611a      	str	r2, [r3, #16]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002094:	887a      	ldrh	r2, [r7, #2]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43d9      	mvns	r1, r3
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	400b      	ands	r3, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	611a      	str	r2, [r3, #16]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_PWR_EnterSLEEPMode+0x34>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80020d2:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80020d6:	bf40      	sev
    __WFE();
 80020d8:	bf20      	wfe
    __WFE();
 80020da:	bf20      	wfe
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e272      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e24c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fbe0 	bl	800198c <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fbdc 	bl	800198c <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e200      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fbcc 	bl	800198c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff fbc8 	bl	800198c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1ec      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1c0      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff fb81 	bl	800198c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fb7d 	bl	800198c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1a1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fb60 	bl	800198c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7ff fb5c 	bl	800198c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e180      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff fb40 	bl	800198c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff fb3c 	bl	800198c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e160      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fad8 	bl	80028e4 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff fb26 	bl	800198c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff fb22 	bl	800198c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e146      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b92      	ldr	r3, [pc, #584]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a87      	ldr	r2, [pc, #540]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fae3 	bl	800198c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff fadf 	bl	800198c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	; 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e103      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b75      	ldr	r3, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a60      	ldr	r2, [pc, #384]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b5b      	ldr	r3, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a5a      	ldr	r2, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b58      	ldr	r3, [pc, #352]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff fa93 	bl	800198c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff fa8f 	bl	800198c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0b1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff fa7d 	bl	800198c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff fa79 	bl	800198c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e09b      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a3b      	ldr	r2, [pc, #236]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8087 	beq.w	80025e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fa4d 	bl	800198c <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fa49 	bl	800198c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e06d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4921      	ldr	r1, [pc, #132]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	491b      	ldr	r1, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff fa1d 	bl	800198c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff fa19 	bl	800198c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e03d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e035      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff fa06 	bl	800198c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7ff fa02 	bl	800198c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e01e      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e019      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_OscConfig+0x500>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4965      	ldr	r1, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7ff f954 	bl	800198c <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7ff f950 	bl	800198c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f8b2 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	08004bd8 	.word	0x08004bd8
 80027bc:	20000010 	.word	0x20000010
 80027c0:	20000014 	.word	0x20000014

080027c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b490      	push	{r4, r7}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ca:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_GetSysClockFreq+0xac>)
 80027cc:	1d3c      	adds	r4, r7, #4
 80027ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d4:	f240 2301 	movw	r3, #513	; 0x201
 80027d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x46>
 8002802:	e02b      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	e02b      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3328      	adds	r3, #40	; 0x28
 8002814:	443b      	add	r3, r7
 8002816:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800281a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d012      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0c5b      	lsrs	r3, r3, #17
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	3328      	adds	r3, #40	; 0x28
 8002832:	443b      	add	r3, r7
 8002834:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002838:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	4a0e      	ldr	r2, [pc, #56]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e004      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	623b      	str	r3, [r7, #32]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	6a3b      	ldr	r3, [r7, #32]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3728      	adds	r7, #40	; 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc90      	pop	{r4, r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	08004bc8 	.word	0x08004bc8
 8002874:	40021000 	.word	0x40021000
 8002878:	007a1200 	.word	0x007a1200
 800287c:	003d0900 	.word	0x003d0900

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_RCC_GetHCLKFreq+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	20000010 	.word	0x20000010

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002898:	f7ff fff2 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08004be8 	.word	0x08004be8

080028bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c0:	f7ff ffde 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0adb      	lsrs	r3, r3, #11
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08004be8 	.word	0x08004be8

080028e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCC_Delay+0x34>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0a      	ldr	r2, [pc, #40]	; (800291c <RCC_Delay+0x38>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a5b      	lsrs	r3, r3, #9
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002900:	bf00      	nop
  }
  while (Delay --);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e5a      	subs	r2, r3, #1
 8002906:	60fa      	str	r2, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f9      	bne.n	8002900 <RCC_Delay+0x1c>
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20000010 	.word	0x20000010
 800291c:	10624dd3 	.word	0x10624dd3

08002920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e041      	b.n	80029b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fe5c 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 fc28 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d001      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e03a      	b.n	8002a4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_TIM_Base_Start_IT+0x98>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x58>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d009      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x58>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x58>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d010      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	e007      	b.n	8002a4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40012c00 	.word	0x40012c00
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800

08002a64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e041      	b.n	8002afa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f839 	bl	8002b02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f000 fb86 	bl	80031b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_TIM_PWM_Start+0x24>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e022      	b.n	8002b7e <HAL_TIM_PWM_Start+0x6a>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d109      	bne.n	8002b52 <HAL_TIM_PWM_Start+0x3e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e015      	b.n	8002b7e <HAL_TIM_PWM_Start+0x6a>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d109      	bne.n	8002b6c <HAL_TIM_PWM_Start+0x58>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e008      	b.n	8002b7e <HAL_TIM_PWM_Start+0x6a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e05e      	b.n	8002c44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x82>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	e013      	b.n	8002bbe <HAL_TIM_PWM_Start+0xaa>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x92>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	e00b      	b.n	8002bbe <HAL_TIM_PWM_Start+0xaa>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d104      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0xa2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	e003      	b.n	8002bbe <HAL_TIM_PWM_Start+0xaa>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fd74 	bl	80036b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <HAL_TIM_PWM_Start+0x138>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d107      	bne.n	8002be6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_TIM_PWM_Start+0x138>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIM_PWM_Start+0xfa>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIM_PWM_Start+0xfa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_TIM_PWM_Start+0x13c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_PWM_Start+0xfa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <HAL_TIM_PWM_Start+0x140>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d010      	beq.n	8002c42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	e007      	b.n	8002c42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40012c00 	.word	0x40012c00
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800

08002c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa6f 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa62 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fa71 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0204 	mvn.w	r2, #4
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa45 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa38 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa47 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0208 	mvn.w	r2, #8
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2204      	movs	r2, #4
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa1b 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa0e 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fa1d 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0210 	mvn.w	r2, #16
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2208      	movs	r2, #8
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9f1 	bl	800317e <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f9e4 	bl	800316c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9f3 	bl	8003190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd f9c0 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fce1 	bl	80037ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9b7 	bl	80031a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0220 	mvn.w	r2, #32
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fcac 	bl	80037b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0ac      	b.n	8002fdc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	f200 809f 	bhi.w	8002fd0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ecd 	.word	0x08002ecd
 8002e9c:	08002fd1 	.word	0x08002fd1
 8002ea0:	08002fd1 	.word	0x08002fd1
 8002ea4:	08002fd1 	.word	0x08002fd1
 8002ea8:	08002f0d 	.word	0x08002f0d
 8002eac:	08002fd1 	.word	0x08002fd1
 8002eb0:	08002fd1 	.word	0x08002fd1
 8002eb4:	08002fd1 	.word	0x08002fd1
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002fd1 	.word	0x08002fd1
 8002ec0:	08002fd1 	.word	0x08002fd1
 8002ec4:	08002fd1 	.word	0x08002fd1
 8002ec8:	08002f8f 	.word	0x08002f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f9d0 	bl	8003278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0208 	orr.w	r2, r2, #8
 8002ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	619a      	str	r2, [r3, #24]
      break;
 8002f0a:	e062      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa16 	bl	8003344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699a      	ldr	r2, [r3, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
      break;
 8002f4c:	e041      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fa5f 	bl	8003418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0208 	orr.w	r2, r2, #8
 8002f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0204 	bic.w	r2, r2, #4
 8002f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
      break;
 8002f8c:	e021      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 faa9 	bl	80034ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69d9      	ldr	r1, [r3, #28]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	021a      	lsls	r2, r3, #8
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
      break;
 8002fce:	e000      	b.n	8002fd2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002fd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_ConfigClockSource+0x18>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0b3      	b.n	8003164 <HAL_TIM_ConfigClockSource+0x180>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800301a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003022:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003034:	d03e      	beq.n	80030b4 <HAL_TIM_ConfigClockSource+0xd0>
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303a:	f200 8087 	bhi.w	800314c <HAL_TIM_ConfigClockSource+0x168>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	f000 8085 	beq.w	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d87f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 800304c:	2b70      	cmp	r3, #112	; 0x70
 800304e:	d01a      	beq.n	8003086 <HAL_TIM_ConfigClockSource+0xa2>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d87b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d050      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x116>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d877      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 800305c:	2b50      	cmp	r3, #80	; 0x50
 800305e:	d03c      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xf6>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d873      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d058      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x136>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d86f      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 800306c:	2b30      	cmp	r3, #48	; 0x30
 800306e:	d064      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x156>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d86b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 8003074:	2b20      	cmp	r3, #32
 8003076:	d060      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x156>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d867      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x168>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05c      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x156>
 8003080:	2b10      	cmp	r3, #16
 8003082:	d05a      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003084:	e062      	b.n	800314c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f000 faee 	bl	8003676 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	609a      	str	r2, [r3, #8]
      break;
 80030b2:	e04e      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6899      	ldr	r1, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f000 fad7 	bl	8003676 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e03b      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 fa4e 	bl	8003588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2150      	movs	r1, #80	; 0x50
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 faa5 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 80030f8:	e02b      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	461a      	mov	r2, r3
 8003108:	f000 fa6c 	bl	80035e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2160      	movs	r1, #96	; 0x60
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fa95 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003118:	e01b      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	461a      	mov	r2, r3
 8003128:	f000 fa2e 	bl	8003588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2140      	movs	r1, #64	; 0x40
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa85 	bl	8003642 <TIM_ITRx_SetConfig>
      break;
 8003138:	e00b      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 fa7c 	bl	8003642 <TIM_ITRx_SetConfig>
        break;
 800314a:	e002      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003150:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <TIM_Base_SetConfig+0xb8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a26      	ldr	r2, [pc, #152]	; (8003270 <TIM_Base_SetConfig+0xbc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x30>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a25      	ldr	r2, [pc, #148]	; (8003274 <TIM_Base_SetConfig+0xc0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	; (800326c <TIM_Base_SetConfig+0xb8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00b      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d007      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <TIM_Base_SetConfig+0xbc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d003      	beq.n	8003216 <TIM_Base_SetConfig+0x62>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a18      	ldr	r2, [pc, #96]	; (8003274 <TIM_Base_SetConfig+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <TIM_Base_SetConfig+0xb8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40000800 	.word	0x40000800

08003278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f023 0302 	bic.w	r3, r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <TIM_OC1_SetConfig+0xc8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10c      	bne.n	80032ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0308 	bic.w	r3, r3, #8
 80032da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <TIM_OC1_SetConfig+0xc8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d111      	bne.n	800331a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40012c00 	.word	0x40012c00

08003344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0320 	bic.w	r3, r3, #32
 800338e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <TIM_OC2_SetConfig+0xd0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10d      	bne.n	80033c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a14      	ldr	r2, [pc, #80]	; (8003414 <TIM_OC2_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d113      	bne.n	80033f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40012c00 	.word	0x40012c00

08003418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <TIM_OC3_SetConfig+0xd0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10d      	bne.n	8003492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800347c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <TIM_OC3_SetConfig+0xd0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d113      	bne.n	80034c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	621a      	str	r2, [r3, #32]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00

080034ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	031b      	lsls	r3, r3, #12
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <TIM_OC4_SetConfig+0x98>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d109      	bne.n	8003560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	621a      	str	r2, [r3, #32]
}
 800357a:	bf00      	nop
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00

08003588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 030a 	bic.w	r3, r3, #10
 80035c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 0210 	bic.w	r2, r3, #16
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800360e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	031b      	lsls	r3, r3, #12
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	621a      	str	r2, [r3, #32]
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	f043 0307 	orr.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	021a      	lsls	r2, r3, #8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4313      	orrs	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	2201      	movs	r2, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	401a      	ands	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e046      	b.n	80037a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d009      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10c      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800377c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800

080037b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e03f      	b.n	800386e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd ff70 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800381e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fc85 	bl	8004130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b08a      	sub	sp, #40	; 0x28
 800387a:	af02      	add	r7, sp, #8
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	d17c      	bne.n	8003990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_Transmit+0x2c>
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e075      	b.n	8003992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Transmit+0x3e>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e06e      	b.n	8003992 <HAL_UART_Transmit+0x11c>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2221      	movs	r2, #33	; 0x21
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ca:	f7fe f85f 	bl	800198c <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	88fa      	ldrh	r2, [r7, #6]
 80038da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d108      	bne.n	80038f8 <HAL_UART_Transmit+0x82>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d104      	bne.n	80038f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e003      	b.n	8003900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003908:	e02a      	b.n	8003960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2200      	movs	r2, #0
 8003912:	2180      	movs	r1, #128	; 0x80
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa38 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e036      	b.n	8003992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	3302      	adds	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e007      	b.n	8003952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1cf      	bne.n	800390a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2140      	movs	r1, #64	; 0x40
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fa08 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e006      	b.n	8003992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d11d      	bne.n	80039f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Receive_IT+0x26>
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e016      	b.n	80039f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Receive_IT+0x38>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e00f      	b.n	80039f2 <HAL_UART_Receive_IT+0x58>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	461a      	mov	r2, r3
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fa19 	bl	8003e1e <UART_Start_Receive_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	e000      	b.n	80039f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_UART_IRQHandler+0x52>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fac9 	bl	8003fde <UART_Receive_IT>
      return;
 8003a4c:	e17b      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80b1 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x1bc>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_UART_IRQHandler+0x70>
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80a6 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <HAL_UART_IRQHandler+0x90>
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_UART_IRQHandler+0xb0>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0202 	orr.w	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_UART_IRQHandler+0xd0>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f043 0204 	orr.w	r2, r3, #4
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00f      	beq.n	8003af6 <HAL_UART_IRQHandler+0xfa>
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_UART_IRQHandler+0xee>
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	f043 0208 	orr.w	r2, r3, #8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 811e 	beq.w	8003d3c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_UART_IRQHandler+0x11e>
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa62 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_UART_IRQHandler+0x146>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d031      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9a4 	bl	8003e90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b64:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d013      	beq.n	8003b96 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_UART_IRQHandler+0x350>)
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe f858 	bl	8001c30 <HAL_DMA_Abort_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b90:	4610      	mov	r0, r2
 8003b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	e00e      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8e3 	bl	8003d62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	e00a      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8df 	bl	8003d62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e006      	b.n	8003bb4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8db 	bl	8003d62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bb2:	e0c3      	b.n	8003d3c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	bf00      	nop
    return;
 8003bb6:	e0c1      	b.n	8003d3c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	f040 80a1 	bne.w	8003d04 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 809b 	beq.w	8003d04 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8095 	beq.w	8003d04 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04e      	beq.n	8003c9c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003c08:	8a3b      	ldrh	r3, [r7, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8098 	beq.w	8003d40 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c14:	8a3a      	ldrh	r2, [r7, #16]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	f080 8092 	bcs.w	8003d40 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8a3a      	ldrh	r2, [r7, #16]
 8003c20:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d02b      	beq.n	8003c84 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c3a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0210 	bic.w	r2, r2, #16
 8003c78:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd ff9b 	bl	8001bba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f86d 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c9a:	e051      	b.n	8003d40 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d047      	beq.n	8003d44 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003cb4:	8a7b      	ldrh	r3, [r7, #18]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d044      	beq.n	8003d44 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cc8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0210 	bic.w	r2, r2, #16
 8003cf6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf8:	8a7b      	ldrh	r3, [r7, #18]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f839 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d02:	e01f      	b.n	8003d44 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d008      	beq.n	8003d20 <HAL_UART_IRQHandler+0x324>
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8f9 	bl	8003f10 <UART_Transmit_IT>
    return;
 8003d1e:	e012      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_UART_IRQHandler+0x34a>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f93a 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003d3a:	e004      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
    return;
 8003d3c:	bf00      	nop
 8003d3e:	e002      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d40:	bf00      	nop
 8003d42:	e000      	b.n	8003d46 <HAL_UART_IRQHandler+0x34a>
      return;
 8003d44:	bf00      	nop
  }
}
 8003d46:	3728      	adds	r7, #40	; 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08003ee9 	.word	0x08003ee9

08003d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	e02c      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d028      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0x30>
 8003daa:	f7fd fdef 	bl	800198c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d21d      	bcs.n	8003df6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0c3      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e62:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ea6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff2d 	bl	8003d62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b21      	cmp	r3, #33	; 0x21
 8003f22:	d13e      	bne.n	8003fa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d114      	bne.n	8003f58 <UART_Transmit_IT+0x48>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d110      	bne.n	8003f58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	1c9a      	adds	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]
 8003f56:	e008      	b.n	8003f6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6211      	str	r1, [r2, #32]
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4619      	mov	r1, r3
 8003f78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff febe 	bl	8003d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	f040 8099 	bne.w	8004126 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d117      	bne.n	800402e <UART_Receive_IT+0x50>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d113      	bne.n	800402e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800401c:	b29a      	uxth	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c9a      	adds	r2, r3, #2
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
 800402c:	e026      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d148      	bne.n	8004122 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d123      	bne.n	8004118 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0210 	bic.w	r2, r2, #16
 80040e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d10a      	bne.n	800410a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fe2f 	bl	8003d74 <HAL_UARTEx_RxEventCallback>
 8004116:	e002      	b.n	800411e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fc f82f 	bl	800017c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e002      	b.n	8004128 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800416a:	f023 030c 	bic.w	r3, r3, #12
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	68b9      	ldr	r1, [r7, #8]
 8004174:	430b      	orrs	r3, r1
 8004176:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <UART_SetConfig+0x114>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fb90 	bl	80028bc <HAL_RCC_GetPCLK2Freq>
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	e002      	b.n	80041a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041a0:	f7fe fb78 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	4a22      	ldr	r2, [pc, #136]	; (8004248 <UART_SetConfig+0x118>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	0119      	lsls	r1, r3, #4
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	441a      	add	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <UART_SetConfig+0x118>)
 80041de:	fba3 0302 	umull	r0, r3, r3, r2
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	fb00 f303 	mul.w	r3, r0, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	3332      	adds	r3, #50	; 0x32
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <UART_SetConfig+0x118>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fc:	4419      	add	r1, r3
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009a      	lsls	r2, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	fbb2 f2f3 	udiv	r2, r2, r3
 8004214:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <UART_SetConfig+0x118>)
 8004216:	fba3 0302 	umull	r0, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	2064      	movs	r0, #100	; 0x64
 800421e:	fb00 f303 	mul.w	r3, r0, r3
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	3332      	adds	r3, #50	; 0x32
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <UART_SetConfig+0x118>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	f003 020f 	and.w	r2, r3, #15
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	440a      	add	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40013800 	.word	0x40013800
 8004248:	51eb851f 	.word	0x51eb851f

0800424c <__errno>:
 800424c:	4b01      	ldr	r3, [pc, #4]	; (8004254 <__errno+0x8>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	2000001c 	.word	0x2000001c

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	2600      	movs	r6, #0
 800425c:	4d0c      	ldr	r5, [pc, #48]	; (8004290 <__libc_init_array+0x38>)
 800425e:	4c0d      	ldr	r4, [pc, #52]	; (8004294 <__libc_init_array+0x3c>)
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	42a6      	cmp	r6, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	f000 fc9c 	bl	8004ba4 <_init>
 800426c:	2600      	movs	r6, #0
 800426e:	4d0a      	ldr	r5, [pc, #40]	; (8004298 <__libc_init_array+0x40>)
 8004270:	4c0a      	ldr	r4, [pc, #40]	; (800429c <__libc_init_array+0x44>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	42a6      	cmp	r6, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004280:	4798      	blx	r3
 8004282:	3601      	adds	r6, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	f855 3b04 	ldr.w	r3, [r5], #4
 800428a:	4798      	blx	r3
 800428c:	3601      	adds	r6, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	08004c24 	.word	0x08004c24
 8004294:	08004c24 	.word	0x08004c24
 8004298:	08004c24 	.word	0x08004c24
 800429c:	08004c28 	.word	0x08004c28

080042a0 <memset>:
 80042a0:	4603      	mov	r3, r0
 80042a2:	4402      	add	r2, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	f803 1b01 	strb.w	r1, [r3], #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <siprintf>:
 80042b0:	b40e      	push	{r1, r2, r3}
 80042b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	ab1d      	add	r3, sp, #116	; 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	9107      	str	r1, [sp, #28]
 80042c2:	9104      	str	r1, [sp, #16]
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <siprintf+0x38>)
 80042c6:	4909      	ldr	r1, [pc, #36]	; (80042ec <siprintf+0x3c>)
 80042c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042cc:	9105      	str	r1, [sp, #20]
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	a902      	add	r1, sp, #8
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	f000 f868 	bl	80043a8 <_svfiprintf_r>
 80042d8:	2200      	movs	r2, #0
 80042da:	9b02      	ldr	r3, [sp, #8]
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	b01c      	add	sp, #112	; 0x70
 80042e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e4:	b003      	add	sp, #12
 80042e6:	4770      	bx	lr
 80042e8:	2000001c 	.word	0x2000001c
 80042ec:	ffff0208 	.word	0xffff0208

080042f0 <__ssputs_r>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	688e      	ldr	r6, [r1, #8]
 80042f6:	4682      	mov	sl, r0
 80042f8:	429e      	cmp	r6, r3
 80042fa:	460c      	mov	r4, r1
 80042fc:	4690      	mov	r8, r2
 80042fe:	461f      	mov	r7, r3
 8004300:	d838      	bhi.n	8004374 <__ssputs_r+0x84>
 8004302:	898a      	ldrh	r2, [r1, #12]
 8004304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004308:	d032      	beq.n	8004370 <__ssputs_r+0x80>
 800430a:	6825      	ldr	r5, [r4, #0]
 800430c:	6909      	ldr	r1, [r1, #16]
 800430e:	3301      	adds	r3, #1
 8004310:	eba5 0901 	sub.w	r9, r5, r1
 8004314:	6965      	ldr	r5, [r4, #20]
 8004316:	444b      	add	r3, r9
 8004318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800431c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004320:	106d      	asrs	r5, r5, #1
 8004322:	429d      	cmp	r5, r3
 8004324:	bf38      	it	cc
 8004326:	461d      	movcc	r5, r3
 8004328:	0553      	lsls	r3, r2, #21
 800432a:	d531      	bpl.n	8004390 <__ssputs_r+0xa0>
 800432c:	4629      	mov	r1, r5
 800432e:	f000 fb6f 	bl	8004a10 <_malloc_r>
 8004332:	4606      	mov	r6, r0
 8004334:	b950      	cbnz	r0, 800434c <__ssputs_r+0x5c>
 8004336:	230c      	movs	r3, #12
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	f8ca 3000 	str.w	r3, [sl]
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434c:	464a      	mov	r2, r9
 800434e:	6921      	ldr	r1, [r4, #16]
 8004350:	f000 face 	bl	80048f0 <memcpy>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800435a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	6126      	str	r6, [r4, #16]
 8004362:	444e      	add	r6, r9
 8004364:	6026      	str	r6, [r4, #0]
 8004366:	463e      	mov	r6, r7
 8004368:	6165      	str	r5, [r4, #20]
 800436a:	eba5 0509 	sub.w	r5, r5, r9
 800436e:	60a5      	str	r5, [r4, #8]
 8004370:	42be      	cmp	r6, r7
 8004372:	d900      	bls.n	8004376 <__ssputs_r+0x86>
 8004374:	463e      	mov	r6, r7
 8004376:	4632      	mov	r2, r6
 8004378:	4641      	mov	r1, r8
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	f000 fac6 	bl	800490c <memmove>
 8004380:	68a3      	ldr	r3, [r4, #8]
 8004382:	2000      	movs	r0, #0
 8004384:	1b9b      	subs	r3, r3, r6
 8004386:	60a3      	str	r3, [r4, #8]
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	4433      	add	r3, r6
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	e7db      	b.n	8004348 <__ssputs_r+0x58>
 8004390:	462a      	mov	r2, r5
 8004392:	f000 fbb1 	bl	8004af8 <_realloc_r>
 8004396:	4606      	mov	r6, r0
 8004398:	2800      	cmp	r0, #0
 800439a:	d1e1      	bne.n	8004360 <__ssputs_r+0x70>
 800439c:	4650      	mov	r0, sl
 800439e:	6921      	ldr	r1, [r4, #16]
 80043a0:	f000 face 	bl	8004940 <_free_r>
 80043a4:	e7c7      	b.n	8004336 <__ssputs_r+0x46>
	...

080043a8 <_svfiprintf_r>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	4698      	mov	r8, r3
 80043ae:	898b      	ldrh	r3, [r1, #12]
 80043b0:	4607      	mov	r7, r0
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	460d      	mov	r5, r1
 80043b6:	4614      	mov	r4, r2
 80043b8:	b09d      	sub	sp, #116	; 0x74
 80043ba:	d50e      	bpl.n	80043da <_svfiprintf_r+0x32>
 80043bc:	690b      	ldr	r3, [r1, #16]
 80043be:	b963      	cbnz	r3, 80043da <_svfiprintf_r+0x32>
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	f000 fb25 	bl	8004a10 <_malloc_r>
 80043c6:	6028      	str	r0, [r5, #0]
 80043c8:	6128      	str	r0, [r5, #16]
 80043ca:	b920      	cbnz	r0, 80043d6 <_svfiprintf_r+0x2e>
 80043cc:	230c      	movs	r3, #12
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	e0d1      	b.n	800457a <_svfiprintf_r+0x1d2>
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	616b      	str	r3, [r5, #20]
 80043da:	2300      	movs	r3, #0
 80043dc:	9309      	str	r3, [sp, #36]	; 0x24
 80043de:	2320      	movs	r3, #32
 80043e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043e4:	2330      	movs	r3, #48	; 0x30
 80043e6:	f04f 0901 	mov.w	r9, #1
 80043ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004594 <_svfiprintf_r+0x1ec>
 80043f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043f6:	4623      	mov	r3, r4
 80043f8:	469a      	mov	sl, r3
 80043fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043fe:	b10a      	cbz	r2, 8004404 <_svfiprintf_r+0x5c>
 8004400:	2a25      	cmp	r2, #37	; 0x25
 8004402:	d1f9      	bne.n	80043f8 <_svfiprintf_r+0x50>
 8004404:	ebba 0b04 	subs.w	fp, sl, r4
 8004408:	d00b      	beq.n	8004422 <_svfiprintf_r+0x7a>
 800440a:	465b      	mov	r3, fp
 800440c:	4622      	mov	r2, r4
 800440e:	4629      	mov	r1, r5
 8004410:	4638      	mov	r0, r7
 8004412:	f7ff ff6d 	bl	80042f0 <__ssputs_r>
 8004416:	3001      	adds	r0, #1
 8004418:	f000 80aa 	beq.w	8004570 <_svfiprintf_r+0x1c8>
 800441c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800441e:	445a      	add	r2, fp
 8004420:	9209      	str	r2, [sp, #36]	; 0x24
 8004422:	f89a 3000 	ldrb.w	r3, [sl]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80a2 	beq.w	8004570 <_svfiprintf_r+0x1c8>
 800442c:	2300      	movs	r3, #0
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004436:	f10a 0a01 	add.w	sl, sl, #1
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	9307      	str	r3, [sp, #28]
 800443e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004442:	931a      	str	r3, [sp, #104]	; 0x68
 8004444:	4654      	mov	r4, sl
 8004446:	2205      	movs	r2, #5
 8004448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800444c:	4851      	ldr	r0, [pc, #324]	; (8004594 <_svfiprintf_r+0x1ec>)
 800444e:	f000 fa41 	bl	80048d4 <memchr>
 8004452:	9a04      	ldr	r2, [sp, #16]
 8004454:	b9d8      	cbnz	r0, 800448e <_svfiprintf_r+0xe6>
 8004456:	06d0      	lsls	r0, r2, #27
 8004458:	bf44      	itt	mi
 800445a:	2320      	movmi	r3, #32
 800445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004460:	0711      	lsls	r1, r2, #28
 8004462:	bf44      	itt	mi
 8004464:	232b      	movmi	r3, #43	; 0x2b
 8004466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446a:	f89a 3000 	ldrb.w	r3, [sl]
 800446e:	2b2a      	cmp	r3, #42	; 0x2a
 8004470:	d015      	beq.n	800449e <_svfiprintf_r+0xf6>
 8004472:	4654      	mov	r4, sl
 8004474:	2000      	movs	r0, #0
 8004476:	f04f 0c0a 	mov.w	ip, #10
 800447a:	9a07      	ldr	r2, [sp, #28]
 800447c:	4621      	mov	r1, r4
 800447e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004482:	3b30      	subs	r3, #48	; 0x30
 8004484:	2b09      	cmp	r3, #9
 8004486:	d94e      	bls.n	8004526 <_svfiprintf_r+0x17e>
 8004488:	b1b0      	cbz	r0, 80044b8 <_svfiprintf_r+0x110>
 800448a:	9207      	str	r2, [sp, #28]
 800448c:	e014      	b.n	80044b8 <_svfiprintf_r+0x110>
 800448e:	eba0 0308 	sub.w	r3, r0, r8
 8004492:	fa09 f303 	lsl.w	r3, r9, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	46a2      	mov	sl, r4
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	e7d2      	b.n	8004444 <_svfiprintf_r+0x9c>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9103      	str	r1, [sp, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfbb      	ittet	lt
 80044aa:	425b      	neglt	r3, r3
 80044ac:	f042 0202 	orrlt.w	r2, r2, #2
 80044b0:	9307      	strge	r3, [sp, #28]
 80044b2:	9307      	strlt	r3, [sp, #28]
 80044b4:	bfb8      	it	lt
 80044b6:	9204      	strlt	r2, [sp, #16]
 80044b8:	7823      	ldrb	r3, [r4, #0]
 80044ba:	2b2e      	cmp	r3, #46	; 0x2e
 80044bc:	d10c      	bne.n	80044d8 <_svfiprintf_r+0x130>
 80044be:	7863      	ldrb	r3, [r4, #1]
 80044c0:	2b2a      	cmp	r3, #42	; 0x2a
 80044c2:	d135      	bne.n	8004530 <_svfiprintf_r+0x188>
 80044c4:	9b03      	ldr	r3, [sp, #12]
 80044c6:	3402      	adds	r4, #2
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	9203      	str	r2, [sp, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bfb8      	it	lt
 80044d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004598 <_svfiprintf_r+0x1f0>
 80044dc:	2203      	movs	r2, #3
 80044de:	4650      	mov	r0, sl
 80044e0:	7821      	ldrb	r1, [r4, #0]
 80044e2:	f000 f9f7 	bl	80048d4 <memchr>
 80044e6:	b140      	cbz	r0, 80044fa <_svfiprintf_r+0x152>
 80044e8:	2340      	movs	r3, #64	; 0x40
 80044ea:	eba0 000a 	sub.w	r0, r0, sl
 80044ee:	fa03 f000 	lsl.w	r0, r3, r0
 80044f2:	9b04      	ldr	r3, [sp, #16]
 80044f4:	3401      	adds	r4, #1
 80044f6:	4303      	orrs	r3, r0
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fe:	2206      	movs	r2, #6
 8004500:	4826      	ldr	r0, [pc, #152]	; (800459c <_svfiprintf_r+0x1f4>)
 8004502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004506:	f000 f9e5 	bl	80048d4 <memchr>
 800450a:	2800      	cmp	r0, #0
 800450c:	d038      	beq.n	8004580 <_svfiprintf_r+0x1d8>
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <_svfiprintf_r+0x1f8>)
 8004510:	bb1b      	cbnz	r3, 800455a <_svfiprintf_r+0x1b2>
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	3307      	adds	r3, #7
 8004516:	f023 0307 	bic.w	r3, r3, #7
 800451a:	3308      	adds	r3, #8
 800451c:	9303      	str	r3, [sp, #12]
 800451e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004520:	4433      	add	r3, r6
 8004522:	9309      	str	r3, [sp, #36]	; 0x24
 8004524:	e767      	b.n	80043f6 <_svfiprintf_r+0x4e>
 8004526:	460c      	mov	r4, r1
 8004528:	2001      	movs	r0, #1
 800452a:	fb0c 3202 	mla	r2, ip, r2, r3
 800452e:	e7a5      	b.n	800447c <_svfiprintf_r+0xd4>
 8004530:	2300      	movs	r3, #0
 8004532:	f04f 0c0a 	mov.w	ip, #10
 8004536:	4619      	mov	r1, r3
 8004538:	3401      	adds	r4, #1
 800453a:	9305      	str	r3, [sp, #20]
 800453c:	4620      	mov	r0, r4
 800453e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004542:	3a30      	subs	r2, #48	; 0x30
 8004544:	2a09      	cmp	r2, #9
 8004546:	d903      	bls.n	8004550 <_svfiprintf_r+0x1a8>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0c5      	beq.n	80044d8 <_svfiprintf_r+0x130>
 800454c:	9105      	str	r1, [sp, #20]
 800454e:	e7c3      	b.n	80044d8 <_svfiprintf_r+0x130>
 8004550:	4604      	mov	r4, r0
 8004552:	2301      	movs	r3, #1
 8004554:	fb0c 2101 	mla	r1, ip, r1, r2
 8004558:	e7f0      	b.n	800453c <_svfiprintf_r+0x194>
 800455a:	ab03      	add	r3, sp, #12
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	462a      	mov	r2, r5
 8004560:	4638      	mov	r0, r7
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <_svfiprintf_r+0x1fc>)
 8004564:	a904      	add	r1, sp, #16
 8004566:	f3af 8000 	nop.w
 800456a:	1c42      	adds	r2, r0, #1
 800456c:	4606      	mov	r6, r0
 800456e:	d1d6      	bne.n	800451e <_svfiprintf_r+0x176>
 8004570:	89ab      	ldrh	r3, [r5, #12]
 8004572:	065b      	lsls	r3, r3, #25
 8004574:	f53f af2c 	bmi.w	80043d0 <_svfiprintf_r+0x28>
 8004578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800457a:	b01d      	add	sp, #116	; 0x74
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	ab03      	add	r3, sp, #12
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	462a      	mov	r2, r5
 8004586:	4638      	mov	r0, r7
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <_svfiprintf_r+0x1fc>)
 800458a:	a904      	add	r1, sp, #16
 800458c:	f000 f87c 	bl	8004688 <_printf_i>
 8004590:	e7eb      	b.n	800456a <_svfiprintf_r+0x1c2>
 8004592:	bf00      	nop
 8004594:	08004bf0 	.word	0x08004bf0
 8004598:	08004bf6 	.word	0x08004bf6
 800459c:	08004bfa 	.word	0x08004bfa
 80045a0:	00000000 	.word	0x00000000
 80045a4:	080042f1 	.word	0x080042f1

080045a8 <_printf_common>:
 80045a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ac:	4616      	mov	r6, r2
 80045ae:	4699      	mov	r9, r3
 80045b0:	688a      	ldr	r2, [r1, #8]
 80045b2:	690b      	ldr	r3, [r1, #16]
 80045b4:	4607      	mov	r7, r0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfb8      	it	lt
 80045ba:	4613      	movlt	r3, r2
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045c2:	460c      	mov	r4, r1
 80045c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045c8:	b10a      	cbz	r2, 80045ce <_printf_common+0x26>
 80045ca:	3301      	adds	r3, #1
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	0699      	lsls	r1, r3, #26
 80045d2:	bf42      	ittt	mi
 80045d4:	6833      	ldrmi	r3, [r6, #0]
 80045d6:	3302      	addmi	r3, #2
 80045d8:	6033      	strmi	r3, [r6, #0]
 80045da:	6825      	ldr	r5, [r4, #0]
 80045dc:	f015 0506 	ands.w	r5, r5, #6
 80045e0:	d106      	bne.n	80045f0 <_printf_common+0x48>
 80045e2:	f104 0a19 	add.w	sl, r4, #25
 80045e6:	68e3      	ldr	r3, [r4, #12]
 80045e8:	6832      	ldr	r2, [r6, #0]
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	42ab      	cmp	r3, r5
 80045ee:	dc28      	bgt.n	8004642 <_printf_common+0x9a>
 80045f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045f4:	1e13      	subs	r3, r2, #0
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	bf18      	it	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	0692      	lsls	r2, r2, #26
 80045fe:	d42d      	bmi.n	800465c <_printf_common+0xb4>
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004608:	47c0      	blx	r8
 800460a:	3001      	adds	r0, #1
 800460c:	d020      	beq.n	8004650 <_printf_common+0xa8>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	68e5      	ldr	r5, [r4, #12]
 8004612:	f003 0306 	and.w	r3, r3, #6
 8004616:	2b04      	cmp	r3, #4
 8004618:	bf18      	it	ne
 800461a:	2500      	movne	r5, #0
 800461c:	6832      	ldr	r2, [r6, #0]
 800461e:	f04f 0600 	mov.w	r6, #0
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	bf08      	it	eq
 8004626:	1aad      	subeq	r5, r5, r2
 8004628:	6922      	ldr	r2, [r4, #16]
 800462a:	bf08      	it	eq
 800462c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004630:	4293      	cmp	r3, r2
 8004632:	bfc4      	itt	gt
 8004634:	1a9b      	subgt	r3, r3, r2
 8004636:	18ed      	addgt	r5, r5, r3
 8004638:	341a      	adds	r4, #26
 800463a:	42b5      	cmp	r5, r6
 800463c:	d11a      	bne.n	8004674 <_printf_common+0xcc>
 800463e:	2000      	movs	r0, #0
 8004640:	e008      	b.n	8004654 <_printf_common+0xac>
 8004642:	2301      	movs	r3, #1
 8004644:	4652      	mov	r2, sl
 8004646:	4649      	mov	r1, r9
 8004648:	4638      	mov	r0, r7
 800464a:	47c0      	blx	r8
 800464c:	3001      	adds	r0, #1
 800464e:	d103      	bne.n	8004658 <_printf_common+0xb0>
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	3501      	adds	r5, #1
 800465a:	e7c4      	b.n	80045e6 <_printf_common+0x3e>
 800465c:	2030      	movs	r0, #48	; 0x30
 800465e:	18e1      	adds	r1, r4, r3
 8004660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800466a:	4422      	add	r2, r4
 800466c:	3302      	adds	r3, #2
 800466e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004672:	e7c5      	b.n	8004600 <_printf_common+0x58>
 8004674:	2301      	movs	r3, #1
 8004676:	4622      	mov	r2, r4
 8004678:	4649      	mov	r1, r9
 800467a:	4638      	mov	r0, r7
 800467c:	47c0      	blx	r8
 800467e:	3001      	adds	r0, #1
 8004680:	d0e6      	beq.n	8004650 <_printf_common+0xa8>
 8004682:	3601      	adds	r6, #1
 8004684:	e7d9      	b.n	800463a <_printf_common+0x92>
	...

08004688 <_printf_i>:
 8004688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	7e0f      	ldrb	r7, [r1, #24]
 800468e:	4691      	mov	r9, r2
 8004690:	2f78      	cmp	r7, #120	; 0x78
 8004692:	4680      	mov	r8, r0
 8004694:	460c      	mov	r4, r1
 8004696:	469a      	mov	sl, r3
 8004698:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800469a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800469e:	d807      	bhi.n	80046b0 <_printf_i+0x28>
 80046a0:	2f62      	cmp	r7, #98	; 0x62
 80046a2:	d80a      	bhi.n	80046ba <_printf_i+0x32>
 80046a4:	2f00      	cmp	r7, #0
 80046a6:	f000 80d9 	beq.w	800485c <_printf_i+0x1d4>
 80046aa:	2f58      	cmp	r7, #88	; 0x58
 80046ac:	f000 80a4 	beq.w	80047f8 <_printf_i+0x170>
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046b8:	e03a      	b.n	8004730 <_printf_i+0xa8>
 80046ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046be:	2b15      	cmp	r3, #21
 80046c0:	d8f6      	bhi.n	80046b0 <_printf_i+0x28>
 80046c2:	a101      	add	r1, pc, #4	; (adr r1, 80046c8 <_printf_i+0x40>)
 80046c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004735 	.word	0x08004735
 80046d0:	080046b1 	.word	0x080046b1
 80046d4:	080046b1 	.word	0x080046b1
 80046d8:	080046b1 	.word	0x080046b1
 80046dc:	080046b1 	.word	0x080046b1
 80046e0:	08004735 	.word	0x08004735
 80046e4:	080046b1 	.word	0x080046b1
 80046e8:	080046b1 	.word	0x080046b1
 80046ec:	080046b1 	.word	0x080046b1
 80046f0:	080046b1 	.word	0x080046b1
 80046f4:	08004843 	.word	0x08004843
 80046f8:	08004765 	.word	0x08004765
 80046fc:	08004825 	.word	0x08004825
 8004700:	080046b1 	.word	0x080046b1
 8004704:	080046b1 	.word	0x080046b1
 8004708:	08004865 	.word	0x08004865
 800470c:	080046b1 	.word	0x080046b1
 8004710:	08004765 	.word	0x08004765
 8004714:	080046b1 	.word	0x080046b1
 8004718:	080046b1 	.word	0x080046b1
 800471c:	0800482d 	.word	0x0800482d
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800472c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004730:	2301      	movs	r3, #1
 8004732:	e0a4      	b.n	800487e <_printf_i+0x1f6>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	6829      	ldr	r1, [r5, #0]
 8004738:	0606      	lsls	r6, r0, #24
 800473a:	f101 0304 	add.w	r3, r1, #4
 800473e:	d50a      	bpl.n	8004756 <_printf_i+0xce>
 8004740:	680e      	ldr	r6, [r1, #0]
 8004742:	602b      	str	r3, [r5, #0]
 8004744:	2e00      	cmp	r6, #0
 8004746:	da03      	bge.n	8004750 <_printf_i+0xc8>
 8004748:	232d      	movs	r3, #45	; 0x2d
 800474a:	4276      	negs	r6, r6
 800474c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004750:	230a      	movs	r3, #10
 8004752:	485e      	ldr	r0, [pc, #376]	; (80048cc <_printf_i+0x244>)
 8004754:	e019      	b.n	800478a <_printf_i+0x102>
 8004756:	680e      	ldr	r6, [r1, #0]
 8004758:	f010 0f40 	tst.w	r0, #64	; 0x40
 800475c:	602b      	str	r3, [r5, #0]
 800475e:	bf18      	it	ne
 8004760:	b236      	sxthne	r6, r6
 8004762:	e7ef      	b.n	8004744 <_printf_i+0xbc>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	6029      	str	r1, [r5, #0]
 800476c:	0601      	lsls	r1, r0, #24
 800476e:	d501      	bpl.n	8004774 <_printf_i+0xec>
 8004770:	681e      	ldr	r6, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0xf2>
 8004774:	0646      	lsls	r6, r0, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0xe8>
 8004778:	881e      	ldrh	r6, [r3, #0]
 800477a:	2f6f      	cmp	r7, #111	; 0x6f
 800477c:	bf0c      	ite	eq
 800477e:	2308      	moveq	r3, #8
 8004780:	230a      	movne	r3, #10
 8004782:	4852      	ldr	r0, [pc, #328]	; (80048cc <_printf_i+0x244>)
 8004784:	2100      	movs	r1, #0
 8004786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800478a:	6865      	ldr	r5, [r4, #4]
 800478c:	2d00      	cmp	r5, #0
 800478e:	bfa8      	it	ge
 8004790:	6821      	ldrge	r1, [r4, #0]
 8004792:	60a5      	str	r5, [r4, #8]
 8004794:	bfa4      	itt	ge
 8004796:	f021 0104 	bicge.w	r1, r1, #4
 800479a:	6021      	strge	r1, [r4, #0]
 800479c:	b90e      	cbnz	r6, 80047a2 <_printf_i+0x11a>
 800479e:	2d00      	cmp	r5, #0
 80047a0:	d04d      	beq.n	800483e <_printf_i+0x1b6>
 80047a2:	4615      	mov	r5, r2
 80047a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80047a8:	fb03 6711 	mls	r7, r3, r1, r6
 80047ac:	5dc7      	ldrb	r7, [r0, r7]
 80047ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b2:	4637      	mov	r7, r6
 80047b4:	42bb      	cmp	r3, r7
 80047b6:	460e      	mov	r6, r1
 80047b8:	d9f4      	bls.n	80047a4 <_printf_i+0x11c>
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d10b      	bne.n	80047d6 <_printf_i+0x14e>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	07de      	lsls	r6, r3, #31
 80047c2:	d508      	bpl.n	80047d6 <_printf_i+0x14e>
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	6861      	ldr	r1, [r4, #4]
 80047c8:	4299      	cmp	r1, r3
 80047ca:	bfde      	ittt	le
 80047cc:	2330      	movle	r3, #48	; 0x30
 80047ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047d6:	1b52      	subs	r2, r2, r5
 80047d8:	6122      	str	r2, [r4, #16]
 80047da:	464b      	mov	r3, r9
 80047dc:	4621      	mov	r1, r4
 80047de:	4640      	mov	r0, r8
 80047e0:	f8cd a000 	str.w	sl, [sp]
 80047e4:	aa03      	add	r2, sp, #12
 80047e6:	f7ff fedf 	bl	80045a8 <_printf_common>
 80047ea:	3001      	adds	r0, #1
 80047ec:	d14c      	bne.n	8004888 <_printf_i+0x200>
 80047ee:	f04f 30ff 	mov.w	r0, #4294967295
 80047f2:	b004      	add	sp, #16
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	4834      	ldr	r0, [pc, #208]	; (80048cc <_printf_i+0x244>)
 80047fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047fe:	6829      	ldr	r1, [r5, #0]
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	f851 6b04 	ldr.w	r6, [r1], #4
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	061d      	lsls	r5, r3, #24
 800480a:	d514      	bpl.n	8004836 <_printf_i+0x1ae>
 800480c:	07df      	lsls	r7, r3, #31
 800480e:	bf44      	itt	mi
 8004810:	f043 0320 	orrmi.w	r3, r3, #32
 8004814:	6023      	strmi	r3, [r4, #0]
 8004816:	b91e      	cbnz	r6, 8004820 <_printf_i+0x198>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	2310      	movs	r3, #16
 8004822:	e7af      	b.n	8004784 <_printf_i+0xfc>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	f043 0320 	orr.w	r3, r3, #32
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	2378      	movs	r3, #120	; 0x78
 800482e:	4828      	ldr	r0, [pc, #160]	; (80048d0 <_printf_i+0x248>)
 8004830:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004834:	e7e3      	b.n	80047fe <_printf_i+0x176>
 8004836:	0659      	lsls	r1, r3, #25
 8004838:	bf48      	it	mi
 800483a:	b2b6      	uxthmi	r6, r6
 800483c:	e7e6      	b.n	800480c <_printf_i+0x184>
 800483e:	4615      	mov	r5, r2
 8004840:	e7bb      	b.n	80047ba <_printf_i+0x132>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	6826      	ldr	r6, [r4, #0]
 8004846:	1d18      	adds	r0, r3, #4
 8004848:	6961      	ldr	r1, [r4, #20]
 800484a:	6028      	str	r0, [r5, #0]
 800484c:	0635      	lsls	r5, r6, #24
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	d501      	bpl.n	8004856 <_printf_i+0x1ce>
 8004852:	6019      	str	r1, [r3, #0]
 8004854:	e002      	b.n	800485c <_printf_i+0x1d4>
 8004856:	0670      	lsls	r0, r6, #25
 8004858:	d5fb      	bpl.n	8004852 <_printf_i+0x1ca>
 800485a:	8019      	strh	r1, [r3, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	4615      	mov	r5, r2
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	e7ba      	b.n	80047da <_printf_i+0x152>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	2100      	movs	r1, #0
 8004868:	1d1a      	adds	r2, r3, #4
 800486a:	602a      	str	r2, [r5, #0]
 800486c:	681d      	ldr	r5, [r3, #0]
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	4628      	mov	r0, r5
 8004872:	f000 f82f 	bl	80048d4 <memchr>
 8004876:	b108      	cbz	r0, 800487c <_printf_i+0x1f4>
 8004878:	1b40      	subs	r0, r0, r5
 800487a:	6060      	str	r0, [r4, #4]
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	6123      	str	r3, [r4, #16]
 8004880:	2300      	movs	r3, #0
 8004882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004886:	e7a8      	b.n	80047da <_printf_i+0x152>
 8004888:	462a      	mov	r2, r5
 800488a:	4649      	mov	r1, r9
 800488c:	4640      	mov	r0, r8
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	47d0      	blx	sl
 8004892:	3001      	adds	r0, #1
 8004894:	d0ab      	beq.n	80047ee <_printf_i+0x166>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	079b      	lsls	r3, r3, #30
 800489a:	d413      	bmi.n	80048c4 <_printf_i+0x23c>
 800489c:	68e0      	ldr	r0, [r4, #12]
 800489e:	9b03      	ldr	r3, [sp, #12]
 80048a0:	4298      	cmp	r0, r3
 80048a2:	bfb8      	it	lt
 80048a4:	4618      	movlt	r0, r3
 80048a6:	e7a4      	b.n	80047f2 <_printf_i+0x16a>
 80048a8:	2301      	movs	r3, #1
 80048aa:	4632      	mov	r2, r6
 80048ac:	4649      	mov	r1, r9
 80048ae:	4640      	mov	r0, r8
 80048b0:	47d0      	blx	sl
 80048b2:	3001      	adds	r0, #1
 80048b4:	d09b      	beq.n	80047ee <_printf_i+0x166>
 80048b6:	3501      	adds	r5, #1
 80048b8:	68e3      	ldr	r3, [r4, #12]
 80048ba:	9903      	ldr	r1, [sp, #12]
 80048bc:	1a5b      	subs	r3, r3, r1
 80048be:	42ab      	cmp	r3, r5
 80048c0:	dcf2      	bgt.n	80048a8 <_printf_i+0x220>
 80048c2:	e7eb      	b.n	800489c <_printf_i+0x214>
 80048c4:	2500      	movs	r5, #0
 80048c6:	f104 0619 	add.w	r6, r4, #25
 80048ca:	e7f5      	b.n	80048b8 <_printf_i+0x230>
 80048cc:	08004c01 	.word	0x08004c01
 80048d0:	08004c12 	.word	0x08004c12

080048d4 <memchr>:
 80048d4:	4603      	mov	r3, r0
 80048d6:	b510      	push	{r4, lr}
 80048d8:	b2c9      	uxtb	r1, r1
 80048da:	4402      	add	r2, r0
 80048dc:	4293      	cmp	r3, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	d101      	bne.n	80048e6 <memchr+0x12>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e003      	b.n	80048ee <memchr+0x1a>
 80048e6:	7804      	ldrb	r4, [r0, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	428c      	cmp	r4, r1
 80048ec:	d1f6      	bne.n	80048dc <memchr+0x8>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <memcpy>:
 80048f0:	440a      	add	r2, r1
 80048f2:	4291      	cmp	r1, r2
 80048f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80048f8:	d100      	bne.n	80048fc <memcpy+0xc>
 80048fa:	4770      	bx	lr
 80048fc:	b510      	push	{r4, lr}
 80048fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004902:	4291      	cmp	r1, r2
 8004904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004908:	d1f9      	bne.n	80048fe <memcpy+0xe>
 800490a:	bd10      	pop	{r4, pc}

0800490c <memmove>:
 800490c:	4288      	cmp	r0, r1
 800490e:	b510      	push	{r4, lr}
 8004910:	eb01 0402 	add.w	r4, r1, r2
 8004914:	d902      	bls.n	800491c <memmove+0x10>
 8004916:	4284      	cmp	r4, r0
 8004918:	4623      	mov	r3, r4
 800491a:	d807      	bhi.n	800492c <memmove+0x20>
 800491c:	1e43      	subs	r3, r0, #1
 800491e:	42a1      	cmp	r1, r4
 8004920:	d008      	beq.n	8004934 <memmove+0x28>
 8004922:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800492a:	e7f8      	b.n	800491e <memmove+0x12>
 800492c:	4601      	mov	r1, r0
 800492e:	4402      	add	r2, r0
 8004930:	428a      	cmp	r2, r1
 8004932:	d100      	bne.n	8004936 <memmove+0x2a>
 8004934:	bd10      	pop	{r4, pc}
 8004936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800493a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800493e:	e7f7      	b.n	8004930 <memmove+0x24>

08004940 <_free_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4605      	mov	r5, r0
 8004944:	2900      	cmp	r1, #0
 8004946:	d040      	beq.n	80049ca <_free_r+0x8a>
 8004948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800494c:	1f0c      	subs	r4, r1, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	18e4      	addlt	r4, r4, r3
 8004954:	f000 f910 	bl	8004b78 <__malloc_lock>
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <_free_r+0x8c>)
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	b933      	cbnz	r3, 800496c <_free_r+0x2c>
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	4628      	mov	r0, r5
 8004964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004968:	f000 b90c 	b.w	8004b84 <__malloc_unlock>
 800496c:	42a3      	cmp	r3, r4
 800496e:	d908      	bls.n	8004982 <_free_r+0x42>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	1821      	adds	r1, r4, r0
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	e7ed      	b.n	800495e <_free_r+0x1e>
 8004982:	461a      	mov	r2, r3
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b10b      	cbz	r3, 800498c <_free_r+0x4c>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d9fa      	bls.n	8004982 <_free_r+0x42>
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	1850      	adds	r0, r2, r1
 8004990:	42a0      	cmp	r0, r4
 8004992:	d10b      	bne.n	80049ac <_free_r+0x6c>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4401      	add	r1, r0
 8004998:	1850      	adds	r0, r2, r1
 800499a:	4283      	cmp	r3, r0
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	d1e0      	bne.n	8004962 <_free_r+0x22>
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4401      	add	r1, r0
 80049a6:	6011      	str	r1, [r2, #0]
 80049a8:	6053      	str	r3, [r2, #4]
 80049aa:	e7da      	b.n	8004962 <_free_r+0x22>
 80049ac:	d902      	bls.n	80049b4 <_free_r+0x74>
 80049ae:	230c      	movs	r3, #12
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	e7d6      	b.n	8004962 <_free_r+0x22>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	1821      	adds	r1, r4, r0
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf01      	itttt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	1809      	addeq	r1, r1, r0
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	6054      	str	r4, [r2, #4]
 80049c8:	e7cb      	b.n	8004962 <_free_r+0x22>
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	200002f8 	.word	0x200002f8

080049d0 <sbrk_aligned>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4e0e      	ldr	r6, [pc, #56]	; (8004a0c <sbrk_aligned+0x3c>)
 80049d4:	460c      	mov	r4, r1
 80049d6:	6831      	ldr	r1, [r6, #0]
 80049d8:	4605      	mov	r5, r0
 80049da:	b911      	cbnz	r1, 80049e2 <sbrk_aligned+0x12>
 80049dc:	f000 f8bc 	bl	8004b58 <_sbrk_r>
 80049e0:	6030      	str	r0, [r6, #0]
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 f8b7 	bl	8004b58 <_sbrk_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d00a      	beq.n	8004a04 <sbrk_aligned+0x34>
 80049ee:	1cc4      	adds	r4, r0, #3
 80049f0:	f024 0403 	bic.w	r4, r4, #3
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d007      	beq.n	8004a08 <sbrk_aligned+0x38>
 80049f8:	1a21      	subs	r1, r4, r0
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f8ac 	bl	8004b58 <_sbrk_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d101      	bne.n	8004a08 <sbrk_aligned+0x38>
 8004a04:	f04f 34ff 	mov.w	r4, #4294967295
 8004a08:	4620      	mov	r0, r4
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	200002fc 	.word	0x200002fc

08004a10 <_malloc_r>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	1ccd      	adds	r5, r1, #3
 8004a16:	f025 0503 	bic.w	r5, r5, #3
 8004a1a:	3508      	adds	r5, #8
 8004a1c:	2d0c      	cmp	r5, #12
 8004a1e:	bf38      	it	cc
 8004a20:	250c      	movcc	r5, #12
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	4607      	mov	r7, r0
 8004a26:	db01      	blt.n	8004a2c <_malloc_r+0x1c>
 8004a28:	42a9      	cmp	r1, r5
 8004a2a:	d905      	bls.n	8004a38 <_malloc_r+0x28>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	2600      	movs	r6, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4630      	mov	r0, r6
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a38:	4e2e      	ldr	r6, [pc, #184]	; (8004af4 <_malloc_r+0xe4>)
 8004a3a:	f000 f89d 	bl	8004b78 <__malloc_lock>
 8004a3e:	6833      	ldr	r3, [r6, #0]
 8004a40:	461c      	mov	r4, r3
 8004a42:	bb34      	cbnz	r4, 8004a92 <_malloc_r+0x82>
 8004a44:	4629      	mov	r1, r5
 8004a46:	4638      	mov	r0, r7
 8004a48:	f7ff ffc2 	bl	80049d0 <sbrk_aligned>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	4604      	mov	r4, r0
 8004a50:	d14d      	bne.n	8004aee <_malloc_r+0xde>
 8004a52:	6834      	ldr	r4, [r6, #0]
 8004a54:	4626      	mov	r6, r4
 8004a56:	2e00      	cmp	r6, #0
 8004a58:	d140      	bne.n	8004adc <_malloc_r+0xcc>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4638      	mov	r0, r7
 8004a60:	eb04 0803 	add.w	r8, r4, r3
 8004a64:	f000 f878 	bl	8004b58 <_sbrk_r>
 8004a68:	4580      	cmp	r8, r0
 8004a6a:	d13a      	bne.n	8004ae2 <_malloc_r+0xd2>
 8004a6c:	6821      	ldr	r1, [r4, #0]
 8004a6e:	3503      	adds	r5, #3
 8004a70:	1a6d      	subs	r5, r5, r1
 8004a72:	f025 0503 	bic.w	r5, r5, #3
 8004a76:	3508      	adds	r5, #8
 8004a78:	2d0c      	cmp	r5, #12
 8004a7a:	bf38      	it	cc
 8004a7c:	250c      	movcc	r5, #12
 8004a7e:	4638      	mov	r0, r7
 8004a80:	4629      	mov	r1, r5
 8004a82:	f7ff ffa5 	bl	80049d0 <sbrk_aligned>
 8004a86:	3001      	adds	r0, #1
 8004a88:	d02b      	beq.n	8004ae2 <_malloc_r+0xd2>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	442b      	add	r3, r5
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	e00e      	b.n	8004ab0 <_malloc_r+0xa0>
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	1b52      	subs	r2, r2, r5
 8004a96:	d41e      	bmi.n	8004ad6 <_malloc_r+0xc6>
 8004a98:	2a0b      	cmp	r2, #11
 8004a9a:	d916      	bls.n	8004aca <_malloc_r+0xba>
 8004a9c:	1961      	adds	r1, r4, r5
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	6025      	str	r5, [r4, #0]
 8004aa2:	bf18      	it	ne
 8004aa4:	6059      	strne	r1, [r3, #4]
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	bf08      	it	eq
 8004aaa:	6031      	streq	r1, [r6, #0]
 8004aac:	5162      	str	r2, [r4, r5]
 8004aae:	604b      	str	r3, [r1, #4]
 8004ab0:	4638      	mov	r0, r7
 8004ab2:	f104 060b 	add.w	r6, r4, #11
 8004ab6:	f000 f865 	bl	8004b84 <__malloc_unlock>
 8004aba:	f026 0607 	bic.w	r6, r6, #7
 8004abe:	1d23      	adds	r3, r4, #4
 8004ac0:	1af2      	subs	r2, r6, r3
 8004ac2:	d0b6      	beq.n	8004a32 <_malloc_r+0x22>
 8004ac4:	1b9b      	subs	r3, r3, r6
 8004ac6:	50a3      	str	r3, [r4, r2]
 8004ac8:	e7b3      	b.n	8004a32 <_malloc_r+0x22>
 8004aca:	6862      	ldr	r2, [r4, #4]
 8004acc:	42a3      	cmp	r3, r4
 8004ace:	bf0c      	ite	eq
 8004ad0:	6032      	streq	r2, [r6, #0]
 8004ad2:	605a      	strne	r2, [r3, #4]
 8004ad4:	e7ec      	b.n	8004ab0 <_malloc_r+0xa0>
 8004ad6:	4623      	mov	r3, r4
 8004ad8:	6864      	ldr	r4, [r4, #4]
 8004ada:	e7b2      	b.n	8004a42 <_malloc_r+0x32>
 8004adc:	4634      	mov	r4, r6
 8004ade:	6876      	ldr	r6, [r6, #4]
 8004ae0:	e7b9      	b.n	8004a56 <_malloc_r+0x46>
 8004ae2:	230c      	movs	r3, #12
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	f000 f84c 	bl	8004b84 <__malloc_unlock>
 8004aec:	e7a1      	b.n	8004a32 <_malloc_r+0x22>
 8004aee:	6025      	str	r5, [r4, #0]
 8004af0:	e7de      	b.n	8004ab0 <_malloc_r+0xa0>
 8004af2:	bf00      	nop
 8004af4:	200002f8 	.word	0x200002f8

08004af8 <_realloc_r>:
 8004af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afc:	4680      	mov	r8, r0
 8004afe:	4614      	mov	r4, r2
 8004b00:	460e      	mov	r6, r1
 8004b02:	b921      	cbnz	r1, 8004b0e <_realloc_r+0x16>
 8004b04:	4611      	mov	r1, r2
 8004b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0a:	f7ff bf81 	b.w	8004a10 <_malloc_r>
 8004b0e:	b92a      	cbnz	r2, 8004b1c <_realloc_r+0x24>
 8004b10:	f7ff ff16 	bl	8004940 <_free_r>
 8004b14:	4625      	mov	r5, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b1c:	f000 f838 	bl	8004b90 <_malloc_usable_size_r>
 8004b20:	4284      	cmp	r4, r0
 8004b22:	4607      	mov	r7, r0
 8004b24:	d802      	bhi.n	8004b2c <_realloc_r+0x34>
 8004b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b2a:	d812      	bhi.n	8004b52 <_realloc_r+0x5a>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7ff ff6e 	bl	8004a10 <_malloc_r>
 8004b34:	4605      	mov	r5, r0
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d0ed      	beq.n	8004b16 <_realloc_r+0x1e>
 8004b3a:	42bc      	cmp	r4, r7
 8004b3c:	4622      	mov	r2, r4
 8004b3e:	4631      	mov	r1, r6
 8004b40:	bf28      	it	cs
 8004b42:	463a      	movcs	r2, r7
 8004b44:	f7ff fed4 	bl	80048f0 <memcpy>
 8004b48:	4631      	mov	r1, r6
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	f7ff fef8 	bl	8004940 <_free_r>
 8004b50:	e7e1      	b.n	8004b16 <_realloc_r+0x1e>
 8004b52:	4635      	mov	r5, r6
 8004b54:	e7df      	b.n	8004b16 <_realloc_r+0x1e>
	...

08004b58 <_sbrk_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4d05      	ldr	r5, [pc, #20]	; (8004b74 <_sbrk_r+0x1c>)
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fc fe58 	bl	8001818 <_sbrk>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_sbrk_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_sbrk_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000300 	.word	0x20000300

08004b78 <__malloc_lock>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__malloc_lock+0x8>)
 8004b7a:	f000 b811 	b.w	8004ba0 <__retarget_lock_acquire_recursive>
 8004b7e:	bf00      	nop
 8004b80:	20000304 	.word	0x20000304

08004b84 <__malloc_unlock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	; (8004b8c <__malloc_unlock+0x8>)
 8004b86:	f000 b80c 	b.w	8004ba2 <__retarget_lock_release_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	20000304 	.word	0x20000304

08004b90 <_malloc_usable_size_r>:
 8004b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b94:	1f18      	subs	r0, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	bfbc      	itt	lt
 8004b9a:	580b      	ldrlt	r3, [r1, r0]
 8004b9c:	18c0      	addlt	r0, r0, r3
 8004b9e:	4770      	bx	lr

08004ba0 <__retarget_lock_acquire_recursive>:
 8004ba0:	4770      	bx	lr

08004ba2 <__retarget_lock_release_recursive>:
 8004ba2:	4770      	bx	lr

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
