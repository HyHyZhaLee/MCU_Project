
MCU_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000473c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b0  080048b0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080048b0  080048b0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048b0  080048b0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080048b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000084  0800493c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  0800493c  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c524  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002237  00000000  00000000  0002c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  0002f540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019678  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038f  00000000  00000000  000497e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aebb  00000000  00000000  00059b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000394c  00000000  00000000  000e4a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004830 	.word	0x08004830

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004830 	.word	0x08004830

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
 */

# include "global.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if ( htim -> Instance == TIM2 ) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d103      	bne.n	8000176 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading() ;
 800016e:	f000 f87f 	bl	8000270 <button_reading>
		timerRun();
 8000172:	f001 f831 	bl	80011d8 <timerRun>
	}
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <HAL_UART_RxCpltCallback>:
#define MAX_UART_BUFFER_SIZE 30
uint8_t UART_VALUE = 0;
uint8_t uart_buffer[MAX_UART_BUFFER_SIZE];
uint8_t uart_index_buffer = 0;
uint8_t uart_buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a10      	ldr	r2, [pc, #64]	; (80001d0 <HAL_UART_RxCpltCallback+0x50>)
 800018e:	4293      	cmp	r3, r2
 8000190:	d119      	bne.n	80001c6 <HAL_UART_RxCpltCallback+0x46>
//    	HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
        uart_buffer[uart_index_buffer++] = UART_VALUE;
 8000192:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	1c5a      	adds	r2, r3, #1
 8000198:	b2d1      	uxtb	r1, r2
 800019a:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 800019c:	7011      	strb	r1, [r2, #0]
 800019e:	461a      	mov	r2, r3
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <HAL_UART_RxCpltCallback+0x58>)
 80001a2:	7819      	ldrb	r1, [r3, #0]
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <HAL_UART_RxCpltCallback+0x5c>)
 80001a6:	5499      	strb	r1, [r3, r2]
        if (uart_index_buffer == MAX_UART_BUFFER_SIZE) {
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b1e      	cmp	r3, #30
 80001ae:	d102      	bne.n	80001b6 <HAL_UART_RxCpltCallback+0x36>
            uart_index_buffer = 0;
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <HAL_UART_RxCpltCallback+0x54>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	701a      	strb	r2, [r3, #0]
        }
        uart_buffer_flag = 1;
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <HAL_UART_RxCpltCallback+0x60>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &UART_VALUE, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	4906      	ldr	r1, [pc, #24]	; (80001d8 <HAL_UART_RxCpltCallback+0x58>)
 80001c0:	4808      	ldr	r0, [pc, #32]	; (80001e4 <HAL_UART_RxCpltCallback+0x64>)
 80001c2:	f003 fa30 	bl	8003626 <HAL_UART_Receive_IT>
    }
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40004400 	.word	0x40004400
 80001d4:	200000c2 	.word	0x200000c2
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	200000c3 	.word	0x200000c3
 80001e4:	200001b0 	.word	0x200001b0

080001e8 <initButton>:
static uint8_t flagForButtonPress[N0_OF_BUTTONS];
static uint8_t flagForButtonLongPress[N0_OF_BUTTONS];
// we define counter for automatically decreasing.
static uint16_t counterForButtonLongPress[N0_OF_BUTTONS];

void initButton(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e026      	b.n	8000242 <initButton+0x5a>
        buttonBuffer0[i] = BUTTON_IS_RELEASED;
 80001f4:	4a17      	ldr	r2, [pc, #92]	; (8000254 <initButton+0x6c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4413      	add	r3, r2
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = BUTTON_IS_RELEASED;
 80001fe:	4a16      	ldr	r2, [pc, #88]	; (8000258 <initButton+0x70>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4413      	add	r3, r2
 8000204:	2201      	movs	r2, #1
 8000206:	701a      	strb	r2, [r3, #0]
        buttonBuffer2[i] = BUTTON_IS_RELEASED;
 8000208:	4a14      	ldr	r2, [pc, #80]	; (800025c <initButton+0x74>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4413      	add	r3, r2
 800020e:	2201      	movs	r2, #1
 8000210:	701a      	strb	r2, [r3, #0]
        buttonBuffer3[i] = BUTTON_IS_RELEASED;
 8000212:	4a13      	ldr	r2, [pc, #76]	; (8000260 <initButton+0x78>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	2201      	movs	r2, #1
 800021a:	701a      	strb	r2, [r3, #0]

        flagForButtonLongPress[i] = 0;
 800021c:	4a11      	ldr	r2, [pc, #68]	; (8000264 <initButton+0x7c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4413      	add	r3, r2
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <initButton+0x80>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	4413      	add	r3, r2
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
        counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000230:	4a0e      	ldr	r2, [pc, #56]	; (800026c <initButton+0x84>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000238:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b03      	cmp	r3, #3
 8000246:	ddd5      	ble.n	80001f4 <initButton+0xc>
    }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	200000c4 	.word	0x200000c4
 8000258:	200000c8 	.word	0x200000c8
 800025c:	200000cc 	.word	0x200000cc
 8000260:	200000d0 	.word	0x200000d0
 8000264:	200000d8 	.word	0x200000d8
 8000268:	200000d4 	.word	0x200000d4
 800026c:	200000dc 	.word	0x200000dc

08000270 <button_reading>:

void button_reading(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e0a6      	b.n	80003ca <button_reading+0x15a>
        buttonBuffer2[i] = buttonBuffer1[i];
 800027c:	4a57      	ldr	r2, [pc, #348]	; (80003dc <button_reading+0x16c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4413      	add	r3, r2
 8000282:	7819      	ldrb	r1, [r3, #0]
 8000284:	4a56      	ldr	r2, [pc, #344]	; (80003e0 <button_reading+0x170>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4413      	add	r3, r2
 800028a:	460a      	mov	r2, r1
 800028c:	701a      	strb	r2, [r3, #0]
        buttonBuffer1[i] = buttonBuffer0[i];
 800028e:	4a55      	ldr	r2, [pc, #340]	; (80003e4 <button_reading+0x174>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4413      	add	r3, r2
 8000294:	7819      	ldrb	r1, [r3, #0]
 8000296:	4a51      	ldr	r2, [pc, #324]	; (80003dc <button_reading+0x16c>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	460a      	mov	r2, r1
 800029e:	701a      	strb	r2, [r3, #0]
        switch (i) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d83a      	bhi.n	800031c <button_reading+0xac>
 80002a6:	a201      	add	r2, pc, #4	; (adr r2, 80002ac <button_reading+0x3c>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	080002bd 	.word	0x080002bd
 80002b0:	080002d5 	.word	0x080002d5
 80002b4:	080002ed 	.word	0x080002ed
 80002b8:	08000305 	.word	0x08000305
            case 0:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80002bc:	2101      	movs	r1, #1
 80002be:	484a      	ldr	r0, [pc, #296]	; (80003e8 <button_reading+0x178>)
 80002c0:	f001 fd12 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4619      	mov	r1, r3
 80002c8:	4a46      	ldr	r2, [pc, #280]	; (80003e4 <button_reading+0x174>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4413      	add	r3, r2
 80002ce:	460a      	mov	r2, r1
 80002d0:	701a      	strb	r2, [r3, #0]
                break;
 80002d2:	e023      	b.n	800031c <button_reading+0xac>
            case 1:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	4844      	ldr	r0, [pc, #272]	; (80003e8 <button_reading+0x178>)
 80002d8:	f001 fd06 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	4619      	mov	r1, r3
 80002e0:	4a40      	ldr	r2, [pc, #256]	; (80003e4 <button_reading+0x174>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4413      	add	r3, r2
 80002e6:	460a      	mov	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
                break;
 80002ea:	e017      	b.n	800031c <button_reading+0xac>
            case 2:
                buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80002ec:	2110      	movs	r1, #16
 80002ee:	483e      	ldr	r0, [pc, #248]	; (80003e8 <button_reading+0x178>)
 80002f0:	f001 fcfa 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80002f4:	4603      	mov	r3, r0
 80002f6:	4619      	mov	r1, r3
 80002f8:	4a3a      	ldr	r2, [pc, #232]	; (80003e4 <button_reading+0x174>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	460a      	mov	r2, r1
 8000300:	701a      	strb	r2, [r3, #0]
                break;
 8000302:	e00b      	b.n	800031c <button_reading+0xac>
            case 3:
				buttonBuffer0[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000304:	2101      	movs	r1, #1
 8000306:	4839      	ldr	r0, [pc, #228]	; (80003ec <button_reading+0x17c>)
 8000308:	f001 fcee 	bl	8001ce8 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	4619      	mov	r1, r3
 8000310:	4a34      	ldr	r2, [pc, #208]	; (80003e4 <button_reading+0x174>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	460a      	mov	r2, r1
 8000318:	701a      	strb	r2, [r3, #0]
				break;
 800031a:	bf00      	nop
        }
        if ((buttonBuffer1[i] == buttonBuffer0[i]) && (buttonBuffer1[i] == buttonBuffer2[i])) {
 800031c:	4a2f      	ldr	r2, [pc, #188]	; (80003dc <button_reading+0x16c>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	781a      	ldrb	r2, [r3, #0]
 8000324:	492f      	ldr	r1, [pc, #188]	; (80003e4 <button_reading+0x174>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	440b      	add	r3, r1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	429a      	cmp	r2, r3
 800032e:	d149      	bne.n	80003c4 <button_reading+0x154>
 8000330:	4a2a      	ldr	r2, [pc, #168]	; (80003dc <button_reading+0x16c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781a      	ldrb	r2, [r3, #0]
 8000338:	4929      	ldr	r1, [pc, #164]	; (80003e0 <button_reading+0x170>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	440b      	add	r3, r1
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d13f      	bne.n	80003c4 <button_reading+0x154>
            if (buttonBuffer2[i] != buttonBuffer3[i]) {
 8000344:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <button_reading+0x170>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781a      	ldrb	r2, [r3, #0]
 800034c:	4928      	ldr	r1, [pc, #160]	; (80003f0 <button_reading+0x180>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	440b      	add	r3, r1
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d01a      	beq.n	800038e <button_reading+0x11e>
                buttonBuffer3[i] = buttonBuffer2[i];
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <button_reading+0x170>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4413      	add	r3, r2
 800035e:	7819      	ldrb	r1, [r3, #0]
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <button_reading+0x180>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4413      	add	r3, r2
 8000366:	460a      	mov	r2, r1
 8000368:	701a      	strb	r2, [r3, #0]
                if (buttonBuffer3[i] == BUTTON_IS_PRESSED) {
 800036a:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <button_reading+0x180>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4413      	add	r3, r2
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d126      	bne.n	80003c4 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 8000376:	4a1f      	ldr	r2, [pc, #124]	; (80003f4 <button_reading+0x184>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800037e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 1;
 8000382:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <button_reading+0x188>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4413      	add	r3, r2
 8000388:	2201      	movs	r2, #1
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e01a      	b.n	80003c4 <button_reading+0x154>
                }
            } else {
                counterForButtonLongPress[i]--;
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <button_reading+0x184>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000396:	3b01      	subs	r3, #1
 8000398:	b299      	uxth	r1, r3
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <button_reading+0x184>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                if (counterForButtonLongPress[i] == 0) {
 80003a2:	4a14      	ldr	r2, [pc, #80]	; (80003f4 <button_reading+0x184>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d10a      	bne.n	80003c4 <button_reading+0x154>
                    counterForButtonLongPress[i] = DURATION_FOR_LONG_PRESS;
 80003ae:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <button_reading+0x184>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80003b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonLongPress[i] = 1;
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <button_reading+0x18c>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < N0_OF_BUTTONS; i++) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	f77f af55 	ble.w	800027c <button_reading+0xc>
                }
            }
        }
    }
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	200000cc 	.word	0x200000cc
 80003e4:	200000c4 	.word	0x200000c4
 80003e8:	40010800 	.word	0x40010800
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	200000d0 	.word	0x200000d0
 80003f4:	200000dc 	.word	0x200000dc
 80003f8:	200000d4 	.word	0x200000d4
 80003fc:	200000d8 	.word	0x200000d8

08000400 <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
    if( index >= N0_OF_BUTTONS ) return 0;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d901      	bls.n	8000414 <is_button_pressed+0x14>
 8000410:	2300      	movs	r3, #0
 8000412:	e00b      	b.n	800042c <is_button_pressed+0x2c>
    if(flagForButtonPress[index] == 1){
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <is_button_pressed+0x38>)
 8000418:	5cd3      	ldrb	r3, [r2, r3]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d105      	bne.n	800042a <is_button_pressed+0x2a>
    	flagForButtonPress[index] = 0;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <is_button_pressed+0x38>)
 8000422:	2100      	movs	r1, #0
 8000424:	54d1      	strb	r1, [r2, r3]
    	return 1;
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <is_button_pressed+0x2c>
    }
    return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	200000d4 	.word	0x200000d4

0800043c <resetPedestrianFlag>:
 *      Author: tango
 */

#include "fsm_for_pedestrian.h"

void resetPedestrianFlag(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	BuzzerOff();								// Turn off the buzzer
 8000440:	f000 fc76 	bl	8000d30 <BuzzerOff>
	timer_flag[TIMER_PEDESTRIAN_PERIOD] = 0;	// Reset the timer flag for pedestrian cycle
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <resetPedestrianFlag+0x20>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
	pedestrianDisplay(OFF);						// Turn off the pedestrian light
 800044a:	2000      	movs	r0, #0
 800044c:	f000 fbdc 	bl	8000c08 <pedestrianDisplay>
	flag_pedestrian = 0;						// Reset the pedestrian flag to prevent pedestrian crossing
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <resetPedestrianFlag+0x24>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000020c 	.word	0x2000020c
 8000460:	200000e4 	.word	0x200000e4

08000464 <fsm_pedestrian>:

void fsm_pedestrian(){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	// If pedestrian flag = 1, begin the pedestrian fsm
	if(flag_pedestrian){
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <fsm_pedestrian+0x6c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d026      	beq.n	80004be <fsm_pedestrian+0x5a>
		switch(TRAFFIC_STATUS){
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <fsm_pedestrian+0x70>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	3b02      	subs	r3, #2
 8000476:	2b03      	cmp	r3, #3
 8000478:	d81e      	bhi.n	80004b8 <fsm_pedestrian+0x54>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <fsm_pedestrian+0x1c>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	08000491 	.word	0x08000491
 8000484:	08000499 	.word	0x08000499
 8000488:	080004a5 	.word	0x080004a5
 800048c:	080004b1 	.word	0x080004b1
			case RED1_GREEN2:
				pedestrianDisplay(GREEN);			// Display green light for pedestrians
 8000490:	2003      	movs	r0, #3
 8000492:	f000 fbb9 	bl	8000c08 <pedestrianDisplay>
				break;
 8000496:	e013      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case RED1_YELLOW2:
				/* Remaining time for pedestrians to cross the road is running out
				 *Turn on the buzzer for alert
				 */
				pedestrianDisplay(GREEN);
 8000498:	2003      	movs	r0, #3
 800049a:	f000 fbb5 	bl	8000c08 <pedestrianDisplay>
				BuzzerOn();
 800049e:	f000 fc05 	bl	8000cac <BuzzerOn>
				break;
 80004a2:	e00d      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case GREEN1_RED2:
				pedestrianDisplay(RED);				// Display red light for pedestrians
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fbaf 	bl	8000c08 <pedestrianDisplay>
				BuzzerOff();						// Turn off the buzzer
 80004aa:	f000 fc41 	bl	8000d30 <BuzzerOff>
				break;
 80004ae:	e007      	b.n	80004c0 <fsm_pedestrian+0x5c>
			case YELLOW1_RED2:
				pedestrianDisplay(RED);				// Display red light for pedestrians
 80004b0:	2001      	movs	r0, #1
 80004b2:	f000 fba9 	bl	8000c08 <pedestrianDisplay>
				break;
 80004b6:	e003      	b.n	80004c0 <fsm_pedestrian+0x5c>
			default:
				resetPedestrianFlag();				// By default reset the pedestrian flag
 80004b8:	f7ff ffc0 	bl	800043c <resetPedestrianFlag>
				break;
 80004bc:	e000      	b.n	80004c0 <fsm_pedestrian+0x5c>
		}
	}
 80004be:	bf00      	nop

	// After 2 period running reset the pedestrian flag
	if(timer_flag[TIMER_PEDESTRIAN_PERIOD]){
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <fsm_pedestrian+0x74>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <fsm_pedestrian+0x68>
		resetPedestrianFlag();
 80004c8:	f7ff ffb8 	bl	800043c <resetPedestrianFlag>
	}
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000e4 	.word	0x200000e4
 80004d4:	20000000 	.word	0x20000000
 80004d8:	2000020c 	.word	0x2000020c

080004dc <fsm_function>:
int GREEN_TIME_TEMP = 0;            // Temporary storage for green light duration

int TRAFFIC_ONE_PERIOD = 0;             // Total duration of one complete traffic light cycle in seconds

// Function to handle the traffic light state machine
void fsm_function(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	switch(TRAFFIC_STATUS){
 80004e0:	4bac      	ldr	r3, [pc, #688]	; (8000794 <fsm_function+0x2b8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3b01      	subs	r3, #1
 80004e6:	2b2a      	cmp	r3, #42	; 0x2a
 80004e8:	f200 8289 	bhi.w	80009fe <fsm_function+0x522>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <fsm_function+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	080005a1 	.word	0x080005a1
 80004f8:	080005e5 	.word	0x080005e5
 80004fc:	0800066f 	.word	0x0800066f
 8000500:	08000701 	.word	0x08000701
 8000504:	080007b5 	.word	0x080007b5
 8000508:	080009ff 	.word	0x080009ff
 800050c:	080009ff 	.word	0x080009ff
 8000510:	080009ff 	.word	0x080009ff
 8000514:	080009ff 	.word	0x080009ff
 8000518:	080009ff 	.word	0x080009ff
 800051c:	080009ff 	.word	0x080009ff
 8000520:	080009ff 	.word	0x080009ff
 8000524:	080009ff 	.word	0x080009ff
 8000528:	080009ff 	.word	0x080009ff
 800052c:	080009ff 	.word	0x080009ff
 8000530:	080009ff 	.word	0x080009ff
 8000534:	080009ff 	.word	0x080009ff
 8000538:	080009ff 	.word	0x080009ff
 800053c:	080009ff 	.word	0x080009ff
 8000540:	080009ff 	.word	0x080009ff
 8000544:	080009ff 	.word	0x080009ff
 8000548:	080009ff 	.word	0x080009ff
 800054c:	080009ff 	.word	0x080009ff
 8000550:	080009ff 	.word	0x080009ff
 8000554:	080009ff 	.word	0x080009ff
 8000558:	080009ff 	.word	0x080009ff
 800055c:	080009ff 	.word	0x080009ff
 8000560:	080009ff 	.word	0x080009ff
 8000564:	080009ff 	.word	0x080009ff
 8000568:	080009ff 	.word	0x080009ff
 800056c:	080009ff 	.word	0x080009ff
 8000570:	080009ff 	.word	0x080009ff
 8000574:	080009ff 	.word	0x080009ff
 8000578:	080009ff 	.word	0x080009ff
 800057c:	080009ff 	.word	0x080009ff
 8000580:	080009ff 	.word	0x080009ff
 8000584:	080009ff 	.word	0x080009ff
 8000588:	080009ff 	.word	0x080009ff
 800058c:	080009ff 	.word	0x080009ff
 8000590:	080009ff 	.word	0x080009ff
 8000594:	08000847 	.word	0x08000847
 8000598:	080008c7 	.word	0x080008c7
 800059c:	08000945 	.word	0x08000945
		// CASE INIT
		case INIT:
			TRAFFIC_STATUS = RED1_GREEN2;
 80005a0:	4b7c      	ldr	r3, [pc, #496]	; (8000794 <fsm_function+0x2b8>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	601a      	str	r2, [r3, #0]
			// INITIALIZE
			setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80005a6:	4b7c      	ldr	r3, [pc, #496]	; (8000798 <fsm_function+0x2bc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fdf7 	bl	80011a8 <setTimer>
			TRAFFIC_COUNTER = RED_TIME;
 80005ba:	4b78      	ldr	r3, [pc, #480]	; (800079c <fsm_function+0x2c0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a78      	ldr	r2, [pc, #480]	; (80007a0 <fsm_function+0x2c4>)
 80005c0:	6013      	str	r3, [r2, #0]
			trafficDisplay1(OFF);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fa42 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(OFF);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fa8d 	bl	8000ae8 <trafficDisplay2>
			TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 80005ce:	4b73      	ldr	r3, [pc, #460]	; (800079c <fsm_function+0x2c0>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b71      	ldr	r3, [pc, #452]	; (8000798 <fsm_function+0x2bc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	441a      	add	r2, r3
 80005d8:	4b72      	ldr	r3, [pc, #456]	; (80007a4 <fsm_function+0x2c8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	4a72      	ldr	r2, [pc, #456]	; (80007a8 <fsm_function+0x2cc>)
 80005e0:	6013      	str	r3, [r2, #0]
			break;
 80005e2:	e21b      	b.n	8000a1c <fsm_function+0x540>

		// CASE RED - GREEN
		case RED1_GREEN2:
			trafficDisplay1(RED);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 fa31 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(GREEN);
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 fa7c 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 80005f0:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <fsm_function+0x2d0>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d10b      	bne.n	8000610 <fsm_function+0x134>
				TRAFFIC_COUNTER--;
 80005f8:	4b69      	ldr	r3, [pc, #420]	; (80007a0 <fsm_function+0x2c4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a68      	ldr	r2, [pc, #416]	; (80007a0 <fsm_function+0x2c4>)
 8000600:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 8000602:	2102      	movs	r1, #2
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fdce 	bl	80011a8 <setTimer>
				UART_transmit_counter();
 800060c:	f000 fba8 	bl	8000d60 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 8000610:	4b66      	ldr	r3, [pc, #408]	; (80007ac <fsm_function+0x2d0>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d10c      	bne.n	8000632 <fsm_function+0x156>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000618:	4b62      	ldr	r3, [pc, #392]	; (80007a4 <fsm_function+0x2c8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fdbe 	bl	80011a8 <setTimer>
				TRAFFIC_STATUS = RED1_YELLOW2;
 800062c:	4b59      	ldr	r3, [pc, #356]	; (8000794 <fsm_function+0x2b8>)
 800062e:	2203      	movs	r2, #3
 8000630:	601a      	str	r2, [r3, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fee4 	bl	8000400 <is_button_pressed>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d102      	bne.n	8000644 <fsm_function+0x168>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 800063e:	4b55      	ldr	r3, [pc, #340]	; (8000794 <fsm_function+0x2b8>)
 8000640:	2229      	movs	r2, #41	; 0x29
 8000642:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff fedb 	bl	8000400 <is_button_pressed>
 800064a:	4603      	mov	r3, r0
 800064c:	2b01      	cmp	r3, #1
 800064e:	f040 81d8 	bne.w	8000a02 <fsm_function+0x526>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000652:	4b55      	ldr	r3, [pc, #340]	; (80007a8 <fsm_function+0x2cc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	2103      	movs	r1, #3
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fda1 	bl	80011a8 <setTimer>
				flag_pedestrian = 1;
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <fsm_function+0x2d4>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
			}
			break;
 800066c:	e1c9      	b.n	8000a02 <fsm_function+0x526>

		// CASE RED - YELLOW
		case RED1_YELLOW2:
			trafficDisplay1(RED);
 800066e:	2001      	movs	r0, #1
 8000670:	f000 f9ec 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(YELLOW);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 fa37 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800067a:	4b4c      	ldr	r3, [pc, #304]	; (80007ac <fsm_function+0x2d0>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10b      	bne.n	800069a <fsm_function+0x1be>
				TRAFFIC_COUNTER--;
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <fsm_function+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3b01      	subs	r3, #1
 8000688:	4a45      	ldr	r2, [pc, #276]	; (80007a0 <fsm_function+0x2c4>)
 800068a:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800068c:	2102      	movs	r1, #2
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f000 fd89 	bl	80011a8 <setTimer>
				UART_transmit_counter();
 8000696:	f000 fb63 	bl	8000d60 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800069a:	4b44      	ldr	r3, [pc, #272]	; (80007ac <fsm_function+0x2d0>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d110      	bne.n	80006c4 <fsm_function+0x1e8>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80006a2:	4b3d      	ldr	r3, [pc, #244]	; (8000798 <fsm_function+0x2bc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fd79 	bl	80011a8 <setTimer>
				TRAFFIC_STATUS = GREEN1_RED2;
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <fsm_function+0x2b8>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = GREEN_TIME;
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <fsm_function+0x2bc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a37      	ldr	r2, [pc, #220]	; (80007a0 <fsm_function+0x2c4>)
 80006c2:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fe9b 	bl	8000400 <is_button_pressed>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d102      	bne.n	80006d6 <fsm_function+0x1fa>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <fsm_function+0x2b8>)
 80006d2:	2229      	movs	r2, #41	; 0x29
 80006d4:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 80006d6:	2003      	movs	r0, #3
 80006d8:	f7ff fe92 	bl	8000400 <is_button_pressed>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b01      	cmp	r3, #1
 80006e0:	f040 8191 	bne.w	8000a06 <fsm_function+0x52a>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 80006e4:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <fsm_function+0x2cc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fd58 	bl	80011a8 <setTimer>
				flag_pedestrian = 1;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <fsm_function+0x2d4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80006fe:	e182      	b.n	8000a06 <fsm_function+0x52a>

		// CASE GREEN - RED
		case GREEN1_RED2:
			trafficDisplay1(GREEN);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f9a3 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(RED);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 f9ee 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <fsm_function+0x2d0>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10b      	bne.n	800072c <fsm_function+0x250>
				TRAFFIC_COUNTER--;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <fsm_function+0x2c4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <fsm_function+0x2c4>)
 800071c:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 800071e:	2102      	movs	r1, #2
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f000 fd40 	bl	80011a8 <setTimer>
				UART_transmit_counter();
 8000728:	f000 fb1a 	bl	8000d60 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <fsm_function+0x2d0>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d110      	bne.n	8000756 <fsm_function+0x27a>
				setTimer(YELLOW_TIME*1000, TIMER_FSM_STATE);
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <fsm_function+0x2c8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fd30 	bl	80011a8 <setTimer>
				TRAFFIC_STATUS = YELLOW1_RED2;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <fsm_function+0x2b8>)
 800074a:	2205      	movs	r2, #5
 800074c:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = YELLOW_TIME;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <fsm_function+0x2c8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <fsm_function+0x2c4>)
 8000754:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 8000756:	2000      	movs	r0, #0
 8000758:	f7ff fe52 	bl	8000400 <is_button_pressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d102      	bne.n	8000768 <fsm_function+0x28c>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <fsm_function+0x2b8>)
 8000764:	2229      	movs	r2, #41	; 0x29
 8000766:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 8000768:	2003      	movs	r0, #3
 800076a:	f7ff fe49 	bl	8000400 <is_button_pressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	f040 814a 	bne.w	8000a0a <fsm_function+0x52e>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <fsm_function+0x2cc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	2103      	movs	r1, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd0f 	bl	80011a8 <setTimer>
				flag_pedestrian = 1;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <fsm_function+0x2d4>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000790:	e13b      	b.n	8000a0a <fsm_function+0x52e>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	20000004 	.word	0x20000004
 80007a8:	200000f8 	.word	0x200000f8
 80007ac:	2000020c 	.word	0x2000020c
 80007b0:	200000e4 	.word	0x200000e4

		// CASE YELLOW - RED
		case YELLOW1_RED2:
			trafficDisplay1(YELLOW);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 f949 	bl	8000a4c <trafficDisplay1>
			trafficDisplay2(RED);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 f994 	bl	8000ae8 <trafficDisplay2>
			// DECREMENT EACH SECOND
			if(timer_flag[TIMER_FOR_UART] == 1){
 80007c0:	4b97      	ldr	r3, [pc, #604]	; (8000a20 <fsm_function+0x544>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d10b      	bne.n	80007e0 <fsm_function+0x304>
				TRAFFIC_COUNTER--;
 80007c8:	4b96      	ldr	r3, [pc, #600]	; (8000a24 <fsm_function+0x548>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a95      	ldr	r2, [pc, #596]	; (8000a24 <fsm_function+0x548>)
 80007d0:	6013      	str	r3, [r2, #0]
				setTimer(1000, TIMER_FOR_UART);
 80007d2:	2102      	movs	r1, #2
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f000 fce6 	bl	80011a8 <setTimer>
				UART_transmit_counter();
 80007dc:	f000 fac0 	bl	8000d60 <UART_transmit_counter>
			}
			// NEXT STATUS SETTING
			if(timer_flag[TIMER_FSM_STATE] == 1){
 80007e0:	4b8f      	ldr	r3, [pc, #572]	; (8000a20 <fsm_function+0x544>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d110      	bne.n	800080a <fsm_function+0x32e>
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <fsm_function+0x54c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fcd6 	bl	80011a8 <setTimer>
				TRAFFIC_STATUS = RED1_GREEN2;
 80007fc:	4b8b      	ldr	r3, [pc, #556]	; (8000a2c <fsm_function+0x550>)
 80007fe:	2202      	movs	r2, #2
 8000800:	601a      	str	r2, [r3, #0]
				TRAFFIC_COUNTER = RED_TIME;
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <fsm_function+0x554>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a87      	ldr	r2, [pc, #540]	; (8000a24 <fsm_function+0x548>)
 8000808:	6013      	str	r3, [r2, #0]
			}
			// BUTTON CHANGE MODE PROCESSING
			if(is_button_pressed(BUTTON_MODE) == 1){
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fdf8 	bl	8000400 <is_button_pressed>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <fsm_function+0x340>
				TRAFFIC_STATUS = MODE_MODIFY_RED;
 8000816:	4b85      	ldr	r3, [pc, #532]	; (8000a2c <fsm_function+0x550>)
 8000818:	2229      	movs	r2, #41	; 0x29
 800081a:	601a      	str	r2, [r3, #0]
			}
			// BUTTON FOR PEDESTRIAN PROCESSING
			if(is_button_pressed(BUTTON_PED) == 1){
 800081c:	2003      	movs	r0, #3
 800081e:	f7ff fdef 	bl	8000400 <is_button_pressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	f040 80f2 	bne.w	8000a0e <fsm_function+0x532>
				setTimer(2000*TRAFFIC_ONE_PERIOD, TIMER_PEDESTRIAN_PERIOD);
 800082a:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <fsm_function+0x558>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	2103      	movs	r1, #3
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fcb5 	bl	80011a8 <setTimer>
				flag_pedestrian = 1;
 800083e:	4b7e      	ldr	r3, [pc, #504]	; (8000a38 <fsm_function+0x55c>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
			}
			break;
 8000844:	e0e3      	b.n	8000a0e <fsm_function+0x532>

		case MODE_MODIFY_RED:
			// TOGGLE RED
			trafficToggle(RED);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 f996 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fdd7 	bl	8000400 <is_button_pressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d102      	bne.n	800085e <fsm_function+0x382>
				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 8000858:	4b74      	ldr	r3, [pc, #464]	; (8000a2c <fsm_function+0x550>)
 800085a:	222a      	movs	r2, #42	; 0x2a
 800085c:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fdce 	bl	8000400 <is_button_pressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d110      	bne.n	800088c <fsm_function+0x3b0>
				RED_TIME_TEMP = RED_TIME;
 800086a:	4b71      	ldr	r3, [pc, #452]	; (8000a30 <fsm_function+0x554>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a73      	ldr	r2, [pc, #460]	; (8000a3c <fsm_function+0x560>)
 8000870:	6013      	str	r3, [r2, #0]
				// ADD UP RED
				if(RED_TIME_TEMP >= 99){
 8000872:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <fsm_function+0x560>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b62      	cmp	r3, #98	; 0x62
 8000878:	dd03      	ble.n	8000882 <fsm_function+0x3a6>
					RED_TIME_TEMP = 0;
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <fsm_function+0x560>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e004      	b.n	800088c <fsm_function+0x3b0>
				}
				else{
					RED_TIME_TEMP++;
 8000882:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <fsm_function+0x560>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a6c      	ldr	r2, [pc, #432]	; (8000a3c <fsm_function+0x560>)
 800088a:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800088c:	2002      	movs	r0, #2
 800088e:	f7ff fdb7 	bl	8000400 <is_button_pressed>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	f040 80bc 	bne.w	8000a12 <fsm_function+0x536>
				// SAVE
				RED_TIME = RED_TIME_TEMP;
 800089a:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <fsm_function+0x560>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a64      	ldr	r2, [pc, #400]	; (8000a30 <fsm_function+0x554>)
 80008a0:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80008a2:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <fsm_function+0x554>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <fsm_function+0x54c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a64      	ldr	r2, [pc, #400]	; (8000a40 <fsm_function+0x564>)
 80008ae:	6013      	str	r3, [r2, #0]
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 80008b0:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <fsm_function+0x554>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b62      	ldr	r3, [pc, #392]	; (8000a40 <fsm_function+0x564>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	4a5b      	ldr	r2, [pc, #364]	; (8000a28 <fsm_function+0x54c>)
 80008bc:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_YELLOW;
 80008be:	4b5b      	ldr	r3, [pc, #364]	; (8000a2c <fsm_function+0x550>)
 80008c0:	222a      	movs	r2, #42	; 0x2a
 80008c2:	601a      	str	r2, [r3, #0]
			}
			break;
 80008c4:	e0a5      	b.n	8000a12 <fsm_function+0x536>

		case MODE_MODIFY_YELLOW:
			// TOGGLE RED
			trafficToggle(YELLOW);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f000 f956 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fd97 	bl	8000400 <is_button_pressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d102      	bne.n	80008de <fsm_function+0x402>
				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 80008d8:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <fsm_function+0x550>)
 80008da:	222b      	movs	r2, #43	; 0x2b
 80008dc:	601a      	str	r2, [r3, #0]
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff fd8e 	bl	8000400 <is_button_pressed>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d110      	bne.n	800090c <fsm_function+0x430>
				YELLOW_TIME_TEMP = YELLOW_TIME;
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <fsm_function+0x564>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a55      	ldr	r2, [pc, #340]	; (8000a44 <fsm_function+0x568>)
 80008f0:	6013      	str	r3, [r2, #0]
				// ADD UP YELLOW
				if(YELLOW_TIME_TEMP >= 99){
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <fsm_function+0x568>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b62      	cmp	r3, #98	; 0x62
 80008f8:	dd03      	ble.n	8000902 <fsm_function+0x426>
					YELLOW_TIME_TEMP = 0;
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <fsm_function+0x568>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	e004      	b.n	800090c <fsm_function+0x430>
				}
				else{
					YELLOW_TIME_TEMP++;
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <fsm_function+0x568>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a4e      	ldr	r2, [pc, #312]	; (8000a44 <fsm_function+0x568>)
 800090a:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800090c:	2002      	movs	r0, #2
 800090e:	f7ff fd77 	bl	8000400 <is_button_pressed>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d17e      	bne.n	8000a16 <fsm_function+0x53a>
				// SAVE
				YELLOW_TIME = YELLOW_TIME_TEMP;
 8000918:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <fsm_function+0x568>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a48      	ldr	r2, [pc, #288]	; (8000a40 <fsm_function+0x564>)
 800091e:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				GREEN_TIME = RED_TIME - YELLOW_TIME;
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <fsm_function+0x554>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <fsm_function+0x564>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4a3f      	ldr	r2, [pc, #252]	; (8000a28 <fsm_function+0x54c>)
 800092c:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <fsm_function+0x564>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <fsm_function+0x54c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <fsm_function+0x554>)
 800093a:	6013      	str	r3, [r2, #0]

				TRAFFIC_STATUS = MODE_MODIFY_GREEN;
 800093c:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <fsm_function+0x550>)
 800093e:	222b      	movs	r2, #43	; 0x2b
 8000940:	601a      	str	r2, [r3, #0]
			}
			break;
 8000942:	e068      	b.n	8000a16 <fsm_function+0x53a>

		case MODE_MODIFY_GREEN:
			// TOGGLE RED
			trafficToggle(GREEN);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f917 	bl	8000b78 <trafficToggle>
			// BUTTON 0 PRESSED
			if(is_button_pressed(BUTTON_MODE) == 1){
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff fd58 	bl	8000400 <is_button_pressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10c      	bne.n	8000970 <fsm_function+0x494>
				TRAFFIC_STATUS = RED1_GREEN2;
 8000956:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <fsm_function+0x550>)
 8000958:	2202      	movs	r2, #2
 800095a:	601a      	str	r2, [r3, #0]
				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <fsm_function+0x54c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000964:	fb02 f303 	mul.w	r3, r2, r3
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fc1c 	bl	80011a8 <setTimer>
			}
			// BUTTON 1 PRESSED
			if(is_button_pressed(BUTTON_UP) == 1){
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fd45 	bl	8000400 <is_button_pressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d110      	bne.n	800099e <fsm_function+0x4c2>
				GREEN_TIME_TEMP = GREEN_TIME;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <fsm_function+0x54c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <fsm_function+0x56c>)
 8000982:	6013      	str	r3, [r2, #0]
				// ADD UP GREEN
				if(GREEN_TIME_TEMP >= 99){
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <fsm_function+0x56c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b62      	cmp	r3, #98	; 0x62
 800098a:	dd03      	ble.n	8000994 <fsm_function+0x4b8>
					GREEN_TIME_TEMP = 0;
 800098c:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <fsm_function+0x56c>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e004      	b.n	800099e <fsm_function+0x4c2>
				}
				else{
					GREEN_TIME_TEMP++;
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <fsm_function+0x56c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a2b      	ldr	r2, [pc, #172]	; (8000a48 <fsm_function+0x56c>)
 800099c:	6013      	str	r3, [r2, #0]
				}
			}
			// BUTTON 2 PRESSED
			if(is_button_pressed(BUTTON_SAVE) == 1){
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff fd2e 	bl	8000400 <is_button_pressed>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d137      	bne.n	8000a1a <fsm_function+0x53e>
				// SAVE
				GREEN_TIME = GREEN_TIME_TEMP;;
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <fsm_function+0x56c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <fsm_function+0x54c>)
 80009b0:	6013      	str	r3, [r2, #0]
				// RESET CONDITION
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <fsm_function+0x554>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <fsm_function+0x54c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <fsm_function+0x564>)
 80009be:	6013      	str	r3, [r2, #0]
				RED_TIME = YELLOW_TIME + GREEN_TIME;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <fsm_function+0x564>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <fsm_function+0x54c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <fsm_function+0x554>)
 80009cc:	6013      	str	r3, [r2, #0]

				setTimer(GREEN_TIME*1000, TIMER_FSM_STATE);
 80009ce:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <fsm_function+0x54c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	2101      	movs	r1, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fbe3 	bl	80011a8 <setTimer>
				TRAFFIC_ONE_PERIOD = RED_TIME + GREEN_TIME + YELLOW_TIME;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <fsm_function+0x554>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <fsm_function+0x54c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	441a      	add	r2, r3
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <fsm_function+0x564>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <fsm_function+0x558>)
 80009f4:	6013      	str	r3, [r2, #0]
				TRAFFIC_STATUS = RED1_GREEN2;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <fsm_function+0x550>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80009fc:	e00d      	b.n	8000a1a <fsm_function+0x53e>
		default:
			break;
 80009fe:	bf00      	nop
 8000a00:	e00c      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a02:	bf00      	nop
 8000a04:	e00a      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a06:	bf00      	nop
 8000a08:	e008      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a0a:	bf00      	nop
 8000a0c:	e006      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a0e:	bf00      	nop
 8000a10:	e004      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a12:	bf00      	nop
 8000a14:	e002      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a16:	bf00      	nop
 8000a18:	e000      	b.n	8000a1c <fsm_function+0x540>
			break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000020c 	.word	0x2000020c
 8000a24:	200000e8 	.word	0x200000e8
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	200000ec 	.word	0x200000ec
 8000a40:	20000004 	.word	0x20000004
 8000a44:	200000f0 	.word	0x200000f0
 8000a48:	200000f4 	.word	0x200000f4

08000a4c <trafficDisplay1>:



#include <hardware.h>

void trafficDisplay1(uint8_t input){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d83b      	bhi.n	8000ad4 <trafficDisplay1+0x88>
 8000a5c:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <trafficDisplay1+0x18>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000a75 	.word	0x08000a75
 8000a68:	08000a8d 	.word	0x08000a8d
 8000a6c:	08000abd 	.word	0x08000abd
 8000a70:	08000aa5 	.word	0x08000aa5
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <trafficDisplay1+0x94>)
 8000a7c:	f001 f94b 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <trafficDisplay1+0x98>)
 8000a86:	f001 f946 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000a8a:	e024      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <trafficDisplay1+0x94>)
 8000a94:	f001 f93f 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <trafficDisplay1+0x98>)
 8000a9e:	f001 f93a 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000aa2:	e018      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <trafficDisplay1+0x94>)
 8000aac:	f001 f933 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <trafficDisplay1+0x98>)
 8000ab6:	f001 f92e 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000aba:	e00c      	b.n	8000ad6 <trafficDisplay1+0x8a>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC1_BIT1_GPIO_Port, TRAFFIC1_BIT1_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <trafficDisplay1+0x94>)
 8000ac4:	f001 f927 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC1_BIT2_GPIO_Port, TRAFFIC1_BIT2_Pin, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <trafficDisplay1+0x98>)
 8000ace:	f001 f922 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000ad2:	e000      	b.n	8000ad6 <trafficDisplay1+0x8a>
		default:
			break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <trafficDisplay2>:

void trafficDisplay2(uint8_t input){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d837      	bhi.n	8000b68 <trafficDisplay2+0x80>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <trafficDisplay2+0x18>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b11 	.word	0x08000b11
 8000b04:	08000b27 	.word	0x08000b27
 8000b08:	08000b53 	.word	0x08000b53
 8000b0c:	08000b3d 	.word	0x08000b3d
		case OFF:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2120      	movs	r1, #32
 8000b14:	4817      	ldr	r0, [pc, #92]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b16:	f001 f8fe 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4815      	ldr	r0, [pc, #84]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b20:	f001 f8f9 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000b24:	e021      	b.n	8000b6a <trafficDisplay2+0x82>
		case RED:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b2c:	f001 f8f3 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b36:	f001 f8ee 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000b3a:	e016      	b.n	8000b6a <trafficDisplay2+0x82>
		case GREEN:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b42:	f001 f8e8 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	480a      	ldr	r0, [pc, #40]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b4c:	f001 f8e3 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000b50:	e00b      	b.n	8000b6a <trafficDisplay2+0x82>
		case YELLOW:
		  HAL_GPIO_WritePin(TRAFFIC2_BIT1_GPIO_Port, TRAFFIC2_BIT1_Pin, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2120      	movs	r1, #32
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b58:	f001 f8dd 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRAFFIC2_BIT2_GPIO_Port, TRAFFIC2_BIT2_Pin, 1);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <trafficDisplay2+0x8c>)
 8000b62:	f001 f8d8 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000b66:	e000      	b.n	8000b6a <trafficDisplay2+0x82>
		default:
			break;
 8000b68:	bf00      	nop
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010c00 	.word	0x40010c00

08000b78 <trafficToggle>:

uint8_t toggle_state = 0;
void trafficToggle(uint8_t input){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[4]){
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <trafficToggle+0x88>)
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00b      	beq.n	8000ba2 <trafficToggle+0x2a>
		setTimer(1000, 4);
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b90:	f000 fb0a 	bl	80011a8 <setTimer>
		toggle_state = 1 - toggle_state;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <trafficToggle+0x8c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f1c3 0301 	rsb	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <trafficToggle+0x8c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
	}
	if(toggle_state){
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <trafficToggle+0x8c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d01e      	beq.n	8000be8 <trafficToggle+0x70>
		switch(input){
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d014      	beq.n	8000bda <trafficToggle+0x62>
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	dc20      	bgt.n	8000bf6 <trafficToggle+0x7e>
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d002      	beq.n	8000bbe <trafficToggle+0x46>
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d007      	beq.n	8000bcc <trafficToggle+0x54>
	}
	else {
		trafficDisplay1(OFF);
		trafficDisplay2(OFF);
	}
}
 8000bbc:	e01b      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(RED);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ff44 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(RED);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff ff8f 	bl	8000ae8 <trafficDisplay2>
				break;
 8000bca:	e014      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(YELLOW);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff ff3d 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(YELLOW);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff88 	bl	8000ae8 <trafficDisplay2>
				break;
 8000bd8:	e00d      	b.n	8000bf6 <trafficToggle+0x7e>
				trafficDisplay1(GREEN);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff ff36 	bl	8000a4c <trafficDisplay1>
				trafficDisplay2(GREEN);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff ff81 	bl	8000ae8 <trafficDisplay2>
				break;
 8000be6:	e006      	b.n	8000bf6 <trafficToggle+0x7e>
		trafficDisplay1(OFF);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ff2f 	bl	8000a4c <trafficDisplay1>
		trafficDisplay2(OFF);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff7a 	bl	8000ae8 <trafficDisplay2>
}
 8000bf4:	e7ff      	b.n	8000bf6 <trafficToggle+0x7e>
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000020c 	.word	0x2000020c
 8000c04:	200000fc 	.word	0x200000fc

08000c08 <pedestrianDisplay>:


void pedestrianDisplay(uint8_t input){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	switch (input) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d83f      	bhi.n	8000c98 <pedestrianDisplay+0x90>
 8000c18:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <pedestrianDisplay+0x18>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c31 	.word	0x08000c31
 8000c24:	08000c4b 	.word	0x08000c4b
 8000c28:	08000c7f 	.word	0x08000c7f
 8000c2c:	08000c65 	.word	0x08000c65
		case OFF:
		  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c36:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c38:	f001 f86d 	bl	8001d16 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c44:	f001 f867 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000c48:	e027      	b.n	8000c9a <pedestrianDisplay+0x92>
		case RED:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c52:	f001 f860 	bl	8001d16 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c5e:	f001 f85a 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000c62:	e01a      	b.n	8000c9a <pedestrianDisplay+0x92>
		case GREEN:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c6c:	f001 f853 	bl	8001d16 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c78:	f001 f84d 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000c7c:	e00d      	b.n	8000c9a <pedestrianDisplay+0x92>
		case YELLOW:
			  HAL_GPIO_WritePin(PEDLED_BIT1_GPIO_Port, PEDLED_BIT1_Pin, 1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <pedestrianDisplay+0x9c>)
 8000c86:	f001 f846 	bl	8001d16 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(PEDLED_BIT2_GPIO_Port, PEDLED_BIT2_Pin, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <pedestrianDisplay+0xa0>)
 8000c92:	f001 f840 	bl	8001d16 <HAL_GPIO_WritePin>
		  break;
 8000c96:	e000      	b.n	8000c9a <pedestrianDisplay+0x92>
		default:
			break;
 8000c98:	bf00      	nop
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40010800 	.word	0x40010800

08000cac <BuzzerOn>:
}
uint16_t BuzzerPeriod = 250;
uint16_t BuzzerDutyCycle = 500;
uint8_t BuzzerToggle = 0;

void BuzzerOn() {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    if (timer_flag[TIMER_BUZZER]) {
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <BuzzerOn+0x70>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d020      	beq.n	8000cfa <BuzzerOn+0x4e>
        BuzzerToggle = 1 - BuzzerToggle;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <BuzzerOn+0x74>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	f1c3 0301 	rsb	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <BuzzerOn+0x74>)
 8000cc4:	701a      	strb	r2, [r3, #0]
        setTimer(BuzzerPeriod, TIMER_BUZZER);
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <BuzzerOn+0x78>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	2105      	movs	r1, #5
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fa6b 	bl	80011a8 <setTimer>

        BuzzerDutyCycle += 1000;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <BuzzerOn+0x7c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <BuzzerOn+0x7c>)
 8000cde:	801a      	strh	r2, [r3, #0]
        BuzzerPeriod -= 50;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <BuzzerOn+0x78>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	3b32      	subs	r3, #50	; 0x32
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <BuzzerOn+0x78>)
 8000cea:	801a      	strh	r2, [r3, #0]

//        if (BuzzerDutyCycle > 2000) {
//            BuzzerDutyCycle = 2000; // Ensure the duty cycle doesn't exceed 100%
//        }

        if (BuzzerPeriod < 50) {
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <BuzzerOn+0x78>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	2b31      	cmp	r3, #49	; 0x31
 8000cf2:	d802      	bhi.n	8000cfa <BuzzerOn+0x4e>
            BuzzerPeriod = 50; // Ensure the period doesn't go below 50 (adjust as needed)
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <BuzzerOn+0x78>)
 8000cf6:	2232      	movs	r2, #50	; 0x32
 8000cf8:	801a      	strh	r2, [r3, #0]
        }
    }

    if (BuzzerToggle) {
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <BuzzerOn+0x74>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <BuzzerOn+0x62>
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, BuzzerDutyCycle);
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <BuzzerOn+0x7c>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <BuzzerOn+0x80>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
    } else {
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
    }
}
 8000d0c:	e003      	b.n	8000d16 <BuzzerOn+0x6a>
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <BuzzerOn+0x80>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000020c 	.word	0x2000020c
 8000d20:	200000fd 	.word	0x200000fd
 8000d24:	20000010 	.word	0x20000010
 8000d28:	20000012 	.word	0x20000012
 8000d2c:	20000168 	.word	0x20000168

08000d30 <BuzzerOff>:


void BuzzerOff(){
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <BuzzerOff+0x24>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34
	  BuzzerPeriod = 250;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <BuzzerOff+0x28>)
 8000d3e:	22fa      	movs	r2, #250	; 0xfa
 8000d40:	801a      	strh	r2, [r3, #0]
	  BuzzerDutyCycle = 500;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <BuzzerOff+0x2c>)
 8000d44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d48:	801a      	strh	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000168 	.word	0x20000168
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	20000012 	.word	0x20000012

08000d60 <UART_transmit_counter>:

char packet[30];
void UART_transmit_counter(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
    sprintf(packet, "!7SEG:%d#\r\n", TRAFFIC_COUNTER);
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <UART_transmit_counter+0x2c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4909      	ldr	r1, [pc, #36]	; (8000d90 <UART_transmit_counter+0x30>)
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <UART_transmit_counter+0x34>)
 8000d6e:	f003 f8e5 	bl	8003f3c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)packet, strlen(packet), 1000);
 8000d72:	4808      	ldr	r0, [pc, #32]	; (8000d94 <UART_transmit_counter+0x34>)
 8000d74:	f7ff f9ea 	bl	800014c <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	4904      	ldr	r1, [pc, #16]	; (8000d94 <UART_transmit_counter+0x34>)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <UART_transmit_counter+0x38>)
 8000d84:	f002 fbbd 	bl	8003502 <HAL_UART_Transmit>
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200000e8 	.word	0x200000e8
 8000d90:	08004848 	.word	0x08004848
 8000d94:	20000100 	.word	0x20000100
 8000d98:	200001b0 	.word	0x200001b0

08000d9c <runAutoDebug>:

void runAutoDebug() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	if(timer_flag[0]){
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <runAutoDebug+0x24>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <runAutoDebug+0x1e>
		setTimer(1000,0);
 8000da8:	2100      	movs	r1, #0
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f000 f9fb 	bl	80011a8 <setTimer>
		HAL_GPIO_TogglePin(DEBUG_LED1_GPIO_Port, DEBUG_LED1_Pin);
 8000db2:	2120      	movs	r1, #32
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <runAutoDebug+0x28>)
 8000db6:	f000 ffc6 	bl	8001d46 <HAL_GPIO_TogglePin>
        if(is_button_pressed(0)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(1)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(2)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
        if(is_button_pressed(3)) HAL_GPIO_TogglePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin);
#endif //__TEST_BUTTON
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000020c 	.word	0x2000020c
 8000dc4:	40010800 	.word	0x40010800

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 fbe8 	bl	80015a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f82a 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f950 	bl	8001078 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dd8:	f000 f862 	bl	8000ea0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ddc:	f000 f8ac 	bl	8000f38 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000de0:	f000 f920 	bl	8001024 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2 );
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <main+0x50>)
 8000de6:	f001 fc31 	bl	800264c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000dea:	2100      	movs	r1, #0
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <main+0x54>)
 8000dee:	f001 fcd7 	bl	80027a0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2 , &UART_VALUE , 1) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	490a      	ldr	r1, [pc, #40]	; (8000e20 <main+0x58>)
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0x5c>)
 8000df8:	f002 fc15 	bl	8003626 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  initButton();
 8000dfc:	f7ff f9f4 	bl	80001e8 <initButton>
  initTimer(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f000 fa18 	bl	8001238 <initTimer>
  while (1)
  {
	  runAutoDebug();
 8000e08:	f7ff ffc8 	bl	8000d9c <runAutoDebug>
	  fsm_function();
 8000e0c:	f7ff fb66 	bl	80004dc <fsm_function>
	  fsm_pedestrian();
 8000e10:	f7ff fb28 	bl	8000464 <fsm_pedestrian>
	  runAutoDebug();
 8000e14:	e7f8      	b.n	8000e08 <main+0x40>
 8000e16:	bf00      	nop
 8000e18:	20000120 	.word	0x20000120
 8000e1c:	20000168 	.word	0x20000168
 8000e20:	200000a0 	.word	0x200000a0
 8000e24:	200001b0 	.word	0x200001b0

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b090      	sub	sp, #64	; 0x40
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	2228      	movs	r2, #40	; 0x28
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f003 f878 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2310      	movs	r3, #16
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 ff8a 	bl	8001d78 <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f997 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 f9f7 	bl	800227c <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e94:	f000 f982 	bl	800119c <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3740      	adds	r7, #64	; 0x40
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ec6:	f240 321f 	movw	r2, #799	; 0x31f
 8000eca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ed4:	2209      	movs	r2, #9
 8000ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000ee6:	f001 fb61 	bl	80025ac <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ef0:	f000 f954 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000f02:	f001 feb5 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f0c:	f000 f946 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_TIM2_Init+0x94>)
 8000f1e:	f002 fa33 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f28:	f000 f938 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000120 	.word	0x20000120

08000f38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	; 0x38
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]
 8000f66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f6a:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <MX_TIM3_Init+0xe8>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f7a:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <MX_TIM3_Init+0xe4>)
 8000f90:	f001 fb0c 	bl	80025ac <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f9a:	f000 f8ff 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_TIM3_Init+0xe4>)
 8000fac:	f001 fe60 	bl	8002c70 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fb6:	f000 f8f1 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <MX_TIM3_Init+0xe4>)
 8000fbc:	f001 fb98 	bl	80026f0 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fc6:	f000 f8e9 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <MX_TIM3_Init+0xe4>)
 8000fda:	f002 f9d5 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fe4:	f000 f8da 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM3_Init+0xe4>)
 8001000:	f001 fd78 	bl	8002af4 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800100a:	f000 f8c7 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM3_Init+0xe4>)
 8001010:	f000 f99a 	bl	8001348 <HAL_TIM_MspPostInit>

}
 8001014:	bf00      	nop
 8001016:	3738      	adds	r7, #56	; 0x38
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000168 	.word	0x20000168
 8001020:	40000400 	.word	0x40000400

08001024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_USART2_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001030:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USART2_UART_Init+0x4c>)
 800105c:	f002 fa04 	bl	8003468 <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f899 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001b0 	.word	0x200001b0
 8001074:	40004400 	.word	0x40004400

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b3f      	ldr	r3, [pc, #252]	; (800118c <MX_GPIO_Init+0x114>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a3e      	ldr	r2, [pc, #248]	; (800118c <MX_GPIO_Init+0x114>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b3c      	ldr	r3, [pc, #240]	; (800118c <MX_GPIO_Init+0x114>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <MX_GPIO_Init+0x114>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a38      	ldr	r2, [pc, #224]	; (800118c <MX_GPIO_Init+0x114>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <MX_GPIO_Init+0x114>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_GPIO_Init+0x114>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a32      	ldr	r2, [pc, #200]	; (800118c <MX_GPIO_Init+0x114>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_GPIO_Init+0x114>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80010da:	482d      	ldr	r0, [pc, #180]	; (8001190 <MX_GPIO_Init+0x118>)
 80010dc:	f000 fe1b 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80010e6:	482b      	ldr	r0, [pc, #172]	; (8001194 <MX_GPIO_Init+0x11c>)
 80010e8:	f000 fe15 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED2_GPIO_Port, DEBUG_LED2_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_GPIO_Init+0x120>)
 80010f4:	f000 fe0f 	bl	8001d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 80010f8:	2313      	movs	r3, #19
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0x118>)
 800110c:	f000 fc68 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED1_Pin PEDLED_BIT2_Pin TRAFFIC1_BIT1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED1_Pin|PEDLED_BIT2_Pin|TRAFFIC1_BIT1_Pin;
 8001110:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <MX_GPIO_Init+0x118>)
 800112a:	f000 fc59 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 800112e:	2301      	movs	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <MX_GPIO_Init+0x11c>)
 8001142:	f000 fc4d 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDLED_BIT1_Pin TRAFFIC1_BIT2_Pin TRAFFIC2_BIT2_Pin TRAFFIC2_BIT1_Pin */
  GPIO_InitStruct.Pin = PEDLED_BIT1_Pin|TRAFFIC1_BIT2_Pin|TRAFFIC2_BIT2_Pin|TRAFFIC2_BIT1_Pin;
 8001146:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_GPIO_Init+0x11c>)
 8001160:	f000 fc3e 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_LED2_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED2_Pin;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_LED2_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_GPIO_Init+0x120>)
 800117e:	f000 fc2f 	bl	80019e0 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800
 8001194:	40010c00 	.word	0x40010c00
 8001198:	40011000 	.word	0x40011000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <setTimer>:
#include "software_timer.h"

int timer_counter[NO_OF_TIMER];
int timer_flag[NO_OF_TIMER];

void setTimer(int duration, int ID){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	timer_counter[ID] = duration/TICK;
 80011b2:	4907      	ldr	r1, [pc, #28]	; (80011d0 <setTimer+0x28>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[ID] = 0;
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <setTimer+0x2c>)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2100      	movs	r1, #0
 80011c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200001f4 	.word	0x200001f4
 80011d4:	2000020c 	.word	0x2000020c

080011d8 <timerRun>:

void timerRun(){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	e01c      	b.n	800121e <timerRun+0x46>
		if(timer_counter[i] > 0){
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <timerRun+0x58>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dd13      	ble.n	8001218 <timerRun+0x40>
			timer_counter[i]--;
 80011f0:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <timerRun+0x58>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	1e5a      	subs	r2, r3, #1
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <timerRun+0x58>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <timerRun+0x58>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	2b00      	cmp	r3, #0
 800120c:	dc04      	bgt.n	8001218 <timerRun+0x40>
				timer_flag[i] = 1;
 800120e:	4a09      	ldr	r2, [pc, #36]	; (8001234 <timerRun+0x5c>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2101      	movs	r1, #1
 8001214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b05      	cmp	r3, #5
 8001222:	dddf      	ble.n	80011e4 <timerRun+0xc>
			}
		}
	}
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	200001f4 	.word	0x200001f4
 8001234:	2000020c 	.word	0x2000020c

08001238 <initTimer>:

void initTimer(int delay){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e006      	b.n	8001254 <initTimer+0x1c>
		setTimer(delay, i);
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffad 	bl	80011a8 <setTimer>
	for(int i = 0; i<NO_OF_TIMER; i++){
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b05      	cmp	r3, #5
 8001258:	ddf5      	ble.n	8001246 <initTimer+0xe>
	}
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_MspInit+0x5c>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_MspInit+0x5c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x5c>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x5c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_MspInit+0x60>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_MspInit+0x60>)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d114      	bne.n	8001304 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201c      	movs	r0, #28
 80012f8:	f000 fa8b 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012fc:	201c      	movs	r0, #28
 80012fe:	f000 faa4 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001302:	e018      	b.n	8001336 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_TIM_Base_MspInit+0x7c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d113      	bne.n	8001336 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_TIM_Base_MspInit+0x78>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	201d      	movs	r0, #29
 800132c:	f000 fa71 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001330:	201d      	movs	r0, #29
 8001332:	f000 fa8a 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	40000400 	.word	0x40000400

08001348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <HAL_TIM_MspPostInit+0x58>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d117      	bne.n	8001398 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_TIM_MspPostInit+0x5c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_TIM_MspPostInit+0x5c>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_TIM_MspPostInit+0x5c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001380:	2340      	movs	r3, #64	; 0x40
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_TIM_MspPostInit+0x60>)
 8001394:	f000 fb24 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d137      	bne.n	800143c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d6:	61d3      	str	r3, [r2, #28]
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_UART_MspInit+0x9c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013fc:	2304      	movs	r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480f      	ldr	r0, [pc, #60]	; (800144c <HAL_UART_MspInit+0xa0>)
 8001410:	f000 fae6 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001414:	2308      	movs	r3, #8
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <HAL_UART_MspInit+0xa0>)
 8001428:	f000 fada 	bl	80019e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	2026      	movs	r0, #38	; 0x26
 8001432:	f000 f9ee 	bl	8001812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001436:	2026      	movs	r0, #38	; 0x26
 8001438:	f000 fa07 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40004400 	.word	0x40004400
 8001448:	40021000 	.word	0x40021000
 800144c:	40010800 	.word	0x40010800

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f8c9 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM2_IRQHandler+0x10>)
 80014a6:	f001 fa1d 	bl	80028e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000120 	.word	0x20000120

080014b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM3_IRQHandler+0x10>)
 80014ba:	f001 fa13 	bl	80028e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000168 	.word	0x20000168

080014c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <USART2_IRQHandler+0x10>)
 80014ce:	f002 f8db 	bl	8003688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001b0 	.word	0x200001b0

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f002 fce4 	bl	8003ed8 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20005000 	.word	0x20005000
 800153c:	00000400 	.word	0x00000400
 8001540:	20000224 	.word	0x20000224
 8001544:	20000240 	.word	0x20000240

08001548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800156c:	4c0a      	ldr	r4, [pc, #40]	; (8001598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800157a:	f7ff ffe5 	bl	8001548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 fcb1 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001582:	f7ff fc21 	bl	8000dc8 <main>
  bx lr
 8001586:	4770      	bx	lr
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001590:	080048b8 	.word	0x080048b8
  ldr r2, =_sbss
 8001594:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001598:	2000023c 	.word	0x2000023c

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>
	...

080015a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_Init+0x28>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_Init+0x28>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 f923 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe52 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f93b 	bl	8001866 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 f903 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	; (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000014 	.word	0x20000014
 8001624:	2000001c 	.word	0x2000001c
 8001628:	20000018 	.word	0x20000018

0800162c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x1c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x20>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a03      	ldr	r2, [pc, #12]	; (800164c <HAL_IncTick+0x20>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	2000001c 	.word	0x2000001c
 800164c:	20000228 	.word	0x20000228

08001650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000228 	.word	0x20000228

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4906      	ldr	r1, [pc, #24]	; (80016fc <__NVIC_EnableIRQ+0x34>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff90 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff2d 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff42 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff35 	bl	80016c8 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001890:	2b02      	cmp	r3, #2
 8001892:	d008      	beq.n	80018a6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2204      	movs	r2, #4
 8001898:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e020      	b.n	80018e8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001906:	2b02      	cmp	r3, #2
 8001908:	d005      	beq.n	8001916 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2204      	movs	r2, #4
 800190e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e051      	b.n	80019ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020e 	bic.w	r2, r2, #14
 8001924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_DMA_Abort_IT+0xd0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d029      	beq.n	8001994 <HAL_DMA_Abort_IT+0xa0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_DMA_Abort_IT+0xd4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d022      	beq.n	8001990 <HAL_DMA_Abort_IT+0x9c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <HAL_DMA_Abort_IT+0xd8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d01a      	beq.n	800198a <HAL_DMA_Abort_IT+0x96>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_DMA_Abort_IT+0xdc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d012      	beq.n	8001984 <HAL_DMA_Abort_IT+0x90>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_DMA_Abort_IT+0xe0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00a      	beq.n	800197e <HAL_DMA_Abort_IT+0x8a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1a      	ldr	r2, [pc, #104]	; (80019d8 <HAL_DMA_Abort_IT+0xe4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d102      	bne.n	8001978 <HAL_DMA_Abort_IT+0x84>
 8001972:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001976:	e00e      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 8001978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800197c:	e00b      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 800197e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001982:	e008      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	e005      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 800198a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198e:	e002      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 8001990:	2310      	movs	r3, #16
 8001992:	e000      	b.n	8001996 <HAL_DMA_Abort_IT+0xa2>
 8001994:	2301      	movs	r3, #1
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_DMA_Abort_IT+0xe8>)
 8001998:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
    } 
  }
  return status;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020008 	.word	0x40020008
 80019c8:	4002001c 	.word	0x4002001c
 80019cc:	40020030 	.word	0x40020030
 80019d0:	40020044 	.word	0x40020044
 80019d4:	40020058 	.word	0x40020058
 80019d8:	4002006c 	.word	0x4002006c
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f2:	e169      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f4:	2201      	movs	r2, #1
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8158 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a9a      	ldr	r2, [pc, #616]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d05e      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a1c:	4a98      	ldr	r2, [pc, #608]	; (8001c80 <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d875      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a22:	4a98      	ldr	r2, [pc, #608]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d058      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a28:	4a96      	ldr	r2, [pc, #600]	; (8001c84 <HAL_GPIO_Init+0x2a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d86f      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a2e:	4a96      	ldr	r2, [pc, #600]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d052      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a34:	4a94      	ldr	r2, [pc, #592]	; (8001c88 <HAL_GPIO_Init+0x2a8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d869      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a3a:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d04c      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a40:	4a92      	ldr	r2, [pc, #584]	; (8001c8c <HAL_GPIO_Init+0x2ac>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d863      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a46:	4a92      	ldr	r2, [pc, #584]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d046      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
 8001a4c:	4a90      	ldr	r2, [pc, #576]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d85d      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a52:	2b12      	cmp	r3, #18
 8001a54:	d82a      	bhi.n	8001aac <HAL_GPIO_Init+0xcc>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d859      	bhi.n	8001b0e <HAL_GPIO_Init+0x12e>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <HAL_GPIO_Init+0x80>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001adb 	.word	0x08001adb
 8001a64:	08001ab5 	.word	0x08001ab5
 8001a68:	08001ac7 	.word	0x08001ac7
 8001a6c:	08001b09 	.word	0x08001b09
 8001a70:	08001b0f 	.word	0x08001b0f
 8001a74:	08001b0f 	.word	0x08001b0f
 8001a78:	08001b0f 	.word	0x08001b0f
 8001a7c:	08001b0f 	.word	0x08001b0f
 8001a80:	08001b0f 	.word	0x08001b0f
 8001a84:	08001b0f 	.word	0x08001b0f
 8001a88:	08001b0f 	.word	0x08001b0f
 8001a8c:	08001b0f 	.word	0x08001b0f
 8001a90:	08001b0f 	.word	0x08001b0f
 8001a94:	08001b0f 	.word	0x08001b0f
 8001a98:	08001b0f 	.word	0x08001b0f
 8001a9c:	08001b0f 	.word	0x08001b0f
 8001aa0:	08001b0f 	.word	0x08001b0f
 8001aa4:	08001abd 	.word	0x08001abd
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	4a79      	ldr	r2, [pc, #484]	; (8001c94 <HAL_GPIO_Init+0x2b4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab2:	e02c      	b.n	8001b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e029      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e024      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	3308      	adds	r3, #8
 8001acc:	623b      	str	r3, [r7, #32]
          break;
 8001ace:	e01f      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	e01a      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	623b      	str	r3, [r7, #32]
          break;
 8001ae6:	e013      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af0:	2308      	movs	r3, #8
 8001af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	611a      	str	r2, [r3, #16]
          break;
 8001afa:	e009      	b.n	8001b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001afc:	2308      	movs	r3, #8
 8001afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	615a      	str	r2, [r3, #20]
          break;
 8001b06:	e003      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
          break;
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x130>
          break;
 8001b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d801      	bhi.n	8001b1a <HAL_GPIO_Init+0x13a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_Init+0x13e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d802      	bhi.n	8001b2c <HAL_GPIO_Init+0x14c>
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x152>
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3b08      	subs	r3, #8
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	210f      	movs	r1, #15
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	6a39      	ldr	r1, [r7, #32]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80b1 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b4a      	ldr	r3, [pc, #296]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_GPIO_Init+0x2c0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d013      	beq.n	8001bcc <HAL_GPIO_Init+0x1ec>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3f      	ldr	r2, [pc, #252]	; (8001ca4 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00d      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3e      	ldr	r2, [pc, #248]	; (8001ca8 <HAL_GPIO_Init+0x2c8>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d007      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_GPIO_Init+0x2cc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_GPIO_Init+0x1e0>
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e004      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_GPIO_Init+0x1ee>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	f002 0203 	and.w	r2, r2, #3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bde:	492f      	ldr	r1, [pc, #188]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4928      	ldr	r1, [pc, #160]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4922      	ldr	r1, [pc, #136]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2e:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	491e      	ldr	r1, [pc, #120]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4914      	ldr	r1, [pc, #80]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d021      	beq.n	8001cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <HAL_GPIO_Init+0x2d0>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
 8001c7c:	e021      	b.n	8001cc2 <HAL_GPIO_Init+0x2e2>
 8001c7e:	bf00      	nop
 8001c80:	10320000 	.word	0x10320000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10220000 	.word	0x10220000
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10120000 	.word	0x10120000
 8001c94:	10110000 	.word	0x10110000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40010c00 	.word	0x40010c00
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4909      	ldr	r1, [pc, #36]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f47f ae8e 	bne.w	80019f4 <HAL_GPIO_Init+0x14>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	372c      	adds	r7, #44	; 0x2c
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	40010400 	.word	0x40010400

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	807b      	strh	r3, [r7, #2]
 8001d22:	4613      	mov	r3, r2
 8001d24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d26:	787b      	ldrb	r3, [r7, #1]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d32:	e003      	b.n	8001d3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	041a      	lsls	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	611a      	str	r2, [r3, #16]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d58:	887a      	ldrh	r2, [r7, #2]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	041a      	lsls	r2, r3, #16
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	400b      	ands	r3, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e272      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8087 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d98:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da4:	4b8f      	ldr	r3, [pc, #572]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d112      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
 8001db0:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d168      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e24c      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x76>
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e02e      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x98>
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a77      	ldr	r2, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0xbc>
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fbfc 	bl	8001650 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fbf8 	bl	8001650 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e200      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xe4>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fbe8 	bl	8001650 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fbe4 	bl	8001650 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1ec      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x10c>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
 8001eca:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1c0      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4939      	ldr	r1, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fb9d 	bl	8001650 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fb99 	bl	8001650 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a1      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4927      	ldr	r1, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fb7c 	bl	8001650 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fb78 	bl	8001650 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e180      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03a      	beq.n	8001ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d019      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fb5c 	bl	8001650 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb58 	bl	8001650 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e160      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 fad8 	bl	8002570 <RCC_Delay>
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fb42 	bl	8001650 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fb3e 	bl	8001650 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e146      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	42420000 	.word	0x42420000
 8001fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b92      	ldr	r3, [pc, #584]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e9      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a6 	beq.w	8002156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b8b      	ldr	r3, [pc, #556]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a87      	ldr	r2, [pc, #540]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7e      	ldr	r2, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff faff 	bl	8001650 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff fafb 	bl	8001650 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e103      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x4c8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x312>
 800207c:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a6e      	ldr	r2, [pc, #440]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e02d      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x334>
 8002092:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a69      	ldr	r2, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a66      	ldr	r2, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e01c      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x356>
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a60      	ldr	r2, [pc, #384]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	4b5e      	ldr	r3, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a57      	ldr	r2, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff faaf 	bl	8001650 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7ff faab 	bl	8001650 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0b1      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b4b      	ldr	r3, [pc, #300]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCC_OscConfig+0x37e>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fa99 	bl	8001650 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff fa95 	bl	8001650 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e09b      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b3c      	ldr	r3, [pc, #240]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a3b      	ldr	r2, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d061      	beq.n	8002230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d146      	bne.n	8002202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b33      	ldr	r3, [pc, #204]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fa69 	bl	8001650 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fa65 	bl	8001650 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e06d      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d108      	bne.n	80021bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4921      	ldr	r1, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a19      	ldr	r1, [r3, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	430b      	orrs	r3, r1
 80021ce:	491b      	ldr	r1, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fa39 	bl	8001650 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff fa35 	bl	8001650 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e03d      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46a>
 8002200:	e035      	b.n	800226e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_RCC_OscConfig+0x4cc>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa22 	bl	8001650 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fa1e 	bl	8001650 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e026      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x4c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x498>
 800222e:	e01e      	b.n	800226e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e019      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x500>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff f970 	bl	8001650 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff f96c 	bl	8001650 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f8ce 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	08004864 	.word	0x08004864
 8002448:	20000014 	.word	0x20000014
 800244c:	20000018 	.word	0x20000018

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b490      	push	{r4, r7}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_GetSysClockFreq+0xac>)
 8002458:	1d3c      	adds	r4, r7, #4
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002460:	f240 2301 	movw	r3, #513	; 0x201
 8002464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x46>
 800248e:	e02b      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	e02b      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3328      	adds	r3, #40	; 0x28
 80024a0:	443b      	add	r3, r7
 80024a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	443b      	add	r3, r7
 80024c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e004      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	623b      	str	r3, [r7, #32]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc90      	pop	{r4, r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	08004854 	.word	0x08004854
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200
 8002508:	003d0900 	.word	0x003d0900

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_RCC_GetHCLKFreq+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000014 	.word	0x20000014

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002524:	f7ff fff2 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08004874 	.word	0x08004874

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800254c:	f7ff ffde 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	08004874 	.word	0x08004874

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000014 	.word	0x20000014
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fe78 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fc28 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e03a      	b.n	80026da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_TIM_Base_Start_IT+0x98>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d009      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_TIM_Base_Start_IT+0x58>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_TIM_Base_Start_IT+0xa0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d010      	beq.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	e007      	b.n	80026d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800

080026f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e041      	b.n	8002786 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f839 	bl	800278e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f000 fb86 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x24>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e022      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d109      	bne.n	80027de <HAL_TIM_PWM_Start+0x3e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	bf14      	ite	ne
 80027d6:	2301      	movne	r3, #1
 80027d8:	2300      	moveq	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e015      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start+0x58>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	bf14      	ite	ne
 80027f0:	2301      	movne	r3, #1
 80027f2:	2300      	moveq	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e008      	b.n	800280a <HAL_TIM_PWM_Start+0x6a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e05e      	b.n	80028d0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_TIM_PWM_Start+0x82>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	e013      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d104      	bne.n	8002832 <HAL_TIM_PWM_Start+0x92>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	e00b      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d104      	bne.n	8002842 <HAL_TIM_PWM_Start+0xa2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	e003      	b.n	800284a <HAL_TIM_PWM_Start+0xaa>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2201      	movs	r2, #1
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd74 	bl	8003340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <HAL_TIM_PWM_Start+0x138>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d107      	bne.n	8002872 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <HAL_TIM_PWM_Start+0x138>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIM_PWM_Start+0xfa>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d009      	beq.n	800289a <HAL_TIM_PWM_Start+0xfa>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a14      	ldr	r2, [pc, #80]	; (80028dc <HAL_TIM_PWM_Start+0x13c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIM_PWM_Start+0xfa>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <HAL_TIM_PWM_Start+0x140>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d111      	bne.n	80028be <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d010      	beq.n	80028ce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	e007      	b.n	80028ce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d122      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d11b      	bne.n	8002940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa6f 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa62 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa71 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d122      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b04      	cmp	r3, #4
 800295a:	d11b      	bne.n	8002994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0204 	mvn.w	r2, #4
 8002964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2202      	movs	r2, #2
 800296a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa45 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002980:	e005      	b.n	800298e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa38 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fa47 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d122      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d11b      	bne.n	80029e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0208 	mvn.w	r2, #8
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa1b 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 80029d4:	e005      	b.n	80029e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa0e 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fa1d 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d122      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d11b      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f9f1 	bl	8002e0a <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9e4 	bl	8002df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f9f3 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10e      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fb7a 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d10e      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b80      	cmp	r3, #128	; 0x80
 8002a82:	d107      	bne.n	8002a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fce1 	bl	8003456 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f9b7 	bl	8002e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d107      	bne.n	8002aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0220 	mvn.w	r2, #32
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fcac 	bl	8003444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0ac      	b.n	8002c68 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	f200 809f 	bhi.w	8002c5c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b59 	.word	0x08002b59
 8002b28:	08002c5d 	.word	0x08002c5d
 8002b2c:	08002c5d 	.word	0x08002c5d
 8002b30:	08002c5d 	.word	0x08002c5d
 8002b34:	08002b99 	.word	0x08002b99
 8002b38:	08002c5d 	.word	0x08002c5d
 8002b3c:	08002c5d 	.word	0x08002c5d
 8002b40:	08002c5d 	.word	0x08002c5d
 8002b44:	08002bdb 	.word	0x08002bdb
 8002b48:	08002c5d 	.word	0x08002c5d
 8002b4c:	08002c5d 	.word	0x08002c5d
 8002b50:	08002c5d 	.word	0x08002c5d
 8002b54:	08002c1b 	.word	0x08002c1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f9d0 	bl	8002f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0208 	orr.w	r2, r2, #8
 8002b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0204 	bic.w	r2, r2, #4
 8002b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	619a      	str	r2, [r3, #24]
      break;
 8002b96:	e062      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fa16 	bl	8002fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6999      	ldr	r1, [r3, #24]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	021a      	lsls	r2, r3, #8
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	619a      	str	r2, [r3, #24]
      break;
 8002bd8:	e041      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fa5f 	bl	80030a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69da      	ldr	r2, [r3, #28]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0208 	orr.w	r2, r2, #8
 8002bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0204 	bic.w	r2, r2, #4
 8002c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69d9      	ldr	r1, [r3, #28]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	61da      	str	r2, [r3, #28]
      break;
 8002c18:	e021      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 faa9 	bl	8003178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69d9      	ldr	r1, [r3, #28]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	61da      	str	r2, [r3, #28]
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_ConfigClockSource+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0b3      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x180>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d03e      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0xd0>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	f200 8087 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	f000 8085 	beq.w	8002ddc <HAL_TIM_ConfigClockSource+0x16c>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d87f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d01a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xa2>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d87b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d050      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x116>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d877      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d03c      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0xf6>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d873      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d058      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x136>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d86f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d064      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x156>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d86b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d060      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x156>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d867      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05c      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x156>
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d05a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d10:	e062      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f000 faee 	bl	8003302 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	609a      	str	r2, [r3, #8]
      break;
 8002d3e:	e04e      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f000 fad7 	bl	8003302 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d62:	609a      	str	r2, [r3, #8]
      break;
 8002d64:	e03b      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 fa4e 	bl	8003214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2150      	movs	r1, #80	; 0x50
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 faa5 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8002d84:	e02b      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 fa6c 	bl	8003270 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2160      	movs	r1, #96	; 0x60
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa95 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8002da4:	e01b      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 fa2e 	bl	8003214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fa85 	bl	80032ce <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e00b      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 fa7c 	bl	80032ce <TIM_ITRx_SetConfig>
        break;
 8002dd6:	e002      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002dd8:	bf00      	nop
 8002dda:	e000      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ddc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <TIM_Base_SetConfig+0xb8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_Base_SetConfig+0x30>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5e:	d007      	beq.n	8002e70 <TIM_Base_SetConfig+0x30>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a26      	ldr	r2, [pc, #152]	; (8002efc <TIM_Base_SetConfig+0xbc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_Base_SetConfig+0x30>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0xc0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d108      	bne.n	8002e82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <TIM_Base_SetConfig+0xb8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_Base_SetConfig+0x62>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d007      	beq.n	8002ea2 <TIM_Base_SetConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <TIM_Base_SetConfig+0xbc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0x62>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <TIM_Base_SetConfig+0xc0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <TIM_Base_SetConfig+0xb8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d103      	bne.n	8002ee8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	615a      	str	r2, [r3, #20]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800

08002f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f023 0201 	bic.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f023 0302 	bic.w	r3, r3, #2
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <TIM_OC1_SetConfig+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10c      	bne.n	8002f7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0308 	bic.w	r3, r3, #8
 8002f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <TIM_OC1_SetConfig+0xc8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d111      	bne.n	8002fa6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	621a      	str	r2, [r3, #32]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40012c00 	.word	0x40012c00

08002fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0210 	bic.w	r2, r3, #16
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	021b      	lsls	r3, r3, #8
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0320 	bic.w	r3, r3, #32
 800301a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <TIM_OC2_SetConfig+0xd0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d10d      	bne.n	800304c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <TIM_OC2_SetConfig+0xd0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d113      	bne.n	800307c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800305a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00

080030a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <TIM_OC3_SetConfig+0xd0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <TIM_OC3_SetConfig+0xd0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d113      	bne.n	800314e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800312c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]
}
 8003168:	bf00      	nop
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40012c00 	.word	0x40012c00

08003178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	031b      	lsls	r3, r3, #12
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <TIM_OC4_SetConfig+0x98>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d109      	bne.n	80031ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00

08003214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 030a 	bic.w	r3, r3, #10
 8003250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	621a      	str	r2, [r3, #32]
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f023 0210 	bic.w	r2, r3, #16
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800329a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	031b      	lsls	r3, r3, #12
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f043 0307 	orr.w	r3, r3, #7
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003302:	b480      	push	{r7}
 8003304:	b087      	sub	sp, #28
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800331c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	021a      	lsls	r2, r3, #8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	431a      	orrs	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4313      	orrs	r3, r2
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	609a      	str	r2, [r3, #8]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2201      	movs	r2, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	43db      	mvns	r3, r3
 8003362:	401a      	ands	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1a      	ldr	r2, [r3, #32]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800339c:	2302      	movs	r3, #2
 800339e:	e046      	b.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d009      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10c      	bne.n	800341c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	4313      	orrs	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800

08003444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e03f      	b.n	80034fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd ff8c 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2224      	movs	r2, #36	; 0x24
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fc85 	bl	8003dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	; 0x28
 8003506:	af02      	add	r7, sp, #8
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b20      	cmp	r3, #32
 8003520:	d17c      	bne.n	800361c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit+0x2c>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e075      	b.n	800361e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit+0x3e>
 800353c:	2302      	movs	r3, #2
 800353e:	e06e      	b.n	800361e <HAL_UART_Transmit+0x11c>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2221      	movs	r2, #33	; 0x21
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003556:	f7fe f87b 	bl	8001650 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003570:	d108      	bne.n	8003584 <HAL_UART_Transmit+0x82>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d104      	bne.n	8003584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e003      	b.n	800358c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003594:	e02a      	b.n	80035ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa38 	bl	8003a16 <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e036      	b.n	800361e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3302      	adds	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	e007      	b.n	80035de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1cf      	bne.n	8003596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	; 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fa08 	bl	8003a16 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e006      	b.n	800361e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b20      	cmp	r3, #32
 800363e:	d11d      	bne.n	800367c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_UART_Receive_IT+0x26>
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e016      	b.n	800367e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_UART_Receive_IT+0x38>
 800365a:	2302      	movs	r3, #2
 800365c:	e00f      	b.n	800367e <HAL_UART_Receive_IT+0x58>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	461a      	mov	r2, r3
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa19 	bl	8003aaa <UART_Start_Receive_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	e000      	b.n	800367e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10d      	bne.n	80036da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_UART_IRQHandler+0x52>
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fac9 	bl	8003c6a <UART_Receive_IT>
      return;
 80036d8:	e17b      	b.n	80039d2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80b1 	beq.w	8003844 <HAL_UART_IRQHandler+0x1bc>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_UART_IRQHandler+0x70>
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a6 	beq.w	8003844 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00a      	beq.n	8003718 <HAL_UART_IRQHandler+0x90>
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_UART_IRQHandler+0xb0>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f043 0202 	orr.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_UART_IRQHandler+0xd0>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00f      	beq.n	8003782 <HAL_UART_IRQHandler+0xfa>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <HAL_UART_IRQHandler+0xee>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0208 	orr.w	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 811e 	beq.w	80039c8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d007      	beq.n	80037a6 <HAL_UART_IRQHandler+0x11e>
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fa62 	bl	8003c6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_UART_IRQHandler+0x146>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d031      	beq.n	8003832 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9a4 	bl	8003b1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d023      	beq.n	800382a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4a76      	ldr	r2, [pc, #472]	; (80039d8 <HAL_UART_IRQHandler+0x350>)
 8003800:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f874 	bl	80018f4 <HAL_DMA_Abort_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00e      	b.n	8003840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8e3 	bl	80039ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e00a      	b.n	8003840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f8df 	bl	80039ee <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e006      	b.n	8003840 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8db 	bl	80039ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800383e:	e0c3      	b.n	80039c8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	bf00      	nop
    return;
 8003842:	e0c1      	b.n	80039c8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 80a1 	bne.w	8003990 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 809b 	beq.w	8003990 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 8095 	beq.w	8003990 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04e      	beq.n	8003928 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003894:	8a3b      	ldrh	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8098 	beq.w	80039cc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a0:	8a3a      	ldrh	r2, [r7, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	f080 8092 	bcs.w	80039cc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8a3a      	ldrh	r2, [r7, #16]
 80038ac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d02b      	beq.n	8003910 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0210 	bic.w	r2, r2, #16
 8003904:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd ffb7 	bl	800187e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	b29b      	uxth	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f86d 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003926:	e051      	b.n	80039cc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003930:	b29b      	uxth	r3, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d047      	beq.n	80039d0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003940:	8a7b      	ldrh	r3, [r7, #18]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d044      	beq.n	80039d0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003954:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0210 	bic.w	r2, r2, #16
 8003982:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003984:	8a7b      	ldrh	r3, [r7, #18]
 8003986:	4619      	mov	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f839 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800398e:	e01f      	b.n	80039d0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_UART_IRQHandler+0x324>
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8f9 	bl	8003b9c <UART_Transmit_IT>
    return;
 80039aa:	e012      	b.n	80039d2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <HAL_UART_IRQHandler+0x34a>
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f93a 	bl	8003c3a <UART_EndTransmit_IT>
    return;
 80039c6:	e004      	b.n	80039d2 <HAL_UART_IRQHandler+0x34a>
    return;
 80039c8:	bf00      	nop
 80039ca:	e002      	b.n	80039d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <HAL_UART_IRQHandler+0x34a>
      return;
 80039d0:	bf00      	nop
  }
}
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	08003b75 	.word	0x08003b75

080039dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a26:	e02c      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d028      	beq.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a36:	f7fd fe0b 	bl	8001650 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d21d      	bcs.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a54:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e00f      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d0c3      	beq.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2222      	movs	r2, #34	; 0x22
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0220 	orr.w	r2, r2, #32
 8003b0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0210 	bic.w	r2, r2, #16
 8003b5a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff ff2d 	bl	80039ee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b21      	cmp	r3, #33	; 0x21
 8003bae:	d13e      	bne.n	8003c2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	d114      	bne.n	8003be4 <UART_Transmit_IT+0x48>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d110      	bne.n	8003be4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]
 8003be2:	e008      	b.n	8003bf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	1c59      	adds	r1, r3, #1
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6211      	str	r1, [r2, #32]
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4619      	mov	r1, r3
 8003c04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff febe 	bl	80039dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b086      	sub	sp, #24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b22      	cmp	r3, #34	; 0x22
 8003c7c:	f040 8099 	bne.w	8003db2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d117      	bne.n	8003cba <UART_Receive_IT+0x50>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb8:	e026      	b.n	8003d08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d007      	beq.n	8003cde <UART_Receive_IT+0x74>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <UART_Receive_IT+0x82>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e008      	b.n	8003cfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4619      	mov	r1, r3
 8003d16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d148      	bne.n	8003dae <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0220 	bic.w	r2, r2, #32
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d123      	bne.n	8003da4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0210 	bic.w	r2, r2, #16
 8003d70:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d10a      	bne.n	8003d96 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff fe2f 	bl	8003a00 <HAL_UARTEx_RxEventCallback>
 8003da2:	e002      	b.n	8003daa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fc f9eb 	bl	8000180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e002      	b.n	8003db4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
  }
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <UART_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7fe fb90 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	e002      	b.n	8003e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe fb78 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <UART_SetConfig+0x118>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	0119      	lsls	r1, r3, #4
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <UART_SetConfig+0x118>)
 8003e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2064      	movs	r0, #100	; 0x64
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	; 0x32
 8003e7c:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <UART_SetConfig+0x118>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	4419      	add	r1, r3
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <UART_SetConfig+0x118>)
 8003ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <UART_SetConfig+0x118>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	51eb851f 	.word	0x51eb851f

08003ed8 <__errno>:
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <__errno+0x8>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000020 	.word	0x20000020

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	4d0c      	ldr	r5, [pc, #48]	; (8003f1c <__libc_init_array+0x38>)
 8003eea:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <__libc_init_array+0x3c>)
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	42a6      	cmp	r6, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	f000 fc9c 	bl	8004830 <_init>
 8003ef8:	2600      	movs	r6, #0
 8003efa:	4d0a      	ldr	r5, [pc, #40]	; (8003f24 <__libc_init_array+0x40>)
 8003efc:	4c0a      	ldr	r4, [pc, #40]	; (8003f28 <__libc_init_array+0x44>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	42a6      	cmp	r6, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0c:	4798      	blx	r3
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f16:	4798      	blx	r3
 8003f18:	3601      	adds	r6, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	080048b0 	.word	0x080048b0
 8003f20:	080048b0 	.word	0x080048b0
 8003f24:	080048b0 	.word	0x080048b0
 8003f28:	080048b4 	.word	0x080048b4

08003f2c <memset>:
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4402      	add	r2, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <siprintf>:
 8003f3c:	b40e      	push	{r1, r2, r3}
 8003f3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f42:	b500      	push	{lr}
 8003f44:	b09c      	sub	sp, #112	; 0x70
 8003f46:	ab1d      	add	r3, sp, #116	; 0x74
 8003f48:	9002      	str	r0, [sp, #8]
 8003f4a:	9006      	str	r0, [sp, #24]
 8003f4c:	9107      	str	r1, [sp, #28]
 8003f4e:	9104      	str	r1, [sp, #16]
 8003f50:	4808      	ldr	r0, [pc, #32]	; (8003f74 <siprintf+0x38>)
 8003f52:	4909      	ldr	r1, [pc, #36]	; (8003f78 <siprintf+0x3c>)
 8003f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f58:	9105      	str	r1, [sp, #20]
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	a902      	add	r1, sp, #8
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	f000 f868 	bl	8004034 <_svfiprintf_r>
 8003f64:	2200      	movs	r2, #0
 8003f66:	9b02      	ldr	r3, [sp, #8]
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	b01c      	add	sp, #112	; 0x70
 8003f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f70:	b003      	add	sp, #12
 8003f72:	4770      	bx	lr
 8003f74:	20000020 	.word	0x20000020
 8003f78:	ffff0208 	.word	0xffff0208

08003f7c <__ssputs_r>:
 8003f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f80:	688e      	ldr	r6, [r1, #8]
 8003f82:	4682      	mov	sl, r0
 8003f84:	429e      	cmp	r6, r3
 8003f86:	460c      	mov	r4, r1
 8003f88:	4690      	mov	r8, r2
 8003f8a:	461f      	mov	r7, r3
 8003f8c:	d838      	bhi.n	8004000 <__ssputs_r+0x84>
 8003f8e:	898a      	ldrh	r2, [r1, #12]
 8003f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f94:	d032      	beq.n	8003ffc <__ssputs_r+0x80>
 8003f96:	6825      	ldr	r5, [r4, #0]
 8003f98:	6909      	ldr	r1, [r1, #16]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	eba5 0901 	sub.w	r9, r5, r1
 8003fa0:	6965      	ldr	r5, [r4, #20]
 8003fa2:	444b      	add	r3, r9
 8003fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fac:	106d      	asrs	r5, r5, #1
 8003fae:	429d      	cmp	r5, r3
 8003fb0:	bf38      	it	cc
 8003fb2:	461d      	movcc	r5, r3
 8003fb4:	0553      	lsls	r3, r2, #21
 8003fb6:	d531      	bpl.n	800401c <__ssputs_r+0xa0>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f000 fb6f 	bl	800469c <_malloc_r>
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	b950      	cbnz	r0, 8003fd8 <__ssputs_r+0x5c>
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f8ca 3000 	str.w	r3, [sl]
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd8:	464a      	mov	r2, r9
 8003fda:	6921      	ldr	r1, [r4, #16]
 8003fdc:	f000 face 	bl	800457c <memcpy>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	6126      	str	r6, [r4, #16]
 8003fee:	444e      	add	r6, r9
 8003ff0:	6026      	str	r6, [r4, #0]
 8003ff2:	463e      	mov	r6, r7
 8003ff4:	6165      	str	r5, [r4, #20]
 8003ff6:	eba5 0509 	sub.w	r5, r5, r9
 8003ffa:	60a5      	str	r5, [r4, #8]
 8003ffc:	42be      	cmp	r6, r7
 8003ffe:	d900      	bls.n	8004002 <__ssputs_r+0x86>
 8004000:	463e      	mov	r6, r7
 8004002:	4632      	mov	r2, r6
 8004004:	4641      	mov	r1, r8
 8004006:	6820      	ldr	r0, [r4, #0]
 8004008:	f000 fac6 	bl	8004598 <memmove>
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	2000      	movs	r0, #0
 8004010:	1b9b      	subs	r3, r3, r6
 8004012:	60a3      	str	r3, [r4, #8]
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	4433      	add	r3, r6
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	e7db      	b.n	8003fd4 <__ssputs_r+0x58>
 800401c:	462a      	mov	r2, r5
 800401e:	f000 fbb1 	bl	8004784 <_realloc_r>
 8004022:	4606      	mov	r6, r0
 8004024:	2800      	cmp	r0, #0
 8004026:	d1e1      	bne.n	8003fec <__ssputs_r+0x70>
 8004028:	4650      	mov	r0, sl
 800402a:	6921      	ldr	r1, [r4, #16]
 800402c:	f000 face 	bl	80045cc <_free_r>
 8004030:	e7c7      	b.n	8003fc2 <__ssputs_r+0x46>
	...

08004034 <_svfiprintf_r>:
 8004034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	4698      	mov	r8, r3
 800403a:	898b      	ldrh	r3, [r1, #12]
 800403c:	4607      	mov	r7, r0
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	460d      	mov	r5, r1
 8004042:	4614      	mov	r4, r2
 8004044:	b09d      	sub	sp, #116	; 0x74
 8004046:	d50e      	bpl.n	8004066 <_svfiprintf_r+0x32>
 8004048:	690b      	ldr	r3, [r1, #16]
 800404a:	b963      	cbnz	r3, 8004066 <_svfiprintf_r+0x32>
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	f000 fb25 	bl	800469c <_malloc_r>
 8004052:	6028      	str	r0, [r5, #0]
 8004054:	6128      	str	r0, [r5, #16]
 8004056:	b920      	cbnz	r0, 8004062 <_svfiprintf_r+0x2e>
 8004058:	230c      	movs	r3, #12
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	e0d1      	b.n	8004206 <_svfiprintf_r+0x1d2>
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	616b      	str	r3, [r5, #20]
 8004066:	2300      	movs	r3, #0
 8004068:	9309      	str	r3, [sp, #36]	; 0x24
 800406a:	2320      	movs	r3, #32
 800406c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004070:	2330      	movs	r3, #48	; 0x30
 8004072:	f04f 0901 	mov.w	r9, #1
 8004076:	f8cd 800c 	str.w	r8, [sp, #12]
 800407a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004220 <_svfiprintf_r+0x1ec>
 800407e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004082:	4623      	mov	r3, r4
 8004084:	469a      	mov	sl, r3
 8004086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800408a:	b10a      	cbz	r2, 8004090 <_svfiprintf_r+0x5c>
 800408c:	2a25      	cmp	r2, #37	; 0x25
 800408e:	d1f9      	bne.n	8004084 <_svfiprintf_r+0x50>
 8004090:	ebba 0b04 	subs.w	fp, sl, r4
 8004094:	d00b      	beq.n	80040ae <_svfiprintf_r+0x7a>
 8004096:	465b      	mov	r3, fp
 8004098:	4622      	mov	r2, r4
 800409a:	4629      	mov	r1, r5
 800409c:	4638      	mov	r0, r7
 800409e:	f7ff ff6d 	bl	8003f7c <__ssputs_r>
 80040a2:	3001      	adds	r0, #1
 80040a4:	f000 80aa 	beq.w	80041fc <_svfiprintf_r+0x1c8>
 80040a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040aa:	445a      	add	r2, fp
 80040ac:	9209      	str	r2, [sp, #36]	; 0x24
 80040ae:	f89a 3000 	ldrb.w	r3, [sl]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80a2 	beq.w	80041fc <_svfiprintf_r+0x1c8>
 80040b8:	2300      	movs	r3, #0
 80040ba:	f04f 32ff 	mov.w	r2, #4294967295
 80040be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c2:	f10a 0a01 	add.w	sl, sl, #1
 80040c6:	9304      	str	r3, [sp, #16]
 80040c8:	9307      	str	r3, [sp, #28]
 80040ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ce:	931a      	str	r3, [sp, #104]	; 0x68
 80040d0:	4654      	mov	r4, sl
 80040d2:	2205      	movs	r2, #5
 80040d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d8:	4851      	ldr	r0, [pc, #324]	; (8004220 <_svfiprintf_r+0x1ec>)
 80040da:	f000 fa41 	bl	8004560 <memchr>
 80040de:	9a04      	ldr	r2, [sp, #16]
 80040e0:	b9d8      	cbnz	r0, 800411a <_svfiprintf_r+0xe6>
 80040e2:	06d0      	lsls	r0, r2, #27
 80040e4:	bf44      	itt	mi
 80040e6:	2320      	movmi	r3, #32
 80040e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ec:	0711      	lsls	r1, r2, #28
 80040ee:	bf44      	itt	mi
 80040f0:	232b      	movmi	r3, #43	; 0x2b
 80040f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040f6:	f89a 3000 	ldrb.w	r3, [sl]
 80040fa:	2b2a      	cmp	r3, #42	; 0x2a
 80040fc:	d015      	beq.n	800412a <_svfiprintf_r+0xf6>
 80040fe:	4654      	mov	r4, sl
 8004100:	2000      	movs	r0, #0
 8004102:	f04f 0c0a 	mov.w	ip, #10
 8004106:	9a07      	ldr	r2, [sp, #28]
 8004108:	4621      	mov	r1, r4
 800410a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410e:	3b30      	subs	r3, #48	; 0x30
 8004110:	2b09      	cmp	r3, #9
 8004112:	d94e      	bls.n	80041b2 <_svfiprintf_r+0x17e>
 8004114:	b1b0      	cbz	r0, 8004144 <_svfiprintf_r+0x110>
 8004116:	9207      	str	r2, [sp, #28]
 8004118:	e014      	b.n	8004144 <_svfiprintf_r+0x110>
 800411a:	eba0 0308 	sub.w	r3, r0, r8
 800411e:	fa09 f303 	lsl.w	r3, r9, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	46a2      	mov	sl, r4
 8004126:	9304      	str	r3, [sp, #16]
 8004128:	e7d2      	b.n	80040d0 <_svfiprintf_r+0x9c>
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	1d19      	adds	r1, r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	9103      	str	r1, [sp, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	bfbb      	ittet	lt
 8004136:	425b      	neglt	r3, r3
 8004138:	f042 0202 	orrlt.w	r2, r2, #2
 800413c:	9307      	strge	r3, [sp, #28]
 800413e:	9307      	strlt	r3, [sp, #28]
 8004140:	bfb8      	it	lt
 8004142:	9204      	strlt	r2, [sp, #16]
 8004144:	7823      	ldrb	r3, [r4, #0]
 8004146:	2b2e      	cmp	r3, #46	; 0x2e
 8004148:	d10c      	bne.n	8004164 <_svfiprintf_r+0x130>
 800414a:	7863      	ldrb	r3, [r4, #1]
 800414c:	2b2a      	cmp	r3, #42	; 0x2a
 800414e:	d135      	bne.n	80041bc <_svfiprintf_r+0x188>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3402      	adds	r4, #2
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9203      	str	r2, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfb8      	it	lt
 800415e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004224 <_svfiprintf_r+0x1f0>
 8004168:	2203      	movs	r2, #3
 800416a:	4650      	mov	r0, sl
 800416c:	7821      	ldrb	r1, [r4, #0]
 800416e:	f000 f9f7 	bl	8004560 <memchr>
 8004172:	b140      	cbz	r0, 8004186 <_svfiprintf_r+0x152>
 8004174:	2340      	movs	r3, #64	; 0x40
 8004176:	eba0 000a 	sub.w	r0, r0, sl
 800417a:	fa03 f000 	lsl.w	r0, r3, r0
 800417e:	9b04      	ldr	r3, [sp, #16]
 8004180:	3401      	adds	r4, #1
 8004182:	4303      	orrs	r3, r0
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418a:	2206      	movs	r2, #6
 800418c:	4826      	ldr	r0, [pc, #152]	; (8004228 <_svfiprintf_r+0x1f4>)
 800418e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004192:	f000 f9e5 	bl	8004560 <memchr>
 8004196:	2800      	cmp	r0, #0
 8004198:	d038      	beq.n	800420c <_svfiprintf_r+0x1d8>
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <_svfiprintf_r+0x1f8>)
 800419c:	bb1b      	cbnz	r3, 80041e6 <_svfiprintf_r+0x1b2>
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	3307      	adds	r3, #7
 80041a2:	f023 0307 	bic.w	r3, r3, #7
 80041a6:	3308      	adds	r3, #8
 80041a8:	9303      	str	r3, [sp, #12]
 80041aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ac:	4433      	add	r3, r6
 80041ae:	9309      	str	r3, [sp, #36]	; 0x24
 80041b0:	e767      	b.n	8004082 <_svfiprintf_r+0x4e>
 80041b2:	460c      	mov	r4, r1
 80041b4:	2001      	movs	r0, #1
 80041b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ba:	e7a5      	b.n	8004108 <_svfiprintf_r+0xd4>
 80041bc:	2300      	movs	r3, #0
 80041be:	f04f 0c0a 	mov.w	ip, #10
 80041c2:	4619      	mov	r1, r3
 80041c4:	3401      	adds	r4, #1
 80041c6:	9305      	str	r3, [sp, #20]
 80041c8:	4620      	mov	r0, r4
 80041ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041ce:	3a30      	subs	r2, #48	; 0x30
 80041d0:	2a09      	cmp	r2, #9
 80041d2:	d903      	bls.n	80041dc <_svfiprintf_r+0x1a8>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0c5      	beq.n	8004164 <_svfiprintf_r+0x130>
 80041d8:	9105      	str	r1, [sp, #20]
 80041da:	e7c3      	b.n	8004164 <_svfiprintf_r+0x130>
 80041dc:	4604      	mov	r4, r0
 80041de:	2301      	movs	r3, #1
 80041e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80041e4:	e7f0      	b.n	80041c8 <_svfiprintf_r+0x194>
 80041e6:	ab03      	add	r3, sp, #12
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	462a      	mov	r2, r5
 80041ec:	4638      	mov	r0, r7
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <_svfiprintf_r+0x1fc>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	f3af 8000 	nop.w
 80041f6:	1c42      	adds	r2, r0, #1
 80041f8:	4606      	mov	r6, r0
 80041fa:	d1d6      	bne.n	80041aa <_svfiprintf_r+0x176>
 80041fc:	89ab      	ldrh	r3, [r5, #12]
 80041fe:	065b      	lsls	r3, r3, #25
 8004200:	f53f af2c 	bmi.w	800405c <_svfiprintf_r+0x28>
 8004204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004206:	b01d      	add	sp, #116	; 0x74
 8004208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420c:	ab03      	add	r3, sp, #12
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	462a      	mov	r2, r5
 8004212:	4638      	mov	r0, r7
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <_svfiprintf_r+0x1fc>)
 8004216:	a904      	add	r1, sp, #16
 8004218:	f000 f87c 	bl	8004314 <_printf_i>
 800421c:	e7eb      	b.n	80041f6 <_svfiprintf_r+0x1c2>
 800421e:	bf00      	nop
 8004220:	0800487c 	.word	0x0800487c
 8004224:	08004882 	.word	0x08004882
 8004228:	08004886 	.word	0x08004886
 800422c:	00000000 	.word	0x00000000
 8004230:	08003f7d 	.word	0x08003f7d

08004234 <_printf_common>:
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	4616      	mov	r6, r2
 800423a:	4699      	mov	r9, r3
 800423c:	688a      	ldr	r2, [r1, #8]
 800423e:	690b      	ldr	r3, [r1, #16]
 8004240:	4607      	mov	r7, r0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfb8      	it	lt
 8004246:	4613      	movlt	r3, r2
 8004248:	6033      	str	r3, [r6, #0]
 800424a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800424e:	460c      	mov	r4, r1
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	b10a      	cbz	r2, 800425a <_printf_common+0x26>
 8004256:	3301      	adds	r3, #1
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	0699      	lsls	r1, r3, #26
 800425e:	bf42      	ittt	mi
 8004260:	6833      	ldrmi	r3, [r6, #0]
 8004262:	3302      	addmi	r3, #2
 8004264:	6033      	strmi	r3, [r6, #0]
 8004266:	6825      	ldr	r5, [r4, #0]
 8004268:	f015 0506 	ands.w	r5, r5, #6
 800426c:	d106      	bne.n	800427c <_printf_common+0x48>
 800426e:	f104 0a19 	add.w	sl, r4, #25
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	6832      	ldr	r2, [r6, #0]
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	42ab      	cmp	r3, r5
 800427a:	dc28      	bgt.n	80042ce <_printf_common+0x9a>
 800427c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004280:	1e13      	subs	r3, r2, #0
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	bf18      	it	ne
 8004286:	2301      	movne	r3, #1
 8004288:	0692      	lsls	r2, r2, #26
 800428a:	d42d      	bmi.n	80042e8 <_printf_common+0xb4>
 800428c:	4649      	mov	r1, r9
 800428e:	4638      	mov	r0, r7
 8004290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004294:	47c0      	blx	r8
 8004296:	3001      	adds	r0, #1
 8004298:	d020      	beq.n	80042dc <_printf_common+0xa8>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	68e5      	ldr	r5, [r4, #12]
 800429e:	f003 0306 	and.w	r3, r3, #6
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	bf18      	it	ne
 80042a6:	2500      	movne	r5, #0
 80042a8:	6832      	ldr	r2, [r6, #0]
 80042aa:	f04f 0600 	mov.w	r6, #0
 80042ae:	68a3      	ldr	r3, [r4, #8]
 80042b0:	bf08      	it	eq
 80042b2:	1aad      	subeq	r5, r5, r2
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	bf08      	it	eq
 80042b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042bc:	4293      	cmp	r3, r2
 80042be:	bfc4      	itt	gt
 80042c0:	1a9b      	subgt	r3, r3, r2
 80042c2:	18ed      	addgt	r5, r5, r3
 80042c4:	341a      	adds	r4, #26
 80042c6:	42b5      	cmp	r5, r6
 80042c8:	d11a      	bne.n	8004300 <_printf_common+0xcc>
 80042ca:	2000      	movs	r0, #0
 80042cc:	e008      	b.n	80042e0 <_printf_common+0xac>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4652      	mov	r2, sl
 80042d2:	4649      	mov	r1, r9
 80042d4:	4638      	mov	r0, r7
 80042d6:	47c0      	blx	r8
 80042d8:	3001      	adds	r0, #1
 80042da:	d103      	bne.n	80042e4 <_printf_common+0xb0>
 80042dc:	f04f 30ff 	mov.w	r0, #4294967295
 80042e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e4:	3501      	adds	r5, #1
 80042e6:	e7c4      	b.n	8004272 <_printf_common+0x3e>
 80042e8:	2030      	movs	r0, #48	; 0x30
 80042ea:	18e1      	adds	r1, r4, r3
 80042ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042f6:	4422      	add	r2, r4
 80042f8:	3302      	adds	r3, #2
 80042fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042fe:	e7c5      	b.n	800428c <_printf_common+0x58>
 8004300:	2301      	movs	r3, #1
 8004302:	4622      	mov	r2, r4
 8004304:	4649      	mov	r1, r9
 8004306:	4638      	mov	r0, r7
 8004308:	47c0      	blx	r8
 800430a:	3001      	adds	r0, #1
 800430c:	d0e6      	beq.n	80042dc <_printf_common+0xa8>
 800430e:	3601      	adds	r6, #1
 8004310:	e7d9      	b.n	80042c6 <_printf_common+0x92>
	...

08004314 <_printf_i>:
 8004314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004318:	7e0f      	ldrb	r7, [r1, #24]
 800431a:	4691      	mov	r9, r2
 800431c:	2f78      	cmp	r7, #120	; 0x78
 800431e:	4680      	mov	r8, r0
 8004320:	460c      	mov	r4, r1
 8004322:	469a      	mov	sl, r3
 8004324:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800432a:	d807      	bhi.n	800433c <_printf_i+0x28>
 800432c:	2f62      	cmp	r7, #98	; 0x62
 800432e:	d80a      	bhi.n	8004346 <_printf_i+0x32>
 8004330:	2f00      	cmp	r7, #0
 8004332:	f000 80d9 	beq.w	80044e8 <_printf_i+0x1d4>
 8004336:	2f58      	cmp	r7, #88	; 0x58
 8004338:	f000 80a4 	beq.w	8004484 <_printf_i+0x170>
 800433c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004344:	e03a      	b.n	80043bc <_printf_i+0xa8>
 8004346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800434a:	2b15      	cmp	r3, #21
 800434c:	d8f6      	bhi.n	800433c <_printf_i+0x28>
 800434e:	a101      	add	r1, pc, #4	; (adr r1, 8004354 <_printf_i+0x40>)
 8004350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043c1 	.word	0x080043c1
 800435c:	0800433d 	.word	0x0800433d
 8004360:	0800433d 	.word	0x0800433d
 8004364:	0800433d 	.word	0x0800433d
 8004368:	0800433d 	.word	0x0800433d
 800436c:	080043c1 	.word	0x080043c1
 8004370:	0800433d 	.word	0x0800433d
 8004374:	0800433d 	.word	0x0800433d
 8004378:	0800433d 	.word	0x0800433d
 800437c:	0800433d 	.word	0x0800433d
 8004380:	080044cf 	.word	0x080044cf
 8004384:	080043f1 	.word	0x080043f1
 8004388:	080044b1 	.word	0x080044b1
 800438c:	0800433d 	.word	0x0800433d
 8004390:	0800433d 	.word	0x0800433d
 8004394:	080044f1 	.word	0x080044f1
 8004398:	0800433d 	.word	0x0800433d
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	0800433d 	.word	0x0800433d
 80043a4:	0800433d 	.word	0x0800433d
 80043a8:	080044b9 	.word	0x080044b9
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	602a      	str	r2, [r5, #0]
 80043b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e0a4      	b.n	800450a <_printf_i+0x1f6>
 80043c0:	6820      	ldr	r0, [r4, #0]
 80043c2:	6829      	ldr	r1, [r5, #0]
 80043c4:	0606      	lsls	r6, r0, #24
 80043c6:	f101 0304 	add.w	r3, r1, #4
 80043ca:	d50a      	bpl.n	80043e2 <_printf_i+0xce>
 80043cc:	680e      	ldr	r6, [r1, #0]
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	2e00      	cmp	r6, #0
 80043d2:	da03      	bge.n	80043dc <_printf_i+0xc8>
 80043d4:	232d      	movs	r3, #45	; 0x2d
 80043d6:	4276      	negs	r6, r6
 80043d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043dc:	230a      	movs	r3, #10
 80043de:	485e      	ldr	r0, [pc, #376]	; (8004558 <_printf_i+0x244>)
 80043e0:	e019      	b.n	8004416 <_printf_i+0x102>
 80043e2:	680e      	ldr	r6, [r1, #0]
 80043e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	bf18      	it	ne
 80043ec:	b236      	sxthne	r6, r6
 80043ee:	e7ef      	b.n	80043d0 <_printf_i+0xbc>
 80043f0:	682b      	ldr	r3, [r5, #0]
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	1d19      	adds	r1, r3, #4
 80043f6:	6029      	str	r1, [r5, #0]
 80043f8:	0601      	lsls	r1, r0, #24
 80043fa:	d501      	bpl.n	8004400 <_printf_i+0xec>
 80043fc:	681e      	ldr	r6, [r3, #0]
 80043fe:	e002      	b.n	8004406 <_printf_i+0xf2>
 8004400:	0646      	lsls	r6, r0, #25
 8004402:	d5fb      	bpl.n	80043fc <_printf_i+0xe8>
 8004404:	881e      	ldrh	r6, [r3, #0]
 8004406:	2f6f      	cmp	r7, #111	; 0x6f
 8004408:	bf0c      	ite	eq
 800440a:	2308      	moveq	r3, #8
 800440c:	230a      	movne	r3, #10
 800440e:	4852      	ldr	r0, [pc, #328]	; (8004558 <_printf_i+0x244>)
 8004410:	2100      	movs	r1, #0
 8004412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004416:	6865      	ldr	r5, [r4, #4]
 8004418:	2d00      	cmp	r5, #0
 800441a:	bfa8      	it	ge
 800441c:	6821      	ldrge	r1, [r4, #0]
 800441e:	60a5      	str	r5, [r4, #8]
 8004420:	bfa4      	itt	ge
 8004422:	f021 0104 	bicge.w	r1, r1, #4
 8004426:	6021      	strge	r1, [r4, #0]
 8004428:	b90e      	cbnz	r6, 800442e <_printf_i+0x11a>
 800442a:	2d00      	cmp	r5, #0
 800442c:	d04d      	beq.n	80044ca <_printf_i+0x1b6>
 800442e:	4615      	mov	r5, r2
 8004430:	fbb6 f1f3 	udiv	r1, r6, r3
 8004434:	fb03 6711 	mls	r7, r3, r1, r6
 8004438:	5dc7      	ldrb	r7, [r0, r7]
 800443a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800443e:	4637      	mov	r7, r6
 8004440:	42bb      	cmp	r3, r7
 8004442:	460e      	mov	r6, r1
 8004444:	d9f4      	bls.n	8004430 <_printf_i+0x11c>
 8004446:	2b08      	cmp	r3, #8
 8004448:	d10b      	bne.n	8004462 <_printf_i+0x14e>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07de      	lsls	r6, r3, #31
 800444e:	d508      	bpl.n	8004462 <_printf_i+0x14e>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	6861      	ldr	r1, [r4, #4]
 8004454:	4299      	cmp	r1, r3
 8004456:	bfde      	ittt	le
 8004458:	2330      	movle	r3, #48	; 0x30
 800445a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800445e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004462:	1b52      	subs	r2, r2, r5
 8004464:	6122      	str	r2, [r4, #16]
 8004466:	464b      	mov	r3, r9
 8004468:	4621      	mov	r1, r4
 800446a:	4640      	mov	r0, r8
 800446c:	f8cd a000 	str.w	sl, [sp]
 8004470:	aa03      	add	r2, sp, #12
 8004472:	f7ff fedf 	bl	8004234 <_printf_common>
 8004476:	3001      	adds	r0, #1
 8004478:	d14c      	bne.n	8004514 <_printf_i+0x200>
 800447a:	f04f 30ff 	mov.w	r0, #4294967295
 800447e:	b004      	add	sp, #16
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	4834      	ldr	r0, [pc, #208]	; (8004558 <_printf_i+0x244>)
 8004486:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800448a:	6829      	ldr	r1, [r5, #0]
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004492:	6029      	str	r1, [r5, #0]
 8004494:	061d      	lsls	r5, r3, #24
 8004496:	d514      	bpl.n	80044c2 <_printf_i+0x1ae>
 8004498:	07df      	lsls	r7, r3, #31
 800449a:	bf44      	itt	mi
 800449c:	f043 0320 	orrmi.w	r3, r3, #32
 80044a0:	6023      	strmi	r3, [r4, #0]
 80044a2:	b91e      	cbnz	r6, 80044ac <_printf_i+0x198>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	f023 0320 	bic.w	r3, r3, #32
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	2310      	movs	r3, #16
 80044ae:	e7af      	b.n	8004410 <_printf_i+0xfc>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f043 0320 	orr.w	r3, r3, #32
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	2378      	movs	r3, #120	; 0x78
 80044ba:	4828      	ldr	r0, [pc, #160]	; (800455c <_printf_i+0x248>)
 80044bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044c0:	e7e3      	b.n	800448a <_printf_i+0x176>
 80044c2:	0659      	lsls	r1, r3, #25
 80044c4:	bf48      	it	mi
 80044c6:	b2b6      	uxthmi	r6, r6
 80044c8:	e7e6      	b.n	8004498 <_printf_i+0x184>
 80044ca:	4615      	mov	r5, r2
 80044cc:	e7bb      	b.n	8004446 <_printf_i+0x132>
 80044ce:	682b      	ldr	r3, [r5, #0]
 80044d0:	6826      	ldr	r6, [r4, #0]
 80044d2:	1d18      	adds	r0, r3, #4
 80044d4:	6961      	ldr	r1, [r4, #20]
 80044d6:	6028      	str	r0, [r5, #0]
 80044d8:	0635      	lsls	r5, r6, #24
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	d501      	bpl.n	80044e2 <_printf_i+0x1ce>
 80044de:	6019      	str	r1, [r3, #0]
 80044e0:	e002      	b.n	80044e8 <_printf_i+0x1d4>
 80044e2:	0670      	lsls	r0, r6, #25
 80044e4:	d5fb      	bpl.n	80044de <_printf_i+0x1ca>
 80044e6:	8019      	strh	r1, [r3, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	4615      	mov	r5, r2
 80044ec:	6123      	str	r3, [r4, #16]
 80044ee:	e7ba      	b.n	8004466 <_printf_i+0x152>
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	1d1a      	adds	r2, r3, #4
 80044f6:	602a      	str	r2, [r5, #0]
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	6862      	ldr	r2, [r4, #4]
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 f82f 	bl	8004560 <memchr>
 8004502:	b108      	cbz	r0, 8004508 <_printf_i+0x1f4>
 8004504:	1b40      	subs	r0, r0, r5
 8004506:	6060      	str	r0, [r4, #4]
 8004508:	6863      	ldr	r3, [r4, #4]
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	2300      	movs	r3, #0
 800450e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004512:	e7a8      	b.n	8004466 <_printf_i+0x152>
 8004514:	462a      	mov	r2, r5
 8004516:	4649      	mov	r1, r9
 8004518:	4640      	mov	r0, r8
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	47d0      	blx	sl
 800451e:	3001      	adds	r0, #1
 8004520:	d0ab      	beq.n	800447a <_printf_i+0x166>
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	079b      	lsls	r3, r3, #30
 8004526:	d413      	bmi.n	8004550 <_printf_i+0x23c>
 8004528:	68e0      	ldr	r0, [r4, #12]
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	4298      	cmp	r0, r3
 800452e:	bfb8      	it	lt
 8004530:	4618      	movlt	r0, r3
 8004532:	e7a4      	b.n	800447e <_printf_i+0x16a>
 8004534:	2301      	movs	r3, #1
 8004536:	4632      	mov	r2, r6
 8004538:	4649      	mov	r1, r9
 800453a:	4640      	mov	r0, r8
 800453c:	47d0      	blx	sl
 800453e:	3001      	adds	r0, #1
 8004540:	d09b      	beq.n	800447a <_printf_i+0x166>
 8004542:	3501      	adds	r5, #1
 8004544:	68e3      	ldr	r3, [r4, #12]
 8004546:	9903      	ldr	r1, [sp, #12]
 8004548:	1a5b      	subs	r3, r3, r1
 800454a:	42ab      	cmp	r3, r5
 800454c:	dcf2      	bgt.n	8004534 <_printf_i+0x220>
 800454e:	e7eb      	b.n	8004528 <_printf_i+0x214>
 8004550:	2500      	movs	r5, #0
 8004552:	f104 0619 	add.w	r6, r4, #25
 8004556:	e7f5      	b.n	8004544 <_printf_i+0x230>
 8004558:	0800488d 	.word	0x0800488d
 800455c:	0800489e 	.word	0x0800489e

08004560 <memchr>:
 8004560:	4603      	mov	r3, r0
 8004562:	b510      	push	{r4, lr}
 8004564:	b2c9      	uxtb	r1, r1
 8004566:	4402      	add	r2, r0
 8004568:	4293      	cmp	r3, r2
 800456a:	4618      	mov	r0, r3
 800456c:	d101      	bne.n	8004572 <memchr+0x12>
 800456e:	2000      	movs	r0, #0
 8004570:	e003      	b.n	800457a <memchr+0x1a>
 8004572:	7804      	ldrb	r4, [r0, #0]
 8004574:	3301      	adds	r3, #1
 8004576:	428c      	cmp	r4, r1
 8004578:	d1f6      	bne.n	8004568 <memchr+0x8>
 800457a:	bd10      	pop	{r4, pc}

0800457c <memcpy>:
 800457c:	440a      	add	r2, r1
 800457e:	4291      	cmp	r1, r2
 8004580:	f100 33ff 	add.w	r3, r0, #4294967295
 8004584:	d100      	bne.n	8004588 <memcpy+0xc>
 8004586:	4770      	bx	lr
 8004588:	b510      	push	{r4, lr}
 800458a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800458e:	4291      	cmp	r1, r2
 8004590:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004594:	d1f9      	bne.n	800458a <memcpy+0xe>
 8004596:	bd10      	pop	{r4, pc}

08004598 <memmove>:
 8004598:	4288      	cmp	r0, r1
 800459a:	b510      	push	{r4, lr}
 800459c:	eb01 0402 	add.w	r4, r1, r2
 80045a0:	d902      	bls.n	80045a8 <memmove+0x10>
 80045a2:	4284      	cmp	r4, r0
 80045a4:	4623      	mov	r3, r4
 80045a6:	d807      	bhi.n	80045b8 <memmove+0x20>
 80045a8:	1e43      	subs	r3, r0, #1
 80045aa:	42a1      	cmp	r1, r4
 80045ac:	d008      	beq.n	80045c0 <memmove+0x28>
 80045ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045b6:	e7f8      	b.n	80045aa <memmove+0x12>
 80045b8:	4601      	mov	r1, r0
 80045ba:	4402      	add	r2, r0
 80045bc:	428a      	cmp	r2, r1
 80045be:	d100      	bne.n	80045c2 <memmove+0x2a>
 80045c0:	bd10      	pop	{r4, pc}
 80045c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ca:	e7f7      	b.n	80045bc <memmove+0x24>

080045cc <_free_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4605      	mov	r5, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d040      	beq.n	8004656 <_free_r+0x8a>
 80045d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d8:	1f0c      	subs	r4, r1, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	18e4      	addlt	r4, r4, r3
 80045e0:	f000 f910 	bl	8004804 <__malloc_lock>
 80045e4:	4a1c      	ldr	r2, [pc, #112]	; (8004658 <_free_r+0x8c>)
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x2c>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045f4:	f000 b90c 	b.w	8004810 <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x42>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1809      	addeq	r1, r1, r0
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x1e>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x4c>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x42>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1850      	adds	r0, r2, r1
 800461c:	42a0      	cmp	r0, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x6c>
 8004620:	6820      	ldr	r0, [r4, #0]
 8004622:	4401      	add	r1, r0
 8004624:	1850      	adds	r0, r2, r1
 8004626:	4283      	cmp	r3, r0
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x22>
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4401      	add	r1, r0
 8004632:	6011      	str	r1, [r2, #0]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	e7da      	b.n	80045ee <_free_r+0x22>
 8004638:	d902      	bls.n	8004640 <_free_r+0x74>
 800463a:	230c      	movs	r3, #12
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x22>
 8004640:	6820      	ldr	r0, [r4, #0]
 8004642:	1821      	adds	r1, r4, r0
 8004644:	428b      	cmp	r3, r1
 8004646:	bf01      	itttt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	1809      	addeq	r1, r1, r0
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6063      	str	r3, [r4, #4]
 8004652:	6054      	str	r4, [r2, #4]
 8004654:	e7cb      	b.n	80045ee <_free_r+0x22>
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	2000022c 	.word	0x2000022c

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0e      	ldr	r6, [pc, #56]	; (8004698 <sbrk_aligned+0x3c>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 f8bc 	bl	80047e4 <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f8b7 	bl	80047e4 <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d00a      	beq.n	8004690 <sbrk_aligned+0x34>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d007      	beq.n	8004694 <sbrk_aligned+0x38>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f8ac 	bl	80047e4 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d101      	bne.n	8004694 <sbrk_aligned+0x38>
 8004690:	f04f 34ff 	mov.w	r4, #4294967295
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	20000230 	.word	0x20000230

0800469c <_malloc_r>:
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	1ccd      	adds	r5, r1, #3
 80046a2:	f025 0503 	bic.w	r5, r5, #3
 80046a6:	3508      	adds	r5, #8
 80046a8:	2d0c      	cmp	r5, #12
 80046aa:	bf38      	it	cc
 80046ac:	250c      	movcc	r5, #12
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	4607      	mov	r7, r0
 80046b2:	db01      	blt.n	80046b8 <_malloc_r+0x1c>
 80046b4:	42a9      	cmp	r1, r5
 80046b6:	d905      	bls.n	80046c4 <_malloc_r+0x28>
 80046b8:	230c      	movs	r3, #12
 80046ba:	2600      	movs	r6, #0
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4630      	mov	r0, r6
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	4e2e      	ldr	r6, [pc, #184]	; (8004780 <_malloc_r+0xe4>)
 80046c6:	f000 f89d 	bl	8004804 <__malloc_lock>
 80046ca:	6833      	ldr	r3, [r6, #0]
 80046cc:	461c      	mov	r4, r3
 80046ce:	bb34      	cbnz	r4, 800471e <_malloc_r+0x82>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4638      	mov	r0, r7
 80046d4:	f7ff ffc2 	bl	800465c <sbrk_aligned>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	4604      	mov	r4, r0
 80046dc:	d14d      	bne.n	800477a <_malloc_r+0xde>
 80046de:	6834      	ldr	r4, [r6, #0]
 80046e0:	4626      	mov	r6, r4
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	d140      	bne.n	8004768 <_malloc_r+0xcc>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	4631      	mov	r1, r6
 80046ea:	4638      	mov	r0, r7
 80046ec:	eb04 0803 	add.w	r8, r4, r3
 80046f0:	f000 f878 	bl	80047e4 <_sbrk_r>
 80046f4:	4580      	cmp	r8, r0
 80046f6:	d13a      	bne.n	800476e <_malloc_r+0xd2>
 80046f8:	6821      	ldr	r1, [r4, #0]
 80046fa:	3503      	adds	r5, #3
 80046fc:	1a6d      	subs	r5, r5, r1
 80046fe:	f025 0503 	bic.w	r5, r5, #3
 8004702:	3508      	adds	r5, #8
 8004704:	2d0c      	cmp	r5, #12
 8004706:	bf38      	it	cc
 8004708:	250c      	movcc	r5, #12
 800470a:	4638      	mov	r0, r7
 800470c:	4629      	mov	r1, r5
 800470e:	f7ff ffa5 	bl	800465c <sbrk_aligned>
 8004712:	3001      	adds	r0, #1
 8004714:	d02b      	beq.n	800476e <_malloc_r+0xd2>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	442b      	add	r3, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e00e      	b.n	800473c <_malloc_r+0xa0>
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	1b52      	subs	r2, r2, r5
 8004722:	d41e      	bmi.n	8004762 <_malloc_r+0xc6>
 8004724:	2a0b      	cmp	r2, #11
 8004726:	d916      	bls.n	8004756 <_malloc_r+0xba>
 8004728:	1961      	adds	r1, r4, r5
 800472a:	42a3      	cmp	r3, r4
 800472c:	6025      	str	r5, [r4, #0]
 800472e:	bf18      	it	ne
 8004730:	6059      	strne	r1, [r3, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	bf08      	it	eq
 8004736:	6031      	streq	r1, [r6, #0]
 8004738:	5162      	str	r2, [r4, r5]
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	4638      	mov	r0, r7
 800473e:	f104 060b 	add.w	r6, r4, #11
 8004742:	f000 f865 	bl	8004810 <__malloc_unlock>
 8004746:	f026 0607 	bic.w	r6, r6, #7
 800474a:	1d23      	adds	r3, r4, #4
 800474c:	1af2      	subs	r2, r6, r3
 800474e:	d0b6      	beq.n	80046be <_malloc_r+0x22>
 8004750:	1b9b      	subs	r3, r3, r6
 8004752:	50a3      	str	r3, [r4, r2]
 8004754:	e7b3      	b.n	80046be <_malloc_r+0x22>
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	42a3      	cmp	r3, r4
 800475a:	bf0c      	ite	eq
 800475c:	6032      	streq	r2, [r6, #0]
 800475e:	605a      	strne	r2, [r3, #4]
 8004760:	e7ec      	b.n	800473c <_malloc_r+0xa0>
 8004762:	4623      	mov	r3, r4
 8004764:	6864      	ldr	r4, [r4, #4]
 8004766:	e7b2      	b.n	80046ce <_malloc_r+0x32>
 8004768:	4634      	mov	r4, r6
 800476a:	6876      	ldr	r6, [r6, #4]
 800476c:	e7b9      	b.n	80046e2 <_malloc_r+0x46>
 800476e:	230c      	movs	r3, #12
 8004770:	4638      	mov	r0, r7
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	f000 f84c 	bl	8004810 <__malloc_unlock>
 8004778:	e7a1      	b.n	80046be <_malloc_r+0x22>
 800477a:	6025      	str	r5, [r4, #0]
 800477c:	e7de      	b.n	800473c <_malloc_r+0xa0>
 800477e:	bf00      	nop
 8004780:	2000022c 	.word	0x2000022c

08004784 <_realloc_r>:
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4680      	mov	r8, r0
 800478a:	4614      	mov	r4, r2
 800478c:	460e      	mov	r6, r1
 800478e:	b921      	cbnz	r1, 800479a <_realloc_r+0x16>
 8004790:	4611      	mov	r1, r2
 8004792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004796:	f7ff bf81 	b.w	800469c <_malloc_r>
 800479a:	b92a      	cbnz	r2, 80047a8 <_realloc_r+0x24>
 800479c:	f7ff ff16 	bl	80045cc <_free_r>
 80047a0:	4625      	mov	r5, r4
 80047a2:	4628      	mov	r0, r5
 80047a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a8:	f000 f838 	bl	800481c <_malloc_usable_size_r>
 80047ac:	4284      	cmp	r4, r0
 80047ae:	4607      	mov	r7, r0
 80047b0:	d802      	bhi.n	80047b8 <_realloc_r+0x34>
 80047b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047b6:	d812      	bhi.n	80047de <_realloc_r+0x5a>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4640      	mov	r0, r8
 80047bc:	f7ff ff6e 	bl	800469c <_malloc_r>
 80047c0:	4605      	mov	r5, r0
 80047c2:	2800      	cmp	r0, #0
 80047c4:	d0ed      	beq.n	80047a2 <_realloc_r+0x1e>
 80047c6:	42bc      	cmp	r4, r7
 80047c8:	4622      	mov	r2, r4
 80047ca:	4631      	mov	r1, r6
 80047cc:	bf28      	it	cs
 80047ce:	463a      	movcs	r2, r7
 80047d0:	f7ff fed4 	bl	800457c <memcpy>
 80047d4:	4631      	mov	r1, r6
 80047d6:	4640      	mov	r0, r8
 80047d8:	f7ff fef8 	bl	80045cc <_free_r>
 80047dc:	e7e1      	b.n	80047a2 <_realloc_r+0x1e>
 80047de:	4635      	mov	r5, r6
 80047e0:	e7df      	b.n	80047a2 <_realloc_r+0x1e>
	...

080047e4 <_sbrk_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	2300      	movs	r3, #0
 80047e8:	4d05      	ldr	r5, [pc, #20]	; (8004800 <_sbrk_r+0x1c>)
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	f7fc fe74 	bl	80014dc <_sbrk>
 80047f4:	1c43      	adds	r3, r0, #1
 80047f6:	d102      	bne.n	80047fe <_sbrk_r+0x1a>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	b103      	cbz	r3, 80047fe <_sbrk_r+0x1a>
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
 8004800:	20000234 	.word	0x20000234

08004804 <__malloc_lock>:
 8004804:	4801      	ldr	r0, [pc, #4]	; (800480c <__malloc_lock+0x8>)
 8004806:	f000 b811 	b.w	800482c <__retarget_lock_acquire_recursive>
 800480a:	bf00      	nop
 800480c:	20000238 	.word	0x20000238

08004810 <__malloc_unlock>:
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <__malloc_unlock+0x8>)
 8004812:	f000 b80c 	b.w	800482e <__retarget_lock_release_recursive>
 8004816:	bf00      	nop
 8004818:	20000238 	.word	0x20000238

0800481c <_malloc_usable_size_r>:
 800481c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004820:	1f18      	subs	r0, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	bfbc      	itt	lt
 8004826:	580b      	ldrlt	r3, [r1, r0]
 8004828:	18c0      	addlt	r0, r0, r3
 800482a:	4770      	bx	lr

0800482c <__retarget_lock_acquire_recursive>:
 800482c:	4770      	bx	lr

0800482e <__retarget_lock_release_recursive>:
 800482e:	4770      	bx	lr

08004830 <_init>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	bf00      	nop
 8004834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004836:	bc08      	pop	{r3}
 8004838:	469e      	mov	lr, r3
 800483a:	4770      	bx	lr

0800483c <_fini>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr
